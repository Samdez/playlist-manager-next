module.exports = {

"[project]/node_modules/@trigger.dev/sdk/dist/esm/version.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "VERSION": (()=>VERSION)
});
const VERSION = "3.3.16"; //# sourceMappingURL=version.js.map
}}),
"[project]/node_modules/@trigger.dev/sdk/dist/esm/v3/tracer.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "tracer": (()=>tracer)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$tracer$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/core/dist/esm/v3/tracer.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$sdk$2f$dist$2f$esm$2f$version$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/sdk/dist/esm/version.js [app-rsc] (ecmascript)");
;
;
const tracer = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$tracer$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["TriggerTracer"]({
    name: "@trigger.dev/sdk",
    version: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$sdk$2f$dist$2f$esm$2f$version$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["VERSION"]
}); //# sourceMappingURL=tracer.js.map
}}),
"[project]/node_modules/@trigger.dev/sdk/dist/esm/v3/cache.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "InMemoryCache": (()=>InMemoryCache),
    "createCache": (()=>createCache)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/core/dist/esm/v3/index.js [app-rsc] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$sdk$2f$dist$2f$esm$2f$v3$2f$tracer$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/sdk/dist/esm/v3/tracer.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$semanticInternalAttributes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/core/dist/esm/v3/semanticInternalAttributes.js [app-rsc] (ecmascript)");
;
;
class InMemoryCache {
    _cache = new Map();
    get(key) {
        return this._cache.get(key);
    }
    set(key, value) {
        this._cache.set(key, value);
        return undefined;
    }
    delete(key) {
        this._cache.delete(key);
        return undefined;
    }
}
function createCache(store) {
    return function cache(cacheKey, fn) {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$sdk$2f$dist$2f$esm$2f$v3$2f$tracer$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["tracer"].startActiveSpan("cache", async (span)=>{
            span.setAttribute("cache.key", cacheKey);
            span.setAttribute(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$semanticInternalAttributes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["SemanticInternalAttributes"].STYLE_ICON, "device-sd-card");
            const cacheEntry = await store.get(cacheKey);
            if (cacheEntry) {
                span.updateName(`cache.hit ${cacheKey}`);
                return cacheEntry.value;
            }
            span.updateName(`cache.miss ${cacheKey}`);
            const value = await __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$sdk$2f$dist$2f$esm$2f$v3$2f$tracer$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["tracer"].startActiveSpan("cache.getFreshValue", async (span)=>{
                return await fn();
            }, {
                attributes: {
                    "cache.key": cacheKey,
                    [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$semanticInternalAttributes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["SemanticInternalAttributes"].STYLE_ICON]: "device-sd-card"
                }
            });
            await __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$sdk$2f$dist$2f$esm$2f$v3$2f$tracer$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["tracer"].startActiveSpan("cache.set", async (span)=>{
                await store.set(cacheKey, {
                    value,
                    metadata: {
                        createdTime: Date.now()
                    }
                });
            }, {
                attributes: {
                    "cache.key": cacheKey,
                    [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$semanticInternalAttributes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["SemanticInternalAttributes"].STYLE_ICON]: "device-sd-card"
                }
            });
            return value;
        });
    };
} //# sourceMappingURL=cache.js.map
}}),
"[project]/node_modules/@trigger.dev/sdk/dist/esm/v3/config.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "defineConfig": (()=>defineConfig)
});
function defineConfig(config) {
    return config;
} //# sourceMappingURL=config.js.map
}}),
"[project]/node_modules/@trigger.dev/sdk/dist/esm/v3/retry.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "retry": (()=>retry)
});
var __TURBOPACK__imported__module__$5b$externals$5d2f40$opentelemetry$2f$api__$5b$external$5d$__$2840$opentelemetry$2f$api$2c$__cjs$29$__ = __turbopack_import__("[externals]/@opentelemetry/api [external] (@opentelemetry/api, cjs)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/core/dist/esm/v3/index.js [app-rsc] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$sdk$2f$dist$2f$esm$2f$v3$2f$tracer$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/sdk/dist/esm/v3/tracer.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$semanticInternalAttributes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/core/dist/esm/v3/semanticInternalAttributes.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$semantic$2d$conventions$2f$build$2f$esm$2f$trace$2f$SemanticAttributes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@opentelemetry/semantic-conventions/build/esm/trace/SemanticAttributes.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$utils$2f$retries$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/core/dist/esm/v3/utils/retries.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$eventFilterMatches$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/core/dist/esm/eventFilterMatches.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$utils$2f$styleAttributes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/core/dist/esm/v3/utils/styleAttributes.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$utils$2f$flattenAttributes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/core/dist/esm/v3/utils/flattenAttributes.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$runtime$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/core/dist/esm/v3/runtime-api.js [app-rsc] (ecmascript)");
;
;
;
;
function onThrow(fn, options) {
    const opts = {
        ...__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$utils$2f$retries$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["defaultRetryOptions"],
        ...options
    };
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$sdk$2f$dist$2f$esm$2f$v3$2f$tracer$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["tracer"].startActiveSpan(`retry.onThrow()`, async (span)=>{
        let attempt = 1;
        while(attempt <= opts.maxAttempts){
            const innerSpan = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$sdk$2f$dist$2f$esm$2f$v3$2f$tracer$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["tracer"].startSpan("retry.fn()", {
                attributes: {
                    [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$semanticInternalAttributes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["SemanticInternalAttributes"].STYLE_ICON]: "function",
                    ...(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$utils$2f$styleAttributes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["accessoryAttributes"])({
                        items: [
                            {
                                text: `${attempt}/${opts.maxAttempts}`,
                                variant: "normal"
                            }
                        ],
                        style: "codepath"
                    })
                }
            });
            const contextWithSpanSet = __TURBOPACK__imported__module__$5b$externals$5d2f40$opentelemetry$2f$api__$5b$external$5d$__$2840$opentelemetry$2f$api$2c$__cjs$29$__["trace"].setSpan(__TURBOPACK__imported__module__$5b$externals$5d2f40$opentelemetry$2f$api__$5b$external$5d$__$2840$opentelemetry$2f$api$2c$__cjs$29$__["context"].active(), innerSpan);
            try {
                const result = await __TURBOPACK__imported__module__$5b$externals$5d2f40$opentelemetry$2f$api__$5b$external$5d$__$2840$opentelemetry$2f$api$2c$__cjs$29$__["context"].with(contextWithSpanSet, async ()=>{
                    return fn({
                        attempt,
                        maxAttempts: opts.maxAttempts
                    });
                });
                innerSpan.end();
                return result;
            } catch (e) {
                if (e instanceof Error || typeof e === "string") {
                    innerSpan.recordException(e);
                } else {
                    innerSpan.recordException(String(e));
                }
                innerSpan.setStatus({
                    code: __TURBOPACK__imported__module__$5b$externals$5d2f40$opentelemetry$2f$api__$5b$external$5d$__$2840$opentelemetry$2f$api$2c$__cjs$29$__["SpanStatusCode"].ERROR
                });
                if (e instanceof Error && e.name === "AbortTaskRunError") {
                    innerSpan.end();
                    throw e;
                }
                const nextRetryDelay = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$utils$2f$retries$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["calculateNextRetryDelay"])(opts, attempt);
                if (!nextRetryDelay) {
                    innerSpan.end();
                    throw e;
                }
                innerSpan.setAttribute(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$semanticInternalAttributes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["SemanticInternalAttributes"].RETRY_AT, new Date(Date.now() + nextRetryDelay).toISOString());
                innerSpan.setAttribute(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$semanticInternalAttributes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["SemanticInternalAttributes"].RETRY_COUNT, attempt);
                innerSpan.setAttribute(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$semanticInternalAttributes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["SemanticInternalAttributes"].RETRY_DELAY, `${nextRetryDelay}ms`);
                innerSpan.end();
                await __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$runtime$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["runtime"].waitForDuration(nextRetryDelay);
            } finally{
                attempt++;
            }
        }
        throw new Error("Max attempts reached");
    }, {
        attributes: {
            [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$semanticInternalAttributes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["SemanticInternalAttributes"].STYLE_ICON]: "arrow-capsule"
        }
    });
}
const normalizeUrlFromInput = (input)=>{
    if (typeof input === "string") {
        return new URL(input);
    }
    if (input instanceof URL) {
        return input;
    }
    return new URL(input.url);
};
const normalizeHttpMethod = (input, init)=>{
    if (typeof input === "string" || input instanceof URL) {
        return (init?.method || "GET").toUpperCase();
    }
    return (input.method ?? init?.method ?? "GET").toUpperCase();
};
class FetchErrorWithSpan extends Error {
    originalError;
    span;
    constructor(originalError, span){
        super("Fetch error");
        this.originalError = originalError;
        this.span = span;
    }
}
const MAX_ATTEMPTS = 10;
async function retryFetch(input, init) {
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$sdk$2f$dist$2f$esm$2f$v3$2f$tracer$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["tracer"].startActiveSpan("retry.fetch()", async (span)=>{
        let attempt = 1;
        while(true){
            try {
                const abortController = new AbortController();
                const timeoutId = init?.timeoutInMs ? setTimeout(()=>{
                    abortController.abort();
                }, init?.timeoutInMs) : undefined;
                init?.signal?.addEventListener("abort", ()=>{
                    abortController.abort();
                });
                const [response, span] = await doFetchRequest(input, {
                    ...init ?? {},
                    signal: abortController.signal
                }, attempt);
                if (timeoutId) {
                    clearTimeout(timeoutId);
                }
                if (response.ok) {
                    span.setAttributes(createFetchResponseAttributes(response));
                    span.end();
                    return response;
                }
                const nextRetry = await calculateRetryDelayForResponse(resolveDefaults(init?.retry, "byStatus", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$utils$2f$retries$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["defaultFetchRetryOptions"].byStatus), response, attempt);
                if (!nextRetry) {
                    span.setAttributes(createFetchResponseAttributes(response));
                    span.end();
                    return response;
                }
                if (attempt >= MAX_ATTEMPTS) {
                    span.setAttributes(createFetchResponseAttributes(response));
                    span.end();
                    return response;
                }
                if (nextRetry.type === "delay") {
                    span.setAttribute(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$semanticInternalAttributes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["SemanticInternalAttributes"].RETRY_AT, new Date(Date.now() + nextRetry.value).toISOString());
                    span.setAttribute(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$semanticInternalAttributes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["SemanticInternalAttributes"].RETRY_COUNT, attempt);
                    span.setAttribute(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$semanticInternalAttributes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["SemanticInternalAttributes"].RETRY_DELAY, `${nextRetry.value}ms`);
                    span.end();
                    await __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$runtime$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["runtime"].waitForDuration(nextRetry.value);
                } else {
                    const now = Date.now();
                    const nextRetryDate = new Date(nextRetry.value);
                    const isInFuture = nextRetryDate.getTime() > now;
                    span.setAttribute(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$semanticInternalAttributes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["SemanticInternalAttributes"].RETRY_AT, new Date(nextRetry.value).toISOString());
                    span.setAttribute(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$semanticInternalAttributes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["SemanticInternalAttributes"].RETRY_COUNT, attempt);
                    if (isInFuture) {
                        span.setAttribute(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$semanticInternalAttributes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["SemanticInternalAttributes"].RETRY_DELAY, `${nextRetry.value - now}ms`);
                    }
                    span.end();
                    await __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$runtime$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["runtime"].waitUntil(new Date(nextRetry.value));
                }
            } catch (e) {
                if (e instanceof FetchErrorWithSpan && e.originalError instanceof Error) {
                    if (e.originalError.name === "AbortError") {
                        const nextRetryDelay = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$utils$2f$retries$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["calculateNextRetryDelay"])(resolveDefaults(init?.retry, "timeout", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$utils$2f$retries$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["defaultFetchRetryOptions"].timeout), attempt);
                        if (!nextRetryDelay) {
                            e.span.end();
                            throw e;
                        }
                        if (attempt >= MAX_ATTEMPTS) {
                            e.span.end();
                            throw e;
                        }
                        e.span.setAttribute(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$semanticInternalAttributes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["SemanticInternalAttributes"].RETRY_AT, new Date(Date.now() + nextRetryDelay).toISOString());
                        e.span.setAttribute(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$semanticInternalAttributes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["SemanticInternalAttributes"].RETRY_COUNT, attempt);
                        e.span.setAttribute(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$semanticInternalAttributes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["SemanticInternalAttributes"].RETRY_DELAY, `${nextRetryDelay}ms`);
                        e.span.end();
                        await __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$runtime$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["runtime"].waitForDuration(nextRetryDelay);
                        continue; // Move to the next attempt
                    } else if (e.originalError.name === "TypeError" && "cause" in e.originalError && e.originalError.cause instanceof Error) {
                        const nextRetryDelay = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$utils$2f$retries$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["calculateNextRetryDelay"])(resolveDefaults(init?.retry, "connectionError", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$utils$2f$retries$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["defaultFetchRetryOptions"].connectionError), attempt);
                        if (!nextRetryDelay) {
                            e.span.end();
                            throw e;
                        }
                        if (attempt >= MAX_ATTEMPTS) {
                            e.span.end();
                            throw e;
                        }
                        e.span.setAttribute(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$semanticInternalAttributes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["SemanticInternalAttributes"].RETRY_AT, new Date(Date.now() + nextRetryDelay).toISOString());
                        e.span.setAttribute(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$semanticInternalAttributes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["SemanticInternalAttributes"].RETRY_COUNT, attempt);
                        e.span.setAttribute(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$semanticInternalAttributes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["SemanticInternalAttributes"].RETRY_DELAY, `${nextRetryDelay}ms`);
                        e.span.end();
                        await __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$runtime$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["runtime"].waitForDuration(nextRetryDelay);
                        continue; // Move to the next attempt
                    }
                }
                if (e instanceof FetchErrorWithSpan) {
                    e.span.end();
                }
                throw e;
            } finally{
                attempt++;
            }
        }
    }, {
        attributes: {
            [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$semanticInternalAttributes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["SemanticInternalAttributes"].STYLE_ICON]: "arrow-capsule",
            ...createFetchAttributes(input, init),
            ...createFetchRetryOptionsAttributes(init?.retry)
        }
    });
}
const doFetchRequest = async (input, init, attemptCount = 0)=>{
    const httpMethod = normalizeHttpMethod(input, init);
    const span = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$sdk$2f$dist$2f$esm$2f$v3$2f$tracer$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["tracer"].startSpan(`HTTP ${httpMethod}`, {
        attributes: {
            [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$semanticInternalAttributes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["SemanticInternalAttributes"].STYLE_ICON]: "world",
            ...attemptCount > 1 ? {
                ["http.request.resend_count"]: attemptCount - 1
            } : {},
            ...createFetchAttributes(input, init)
        }
    });
    try {
        const response = await fetch(input, {
            ...init,
            headers: {
                ...init?.headers,
                "x-retry-count": attemptCount.toString()
            }
        });
        span.setAttributes(createFetchResponseAttributes(response));
        if (!response.ok) {
            span.recordException(`${response.status}: ${response.statusText}`);
            span.setStatus({
                code: __TURBOPACK__imported__module__$5b$externals$5d2f40$opentelemetry$2f$api__$5b$external$5d$__$2840$opentelemetry$2f$api$2c$__cjs$29$__["SpanStatusCode"].ERROR,
                message: `${response.status}: ${response.statusText}`
            });
        }
        return [
            response,
            span
        ];
    } catch (e) {
        if (typeof e === "string" || e instanceof Error) {
            span.recordException(e);
        }
        span.setStatus({
            code: __TURBOPACK__imported__module__$5b$externals$5d2f40$opentelemetry$2f$api__$5b$external$5d$__$2840$opentelemetry$2f$api$2c$__cjs$29$__["SpanStatusCode"].ERROR
        });
        span.setAttribute(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$semantic$2d$conventions$2f$build$2f$esm$2f$trace$2f$SemanticAttributes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["SEMATTRS_HTTP_STATUS_CODE"], 0);
        span.setAttribute("http.status_text", "This operation was aborted.");
        throw new FetchErrorWithSpan(e, span);
    }
};
const calculateRetryDelayForResponse = async (retry, response, attemptCount)=>{
    if (!retry) {
        return;
    }
    const strategy = await getRetryStrategyForResponse(response, retry);
    if (!strategy) {
        return;
    }
    switch(strategy.strategy){
        case "backoff":
            {
                const value = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$utils$2f$retries$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["calculateNextRetryDelay"])({
                    ...__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$utils$2f$retries$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["defaultRetryOptions"],
                    ...strategy
                }, attemptCount);
                if (value) {
                    return {
                        type: "delay",
                        value
                    };
                }
                break;
            }
        case "headers":
            {
                const resetAt = response.headers.get(strategy.resetHeader);
                if (typeof resetAt === "string") {
                    const resetTimestamp = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$utils$2f$retries$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["calculateResetAt"])(resetAt, strategy.resetFormat ?? "unix_timestamp_in_ms");
                    if (resetTimestamp) {
                        return {
                            type: "timestamp",
                            value: resetTimestamp
                        };
                    }
                }
                break;
            }
    }
    return;
};
const getRetryStrategyForResponse = async (response, retry)=>{
    const statusCodes = Object.keys(retry);
    const clonedResponse = response.clone();
    for(let i = 0; i < statusCodes.length; i++){
        const statusRange = statusCodes[i];
        if (!statusRange) {
            continue;
        }
        const strategy = retry[statusRange];
        if (!strategy) {
            continue;
        }
        if (isStatusCodeInRange(response.status, statusRange)) {
            if (strategy.bodyFilter) {
                const body = safeJsonParse(await clonedResponse.text());
                if (!body) {
                    continue;
                }
                if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$eventFilterMatches$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["eventFilterMatches"])(body, strategy.bodyFilter)) {
                    return strategy;
                } else {
                    continue;
                }
            }
            return strategy;
        }
    }
    return;
};
/**
 * Checks if a given status code falls within a given range.
 * The range can be a single status code (e.g. "200"),
 * a range of status codes (e.g. "500-599"),
 * a range of status codes with a wildcard (e.g. "4xx" for any 4xx status code),
 * or a list of status codes separated by commas (e.g. "401,403,404,409-412,5xx").
 * Returns `true` if the status code falls within the range, and `false` otherwise.
 */ const isStatusCodeInRange = (statusCode, statusRange)=>{
    if (statusRange === "all") {
        return true;
    }
    if (statusRange.includes(",")) {
        const statusCodes = statusRange.split(",").map((s)=>s.trim());
        return statusCodes.some((s)=>isStatusCodeInRange(statusCode, s));
    }
    const [start, end] = statusRange.split("-");
    if (end) {
        return statusCode >= parseInt(start ?? "0", 10) && statusCode <= parseInt(end, 10);
    }
    if (start?.endsWith("xx")) {
        const prefix = start.slice(0, -2);
        const statusCodePrefix = Math.floor(statusCode / 100).toString();
        return statusCodePrefix === prefix;
    }
    if (!start) {
        return false;
    }
    const statusCodeString = statusCode.toString();
    const rangePrefix = start.slice(0, -1);
    if (start.endsWith("x") && statusCodeString.startsWith(rangePrefix)) {
        return true;
    }
    return statusCode === parseInt(start, 10);
};
const createAttributesFromHeaders = (headers)=>{
    const attributes = {};
    const normalizedHeaderKey = (key)=>{
        return key.toLowerCase();
    };
    headers.forEach((value, key)=>{
        attributes[`http.response.header.${normalizedHeaderKey(key)}`] = value;
    });
    return attributes;
};
const safeJsonParse = (json)=>{
    try {
        return JSON.parse(json);
    } catch (e) {
        return null;
    }
};
// This function will resolve the defaults of a property within an options object.
// If the options object is undefined, it will return the defaults for that property (passed in as the 3rd arg).
// if the options object is defined, and the property exists, then it will return the defaults if the value of the property is undefined or null
const resolveDefaults = (obj, key, defaults)=>{
    if (!obj) {
        return defaults;
    }
    if (obj[key] === undefined || obj[key] === null) {
        return defaults;
    }
    return obj[key];
};
const createFetchAttributes = (input, init)=>{
    const url = normalizeUrlFromInput(input);
    const httpMethod = normalizeHttpMethod(input, init);
    return {
        [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$semantic$2d$conventions$2f$build$2f$esm$2f$trace$2f$SemanticAttributes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["SEMATTRS_HTTP_METHOD"]]: httpMethod,
        [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$semantic$2d$conventions$2f$build$2f$esm$2f$trace$2f$SemanticAttributes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["SEMATTRS_HTTP_URL"]]: url.href,
        [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$semantic$2d$conventions$2f$build$2f$esm$2f$trace$2f$SemanticAttributes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["SEMATTRS_HTTP_HOST"]]: url.hostname,
        ["server.host"]: url.hostname,
        ["server.port"]: url.port,
        [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$semantic$2d$conventions$2f$build$2f$esm$2f$trace$2f$SemanticAttributes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["SEMATTRS_HTTP_SCHEME"]]: url.protocol.replace(":", ""),
        ...(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$utils$2f$styleAttributes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["accessoryAttributes"])({
            items: [
                {
                    text: url.hostname,
                    variant: "normal"
                }
            ],
            style: "codepath"
        })
    };
};
const createFetchResponseAttributes = (response)=>{
    return {
        [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$semantic$2d$conventions$2f$build$2f$esm$2f$trace$2f$SemanticAttributes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["SEMATTRS_HTTP_STATUS_CODE"]]: response.status,
        "http.status_text": response.statusText,
        [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$opentelemetry$2f$semantic$2d$conventions$2f$build$2f$esm$2f$trace$2f$SemanticAttributes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["SEMATTRS_HTTP_RESPONSE_CONTENT_LENGTH"]]: response.headers.get("content-length") || "0",
        ...createAttributesFromHeaders(response.headers)
    };
};
const createFetchRetryOptionsAttributes = (retry)=>{
    const byStatus = resolveDefaults(retry, "byStatus", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$utils$2f$retries$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["defaultFetchRetryOptions"].byStatus);
    const connectionError = resolveDefaults(retry, "connectionError", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$utils$2f$retries$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["defaultFetchRetryOptions"].connectionError);
    const timeout = resolveDefaults(retry, "timeout", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$utils$2f$retries$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["defaultFetchRetryOptions"].timeout);
    return {
        ...(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$utils$2f$flattenAttributes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["flattenAttributes"])(byStatus, "retry.byStatus"),
        ...(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$utils$2f$flattenAttributes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["flattenAttributes"])(connectionError, "retry.connectionError"),
        ...(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$utils$2f$flattenAttributes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["flattenAttributes"])(timeout, "retry.timeout")
    };
};
const retry = {
    onThrow,
    fetch: retryFetch
}; //# sourceMappingURL=retry.js.map
}}),
"[project]/node_modules/@trigger.dev/sdk/dist/esm/v3/runs.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "runs": (()=>runs)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/core/dist/esm/v3/index.js [app-rsc] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$utils$2f$ioSerialization$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/core/dist/esm/v3/utils/ioSerialization.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$sdk$2f$dist$2f$esm$2f$v3$2f$tracer$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/sdk/dist/esm/v3/tracer.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$apiClientManager$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/core/dist/esm/v3/apiClientManager-api.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$apiClient$2f$core$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/core/dist/esm/v3/apiClient/core.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$apiClient$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/core/dist/esm/v3/apiClient/index.js [app-rsc] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$utils$2f$flattenAttributes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/core/dist/esm/v3/utils/flattenAttributes.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$utils$2f$styleAttributes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/core/dist/esm/v3/utils/styleAttributes.js [app-rsc] (ecmascript)");
;
;
;
const runs = {
    replay: replayRun,
    cancel: cancelRun,
    retrieve: retrieveRun,
    list: listRuns,
    reschedule: rescheduleRun,
    poll,
    subscribeToRun,
    subscribeToRunsWithTag,
    subscribeToBatch: subscribeToRunsInBatch,
    fetchStream
};
function listRuns(paramsOrProjectRef, paramsOrOptions, requestOptions) {
    const apiClient = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$apiClientManager$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["apiClientManager"].clientOrThrow();
    const $requestOptions = listRunsRequestOptions(paramsOrProjectRef, paramsOrOptions, requestOptions);
    if (typeof paramsOrProjectRef === "string") {
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$apiClient$2f$core$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["isRequestOptions"])(paramsOrOptions)) {
            return apiClient.listProjectRuns(paramsOrProjectRef, {}, $requestOptions);
        } else {
            return apiClient.listProjectRuns(paramsOrProjectRef, paramsOrOptions, $requestOptions);
        }
    }
    return apiClient.listRuns(paramsOrProjectRef, $requestOptions);
}
function listRunsRequestOptions(paramsOrProjectRef, paramsOrOptions, requestOptions) {
    if (typeof paramsOrProjectRef === "string") {
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$apiClient$2f$core$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["isRequestOptions"])(paramsOrOptions)) {
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$apiClient$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["mergeRequestOptions"])({
                tracer: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$sdk$2f$dist$2f$esm$2f$v3$2f$tracer$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["tracer"],
                name: "runs.list()",
                icon: "runs",
                attributes: {
                    projectRef: paramsOrProjectRef,
                    ...(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$utils$2f$styleAttributes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["accessoryAttributes"])({
                        items: [
                            {
                                text: paramsOrProjectRef,
                                variant: "normal"
                            }
                        ],
                        style: "codepath"
                    })
                }
            }, paramsOrOptions);
        } else {
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$apiClient$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["mergeRequestOptions"])({
                tracer: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$sdk$2f$dist$2f$esm$2f$v3$2f$tracer$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["tracer"],
                name: "runs.list()",
                icon: "runs",
                attributes: {
                    projectRef: paramsOrProjectRef,
                    ...(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$utils$2f$flattenAttributes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["flattenAttributes"])(paramsOrOptions, "queryParams"),
                    ...(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$utils$2f$styleAttributes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["accessoryAttributes"])({
                        items: [
                            {
                                text: paramsOrProjectRef,
                                variant: "normal"
                            }
                        ],
                        style: "codepath"
                    })
                }
            }, requestOptions);
        }
    }
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$apiClient$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["mergeRequestOptions"])({
        tracer: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$sdk$2f$dist$2f$esm$2f$v3$2f$tracer$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["tracer"],
        name: "runs.list()",
        icon: "runs",
        attributes: {
            ...(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$utils$2f$flattenAttributes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["flattenAttributes"])(paramsOrProjectRef, "queryParams")
        }
    }, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$apiClient$2f$core$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["isRequestOptions"])(paramsOrOptions) ? paramsOrOptions : requestOptions);
}
function retrieveRun(runId, requestOptions) {
    const apiClient = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$apiClientManager$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["apiClientManager"].clientOrThrow();
    const $requestOptions = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$apiClient$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["mergeRequestOptions"])({
        tracer: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$sdk$2f$dist$2f$esm$2f$v3$2f$tracer$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["tracer"],
        name: "runs.retrieve()",
        icon: "runs",
        attributes: {
            runId: typeof runId === "string" ? runId : runId.id,
            ...(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$utils$2f$styleAttributes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["accessoryAttributes"])({
                items: [
                    {
                        text: typeof runId === "string" ? runId : runId.id,
                        variant: "normal"
                    }
                ],
                style: "codepath"
            })
        },
        prepareData: resolvePayloadAndOutputUrls
    }, requestOptions);
    const $runId = typeof runId === "string" ? runId : runId.id;
    return apiClient.retrieveRun($runId, $requestOptions);
}
async function resolvePayloadAndOutputUrls(run) {
    const resolvedRun = {
        ...run
    };
    if (run.payloadPresignedUrl && run.outputPresignedUrl) {
        const [payload, output] = await Promise.all([
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$utils$2f$ioSerialization$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["resolvePresignedPacketUrl"])(run.payloadPresignedUrl, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$sdk$2f$dist$2f$esm$2f$v3$2f$tracer$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["tracer"]),
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$utils$2f$ioSerialization$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["resolvePresignedPacketUrl"])(run.outputPresignedUrl, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$sdk$2f$dist$2f$esm$2f$v3$2f$tracer$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["tracer"])
        ]);
        resolvedRun.payload = payload;
        resolvedRun.output = output;
    } else if (run.payloadPresignedUrl) {
        resolvedRun.payload = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$utils$2f$ioSerialization$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["resolvePresignedPacketUrl"])(run.payloadPresignedUrl, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$sdk$2f$dist$2f$esm$2f$v3$2f$tracer$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["tracer"]);
    } else if (run.outputPresignedUrl) {
        resolvedRun.output = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$utils$2f$ioSerialization$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["resolvePresignedPacketUrl"])(run.outputPresignedUrl, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$sdk$2f$dist$2f$esm$2f$v3$2f$tracer$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["tracer"]);
    }
    return resolvedRun;
}
function replayRun(runId, requestOptions) {
    const apiClient = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$apiClientManager$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["apiClientManager"].clientOrThrow();
    const $requestOptions = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$apiClient$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["mergeRequestOptions"])({
        tracer: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$sdk$2f$dist$2f$esm$2f$v3$2f$tracer$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["tracer"],
        name: "runs.replay()",
        icon: "runs",
        attributes: {
            runId,
            ...(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$utils$2f$styleAttributes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["accessoryAttributes"])({
                items: [
                    {
                        text: runId,
                        variant: "normal"
                    }
                ],
                style: "codepath"
            })
        }
    }, requestOptions);
    return apiClient.replayRun(runId, $requestOptions);
}
function cancelRun(runId, requestOptions) {
    const apiClient = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$apiClientManager$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["apiClientManager"].clientOrThrow();
    const $requestOptions = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$apiClient$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["mergeRequestOptions"])({
        tracer: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$sdk$2f$dist$2f$esm$2f$v3$2f$tracer$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["tracer"],
        name: "runs.cancel()",
        icon: "runs",
        attributes: {
            runId,
            ...(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$utils$2f$styleAttributes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["accessoryAttributes"])({
                items: [
                    {
                        text: runId,
                        variant: "normal"
                    }
                ],
                style: "codepath"
            })
        }
    }, requestOptions);
    return apiClient.cancelRun(runId, $requestOptions);
}
function rescheduleRun(runId, body, requestOptions) {
    const apiClient = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$apiClientManager$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["apiClientManager"].clientOrThrow();
    const $requestOptions = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$apiClient$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["mergeRequestOptions"])({
        tracer: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$sdk$2f$dist$2f$esm$2f$v3$2f$tracer$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["tracer"],
        name: "runs.reschedule()",
        icon: "runs",
        attributes: {
            runId,
            ...(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$utils$2f$styleAttributes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["accessoryAttributes"])({
                items: [
                    {
                        text: runId,
                        variant: "normal"
                    }
                ],
                style: "codepath"
            })
        }
    }, requestOptions);
    return apiClient.rescheduleRun(runId, body, $requestOptions);
}
const MAX_POLL_ATTEMPTS = 500;
async function poll(runId, options, requestOptions) {
    let attempts = 0;
    while(attempts++ < MAX_POLL_ATTEMPTS){
        const run = await runs.retrieve(runId, requestOptions);
        if (run.isCompleted) {
            return run;
        }
        await new Promise((resolve)=>setTimeout(resolve, options?.pollIntervalMs ?? 1000));
    }
    throw new Error(`Run ${typeof runId === "string" ? runId : runId.id} did not complete after ${MAX_POLL_ATTEMPTS} attempts`);
}
/**
 * Subscribes to real-time updates for a specific run.
 *
 * This function allows you to receive real-time updates whenever a run changes, including:
 * - Status changes in the run lifecycle
 * - Tag additions or removals
 * - Metadata updates
 *
 * @template TRunId - The type parameter extending AnyRunHandle, AnyTask, or string
 * @param {RunId<TRunId>} runId - The ID of the run to subscribe to. Can be a string ID, RunHandle, or Task
 * @param {SubscribeToRunOptions} [options] - Optional configuration for the subscription
 * @param {boolean} [options.stopOnCompletion=true] - Whether to close the subscription when the run completes
 * @returns {RunSubscription<InferRunTypes<TRunId>>} An async iterator that yields updated run objects
 *
 * @example
 * ```ts
 * // Subscribe using a run handle
 * const handle = await tasks.trigger("my-task", { some: "data" });
 * for await (const run of runs.subscribeToRun(handle.id)) {
 *   console.log("Run updated:", run);
 * }
 *
 * // Subscribe with type safety
 * for await (const run of runs.subscribeToRun<typeof myTask>(runId)) {
 *   console.log("Payload:", run.payload.some);
 *   if (run.output) {
 *     console.log("Output:", run.output);
 *   }
 * }
 * ```
 */ function subscribeToRun(runId, options) {
    const $runId = typeof runId === "string" ? runId : runId.id;
    const apiClient = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$apiClientManager$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["apiClientManager"].clientOrThrow();
    return apiClient.subscribeToRun($runId, {
        closeOnComplete: typeof options?.stopOnCompletion === "boolean" ? options.stopOnCompletion : true
    });
}
/**
 * Subscribes to real-time updates for all runs that have specific tags.
 *
 * This function allows you to monitor multiple runs simultaneously by filtering on tags.
 * You'll receive updates whenever any run with the specified tag(s) changes.
 *
 * @template TTasks - The type parameter extending AnyTask for type-safe payload and output
 * @param {string | string[]} tag - A single tag or array of tags to filter runs
 * @returns {RunSubscription<InferRunTypes<TTasks>>} An async iterator that yields updated run objects
 *
 * @example
 * ```ts
 * // Subscribe to runs with a single tag
 * for await (const run of runs.subscribeToRunsWithTag("user:1234")) {
 *   console.log("Run updated:", run);
 * }
 *
 * // Subscribe with multiple tags and type safety
 * for await (const run of runs.subscribeToRunsWithTag<typeof myTask | typeof otherTask>(["tag1", "tag2"])) {
 *   switch (run.taskIdentifier) {
 *     case "my-task":
 *       console.log("MyTask output:", run.output.foo);
 *       break;
 *     case "other-task":
 *       console.log("OtherTask output:", run.output.bar);
 *       break;
 *   }
 * }
 * ```
 */ function subscribeToRunsWithTag(tag) {
    const apiClient = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$apiClientManager$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["apiClientManager"].clientOrThrow();
    return apiClient.subscribeToRunsWithTag(tag);
}
/**
 * Subscribes to real-time updates for all runs within a specific batch.
 *
 * Use this function when you've triggered multiple runs using `batchTrigger` and want
 * to monitor all runs in that batch. You'll receive updates whenever any run in the batch changes.
 *
 * @template TTasks - The type parameter extending AnyTask for type-safe payload and output
 * @param {string} batchId - The ID of the batch to subscribe to
 * @returns {RunSubscription<InferRunTypes<TTasks>>} An async iterator that yields updated run objects
 *
 * @example
 * ```ts
 * // Subscribe to all runs in a batch
 * for await (const run of runs.subscribeToRunsInBatch("batch-123")) {
 *   console.log("Batch run updated:", run);
 * }
 *
 * // Subscribe with type safety
 * for await (const run of runs.subscribeToRunsInBatch<typeof myTask>("batch-123")) {
 *   console.log("Run payload:", run.payload);
 *   if (run.output) {
 *     console.log("Run output:", run.output);
 *   }
 * }
 * ```
 *
 * @note The run objects received will include standard fields like id, status, payload, output,
 * createdAt, updatedAt, tags, and more. See the Run object documentation for full details.
 */ function subscribeToRunsInBatch(batchId) {
    const apiClient = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$apiClientManager$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["apiClientManager"].clientOrThrow();
    return apiClient.subscribeToBatch(batchId);
}
/**
 * Fetches a stream of data from a run's stream key.
 */ async function fetchStream(runId, streamKey) {
    const apiClient = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$apiClientManager$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["apiClientManager"].clientOrThrow();
    return await apiClient.fetchStream(runId, streamKey);
} //# sourceMappingURL=runs.js.map
}}),
"[project]/node_modules/@trigger.dev/sdk/dist/esm/v3/shared.js [app-rsc] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "batchTrigger": (()=>batchTrigger),
    "batchTriggerAndWait": (()=>batchTriggerAndWait),
    "batchTriggerAndWaitTasks": (()=>batchTriggerAndWaitTasks),
    "batchTriggerById": (()=>batchTriggerById),
    "batchTriggerByIdAndWait": (()=>batchTriggerByIdAndWait),
    "batchTriggerTasks": (()=>batchTriggerTasks),
    "createSchemaTask": (()=>createSchemaTask),
    "createTask": (()=>createTask),
    "createToolTask": (()=>createToolTask),
    "queue": (()=>queue),
    "trigger": (()=>trigger),
    "triggerAndPoll": (()=>triggerAndPoll),
    "triggerAndWait": (()=>triggerAndWait)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$task$2d$catalog$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/core/dist/esm/v3/task-catalog-api.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$types$2f$tasks$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/core/dist/esm/v3/types/tasks.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$utils$2f$retries$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/core/dist/esm/v3/utils/retries.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$types$2f$tools$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/core/dist/esm/v3/types/tools.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$types$2f$schemas$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/core/dist/esm/v3/types/schemas.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$sdk$2f$dist$2f$esm$2f$v3$2f$runs$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/sdk/dist/esm/v3/runs.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$apiClientManager$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/core/dist/esm/v3/apiClientManager-api.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$utils$2f$ioSerialization$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/core/dist/esm/v3/utils/ioSerialization.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$task$2d$context$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/core/dist/esm/v3/task-context-api.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$idempotencyKeys$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/core/dist/esm/v3/idempotencyKeys.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$sdk$2f$dist$2f$esm$2f$v3$2f$tracer$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/sdk/dist/esm/v3/tracer.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$externals$5d2f40$opentelemetry$2f$api__$5b$external$5d$__$2840$opentelemetry$2f$api$2c$__cjs$29$__ = __turbopack_import__("[externals]/@opentelemetry/api [external] (@opentelemetry/api, cjs)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$semanticInternalAttributes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/core/dist/esm/v3/semanticInternalAttributes.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$runtime$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/core/dist/esm/v3/runtime-api.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$utils$2f$styleAttributes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/core/dist/esm/v3/utils/styleAttributes.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$errors$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/core/dist/esm/v3/errors.js [app-rsc] (ecmascript)");
;
;
;
;
;
function queue(options) {
    return options;
}
function createTask(params) {
    const customQueue = params.queue ? queue({
        name: params.queue?.name ?? `task/${params.id}`,
        ...params.queue
    }) : undefined;
    const task = {
        id: params.id,
        description: params.description,
        trigger: async (payload, options)=>{
            const taskMetadata = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$task$2d$catalog$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["taskCatalog"].getTaskManifest(params.id);
            return await trigger_internal(taskMetadata && taskMetadata.exportName ? `${taskMetadata.exportName}.trigger()` : `trigger()`, params.id, payload, undefined, {
                queue: customQueue,
                ...options
            });
        },
        batchTrigger: async (items, options)=>{
            const taskMetadata = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$task$2d$catalog$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["taskCatalog"].getTaskManifest(params.id);
            return await batchTrigger_internal(taskMetadata && taskMetadata.exportName ? `${taskMetadata.exportName}.batchTrigger()` : `batchTrigger()`, params.id, items, options, undefined, undefined, customQueue);
        },
        triggerAndWait: (payload, options)=>{
            const taskMetadata = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$task$2d$catalog$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["taskCatalog"].getTaskManifest(params.id);
            return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$types$2f$tasks$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["TaskRunPromise"]((resolve, reject)=>{
                triggerAndWait_internal(taskMetadata && taskMetadata.exportName ? `${taskMetadata.exportName}.triggerAndWait()` : `triggerAndWait()`, params.id, payload, undefined, {
                    queue: customQueue,
                    ...options
                }).then((result)=>{
                    resolve(result);
                }).catch((error)=>{
                    reject(error);
                });
            }, params.id);
        },
        batchTriggerAndWait: async (items, options)=>{
            const taskMetadata = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$task$2d$catalog$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["taskCatalog"].getTaskManifest(params.id);
            return await batchTriggerAndWait_internal(taskMetadata && taskMetadata.exportName ? `${taskMetadata.exportName}.batchTriggerAndWait()` : `batchTriggerAndWait()`, params.id, items, undefined, options, undefined, customQueue);
        }
    };
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$task$2d$catalog$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["taskCatalog"].registerTaskMetadata({
        id: params.id,
        description: params.description,
        queue: params.queue,
        retry: params.retry ? {
            ...__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$utils$2f$retries$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["defaultRetryOptions"],
            ...params.retry
        } : undefined,
        machine: typeof params.machine === "string" ? {
            preset: params.machine
        } : params.machine,
        maxDuration: params.maxDuration,
        fns: {
            run: params.run,
            init: params.init,
            cleanup: params.cleanup,
            middleware: params.middleware,
            handleError: params.handleError,
            onSuccess: params.onSuccess,
            onFailure: params.onFailure,
            onStart: params.onStart
        }
    });
    // @ts-expect-error
    task[Symbol.for("trigger.dev/task")] = true;
    return task;
}
function createToolTask(params) {
    const task = createSchemaTask({
        ...params,
        schema: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$types$2f$tools$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["convertToolParametersToSchema"])(params.parameters)
    });
    return {
        ...task,
        tool: {
            parameters: params.parameters,
            description: params.description,
            execute: async (args)=>{
                return task.triggerAndWait(args).unwrap();
            }
        }
    };
}
function createSchemaTask(params) {
    const customQueue = params.queue ? queue({
        name: params.queue?.name ?? `task/${params.id}`,
        ...params.queue
    }) : undefined;
    const parsePayload = params.schema ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$types$2f$schemas$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["getSchemaParseFn"])(params.schema) : undefined;
    const task = {
        id: params.id,
        description: params.description,
        schema: params.schema,
        trigger: async (payload, options, requestOptions)=>{
            const taskMetadata = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$task$2d$catalog$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["taskCatalog"].getTaskManifest(params.id);
            return await trigger_internal(taskMetadata && taskMetadata.exportName ? `${taskMetadata.exportName}.trigger()` : `trigger()`, params.id, payload, parsePayload, {
                queue: customQueue,
                ...options
            }, requestOptions);
        },
        batchTrigger: async (items, options, requestOptions)=>{
            const taskMetadata = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$task$2d$catalog$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["taskCatalog"].getTaskManifest(params.id);
            return await batchTrigger_internal(taskMetadata && taskMetadata.exportName ? `${taskMetadata.exportName}.batchTrigger()` : `batchTrigger()`, params.id, items, options, parsePayload, requestOptions, customQueue);
        },
        triggerAndWait: (payload, options)=>{
            const taskMetadata = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$task$2d$catalog$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["taskCatalog"].getTaskManifest(params.id);
            return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$types$2f$tasks$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["TaskRunPromise"]((resolve, reject)=>{
                triggerAndWait_internal(taskMetadata && taskMetadata.exportName ? `${taskMetadata.exportName}.triggerAndWait()` : `triggerAndWait()`, params.id, payload, parsePayload, {
                    queue: customQueue,
                    ...options
                }).then((result)=>{
                    resolve(result);
                }).catch((error)=>{
                    reject(error);
                });
            }, params.id);
        },
        batchTriggerAndWait: async (items, options)=>{
            const taskMetadata = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$task$2d$catalog$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["taskCatalog"].getTaskManifest(params.id);
            return await batchTriggerAndWait_internal(taskMetadata && taskMetadata.exportName ? `${taskMetadata.exportName}.batchTriggerAndWait()` : `batchTriggerAndWait()`, params.id, items, parsePayload, options, undefined, customQueue);
        }
    };
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$task$2d$catalog$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["taskCatalog"].registerTaskMetadata({
        id: params.id,
        description: params.description,
        queue: params.queue,
        retry: params.retry ? {
            ...__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$utils$2f$retries$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["defaultRetryOptions"],
            ...params.retry
        } : undefined,
        machine: typeof params.machine === "string" ? {
            preset: params.machine
        } : params.machine,
        maxDuration: params.maxDuration,
        fns: {
            run: params.run,
            init: params.init,
            cleanup: params.cleanup,
            middleware: params.middleware,
            handleError: params.handleError,
            onSuccess: params.onSuccess,
            onFailure: params.onFailure,
            onStart: params.onStart,
            parsePayload
        }
    });
    // @ts-expect-error
    task[Symbol.for("trigger.dev/task")] = true;
    return task;
}
async function trigger(id, payload, options, requestOptions) {
    return await trigger_internal("tasks.trigger()", id, payload, undefined, options, requestOptions);
}
function triggerAndWait(id, payload, options, requestOptions) {
    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$types$2f$tasks$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["TaskRunPromise"]((resolve, reject)=>{
        triggerAndWait_internal("tasks.triggerAndWait()", id, payload, undefined, options, requestOptions).then((result)=>{
            resolve(result);
        }).catch((error)=>{
            reject(error);
        });
    }, id);
}
async function batchTriggerAndWait(id, items, options, requestOptions) {
    return await batchTriggerAndWait_internal("tasks.batchTriggerAndWait()", id, items, undefined, options, requestOptions);
}
async function triggerAndPoll(id, payload, options, requestOptions) {
    const handle = await trigger(id, payload, options, requestOptions);
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$sdk$2f$dist$2f$esm$2f$v3$2f$runs$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["runs"].poll(handle, options, requestOptions);
}
async function batchTrigger(id, items, options, requestOptions) {
    return await batchTrigger_internal("tasks.batchTrigger()", id, items, options, undefined, requestOptions);
}
async function batchTriggerById(items, options, requestOptions) {
    const apiClient = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$apiClientManager$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["apiClientManager"].clientOrThrow();
    const response = await apiClient.batchTriggerV2({
        items: await Promise.all(items.map(async (item)=>{
            const taskMetadata = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$task$2d$catalog$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["taskCatalog"].getTask(item.id);
            const parsedPayload = taskMetadata?.fns.parsePayload ? await taskMetadata?.fns.parsePayload(item.payload) : item.payload;
            const payloadPacket = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$utils$2f$ioSerialization$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["stringifyIO"])(parsedPayload);
            return {
                task: item.id,
                payload: payloadPacket.data,
                options: {
                    queue: item.options?.queue,
                    concurrencyKey: item.options?.concurrencyKey,
                    test: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$task$2d$context$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["taskContext"].ctx?.run.isTest,
                    payloadType: payloadPacket.dataType,
                    idempotencyKey: await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$idempotencyKeys$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["makeIdempotencyKey"])(item.options?.idempotencyKey),
                    idempotencyKeyTTL: item.options?.idempotencyKeyTTL,
                    delay: item.options?.delay,
                    ttl: item.options?.ttl,
                    tags: item.options?.tags,
                    maxAttempts: item.options?.maxAttempts,
                    parentAttempt: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$task$2d$context$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["taskContext"].ctx?.attempt.id,
                    metadata: item.options?.metadata,
                    maxDuration: item.options?.maxDuration,
                    machine: item.options?.machine
                }
            };
        }))
    }, {
        spanParentAsLink: true,
        idempotencyKey: await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$idempotencyKeys$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["makeIdempotencyKey"])(options?.idempotencyKey),
        idempotencyKeyTTL: options?.idempotencyKeyTTL,
        processingStrategy: options?.triggerSequentially ? "sequential" : undefined
    }, {
        name: "batch.trigger()",
        tracer: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$sdk$2f$dist$2f$esm$2f$v3$2f$tracer$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["tracer"],
        icon: "trigger",
        onResponseBody (body, span) {
            if (body && typeof body === "object" && !Array.isArray(body)) {
                if ("id" in body && typeof body.id === "string") {
                    span.setAttribute("batchId", body.id);
                }
                if ("runs" in body && Array.isArray(body.runs)) {
                    span.setAttribute("runCount", body.runs.length);
                }
                if ("isCached" in body && typeof body.isCached === "boolean") {
                    if (body.isCached) {
                        console.warn(`Result is a cached response because the request was idempotent.`);
                    }
                    span.setAttribute("isCached", body.isCached);
                }
                if ("idempotencyKey" in body && typeof body.idempotencyKey === "string") {
                    span.setAttribute("idempotencyKey", body.idempotencyKey);
                }
            }
        },
        ...requestOptions
    });
    const handle = {
        batchId: response.id,
        isCached: response.isCached,
        idempotencyKey: response.idempotencyKey,
        runs: response.runs,
        publicAccessToken: response.publicAccessToken
    };
    return handle;
}
async function batchTriggerByIdAndWait(items, options, requestOptions) {
    const ctx = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$task$2d$context$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["taskContext"].ctx;
    if (!ctx) {
        throw new Error("batchTriggerAndWait can only be used from inside a task.run()");
    }
    const apiClient = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$apiClientManager$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["apiClientManager"].clientOrThrow();
    return await __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$sdk$2f$dist$2f$esm$2f$v3$2f$tracer$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["tracer"].startActiveSpan("batch.triggerAndWait()", async (span)=>{
        const response = await apiClient.batchTriggerV2({
            items: await Promise.all(items.map(async (item)=>{
                const taskMetadata = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$task$2d$catalog$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["taskCatalog"].getTask(item.id);
                const parsedPayload = taskMetadata?.fns.parsePayload ? await taskMetadata?.fns.parsePayload(item.payload) : item.payload;
                const payloadPacket = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$utils$2f$ioSerialization$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["stringifyIO"])(parsedPayload);
                return {
                    task: item.id,
                    payload: payloadPacket.data,
                    options: {
                        lockToVersion: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$task$2d$context$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["taskContext"].worker?.version,
                        queue: item.options?.queue,
                        concurrencyKey: item.options?.concurrencyKey,
                        test: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$task$2d$context$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["taskContext"].ctx?.run.isTest,
                        payloadType: payloadPacket.dataType,
                        delay: item.options?.delay,
                        ttl: item.options?.ttl,
                        tags: item.options?.tags,
                        maxAttempts: item.options?.maxAttempts,
                        metadata: item.options?.metadata,
                        maxDuration: item.options?.maxDuration,
                        machine: item.options?.machine
                    }
                };
            })),
            dependentAttempt: ctx.attempt.id
        }, {
            processingStrategy: options?.triggerSequentially ? "sequential" : undefined
        }, requestOptions);
        span.setAttribute("batchId", response.id);
        span.setAttribute("runCount", response.runs.length);
        span.setAttribute("isCached", response.isCached);
        if (response.isCached) {
            console.warn(`Result is a cached response because the request was idempotent.`);
        }
        if (response.idempotencyKey) {
            span.setAttribute("idempotencyKey", response.idempotencyKey);
        }
        const result = await __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$runtime$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["runtime"].waitForBatch({
            id: response.id,
            runs: response.runs.map((run)=>run.id),
            ctx
        });
        const runs = await handleBatchTaskRunExecutionResultV2(result.items);
        return {
            id: result.id,
            runs
        };
    }, {
        kind: __TURBOPACK__imported__module__$5b$externals$5d2f40$opentelemetry$2f$api__$5b$external$5d$__$2840$opentelemetry$2f$api$2c$__cjs$29$__["SpanKind"].PRODUCER,
        attributes: {
            [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$semanticInternalAttributes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["SemanticInternalAttributes"].STYLE_ICON]: "trigger"
        }
    });
}
async function batchTriggerTasks(items, options, requestOptions) {
    const apiClient = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$apiClientManager$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["apiClientManager"].clientOrThrow();
    const response = await apiClient.batchTriggerV2({
        items: await Promise.all(items.map(async (item)=>{
            const taskMetadata = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$task$2d$catalog$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["taskCatalog"].getTask(item.task.id);
            const parsedPayload = taskMetadata?.fns.parsePayload ? await taskMetadata?.fns.parsePayload(item.payload) : item.payload;
            const payloadPacket = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$utils$2f$ioSerialization$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["stringifyIO"])(parsedPayload);
            return {
                task: item.task.id,
                payload: payloadPacket.data,
                options: {
                    queue: item.options?.queue,
                    concurrencyKey: item.options?.concurrencyKey,
                    test: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$task$2d$context$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["taskContext"].ctx?.run.isTest,
                    payloadType: payloadPacket.dataType,
                    idempotencyKey: await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$idempotencyKeys$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["makeIdempotencyKey"])(item.options?.idempotencyKey),
                    idempotencyKeyTTL: item.options?.idempotencyKeyTTL,
                    delay: item.options?.delay,
                    ttl: item.options?.ttl,
                    tags: item.options?.tags,
                    maxAttempts: item.options?.maxAttempts,
                    parentAttempt: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$task$2d$context$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["taskContext"].ctx?.attempt.id,
                    metadata: item.options?.metadata,
                    maxDuration: item.options?.maxDuration,
                    machine: item.options?.machine
                }
            };
        }))
    }, {
        spanParentAsLink: true,
        idempotencyKey: await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$idempotencyKeys$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["makeIdempotencyKey"])(options?.idempotencyKey),
        idempotencyKeyTTL: options?.idempotencyKeyTTL,
        processingStrategy: options?.triggerSequentially ? "sequential" : undefined
    }, {
        name: "batch.triggerByTask()",
        tracer: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$sdk$2f$dist$2f$esm$2f$v3$2f$tracer$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["tracer"],
        icon: "trigger",
        onResponseBody (body, span) {
            if (body && typeof body === "object" && !Array.isArray(body)) {
                if ("id" in body && typeof body.id === "string") {
                    span.setAttribute("batchId", body.id);
                }
                if ("runs" in body && Array.isArray(body.runs)) {
                    span.setAttribute("runCount", body.runs.length);
                }
                if ("isCached" in body && typeof body.isCached === "boolean") {
                    if (body.isCached) {
                        console.warn(`Result is a cached response because the request was idempotent.`);
                    }
                    span.setAttribute("isCached", body.isCached);
                }
                if ("idempotencyKey" in body && typeof body.idempotencyKey === "string") {
                    span.setAttribute("idempotencyKey", body.idempotencyKey);
                }
            }
        },
        ...requestOptions
    });
    const handle = {
        batchId: response.id,
        isCached: response.isCached,
        idempotencyKey: response.idempotencyKey,
        runs: response.runs,
        publicAccessToken: response.publicAccessToken
    };
    return handle;
}
async function batchTriggerAndWaitTasks(items, options, requestOptions) {
    const ctx = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$task$2d$context$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["taskContext"].ctx;
    if (!ctx) {
        throw new Error("batchTriggerAndWait can only be used from inside a task.run()");
    }
    const apiClient = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$apiClientManager$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["apiClientManager"].clientOrThrow();
    return await __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$sdk$2f$dist$2f$esm$2f$v3$2f$tracer$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["tracer"].startActiveSpan("batch.triggerByTaskAndWait()", async (span)=>{
        const response = await apiClient.batchTriggerV2({
            items: await Promise.all(items.map(async (item)=>{
                const taskMetadata = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$task$2d$catalog$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["taskCatalog"].getTask(item.task.id);
                const parsedPayload = taskMetadata?.fns.parsePayload ? await taskMetadata?.fns.parsePayload(item.payload) : item.payload;
                const payloadPacket = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$utils$2f$ioSerialization$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["stringifyIO"])(parsedPayload);
                return {
                    task: item.task.id,
                    payload: payloadPacket.data,
                    options: {
                        lockToVersion: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$task$2d$context$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["taskContext"].worker?.version,
                        queue: item.options?.queue,
                        concurrencyKey: item.options?.concurrencyKey,
                        test: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$task$2d$context$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["taskContext"].ctx?.run.isTest,
                        payloadType: payloadPacket.dataType,
                        delay: item.options?.delay,
                        ttl: item.options?.ttl,
                        tags: item.options?.tags,
                        maxAttempts: item.options?.maxAttempts,
                        metadata: item.options?.metadata,
                        maxDuration: item.options?.maxDuration,
                        machine: item.options?.machine
                    }
                };
            })),
            dependentAttempt: ctx.attempt.id
        }, {
            processingStrategy: options?.triggerSequentially ? "sequential" : undefined
        }, requestOptions);
        span.setAttribute("batchId", response.id);
        span.setAttribute("runCount", response.runs.length);
        span.setAttribute("isCached", response.isCached);
        if (response.isCached) {
            console.warn(`Result is a cached response because the request was idempotent.`);
        }
        if (response.idempotencyKey) {
            span.setAttribute("idempotencyKey", response.idempotencyKey);
        }
        const result = await __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$runtime$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["runtime"].waitForBatch({
            id: response.id,
            runs: response.runs.map((run)=>run.id),
            ctx
        });
        const runs = await handleBatchTaskRunExecutionResultV2(result.items);
        return {
            id: result.id,
            runs
        };
    }, {
        kind: __TURBOPACK__imported__module__$5b$externals$5d2f40$opentelemetry$2f$api__$5b$external$5d$__$2840$opentelemetry$2f$api$2c$__cjs$29$__["SpanKind"].PRODUCER,
        attributes: {
            [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$semanticInternalAttributes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["SemanticInternalAttributes"].STYLE_ICON]: "trigger"
        }
    });
}
async function trigger_internal(name, id, payload, parsePayload, options, requestOptions) {
    const apiClient = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$apiClientManager$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["apiClientManager"].clientOrThrow();
    const parsedPayload = parsePayload ? await parsePayload(payload) : payload;
    const payloadPacket = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$utils$2f$ioSerialization$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["stringifyIO"])(parsedPayload);
    const handle = await apiClient.triggerTask(id, {
        payload: payloadPacket.data,
        options: {
            queue: options?.queue,
            concurrencyKey: options?.concurrencyKey,
            test: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$task$2d$context$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["taskContext"].ctx?.run.isTest,
            payloadType: payloadPacket.dataType,
            idempotencyKey: await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$idempotencyKeys$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["makeIdempotencyKey"])(options?.idempotencyKey),
            idempotencyKeyTTL: options?.idempotencyKeyTTL,
            delay: options?.delay,
            ttl: options?.ttl,
            tags: options?.tags,
            maxAttempts: options?.maxAttempts,
            parentAttempt: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$task$2d$context$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["taskContext"].ctx?.attempt.id,
            metadata: options?.metadata,
            maxDuration: options?.maxDuration,
            machine: options?.machine
        }
    }, {
        spanParentAsLink: true
    }, {
        name,
        tracer: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$sdk$2f$dist$2f$esm$2f$v3$2f$tracer$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["tracer"],
        icon: "trigger",
        onResponseBody: (body, span)=>{
            if (body && typeof body === "object" && !Array.isArray(body)) {
                if ("id" in body && typeof body.id === "string") {
                    span.setAttribute("runId", body.id);
                }
            }
        },
        ...requestOptions
    });
    return handle;
}
async function batchTrigger_internal(name, taskIdentifier, items, options, parsePayload, requestOptions, queue) {
    const apiClient = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$apiClientManager$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["apiClientManager"].clientOrThrow();
    const response = await apiClient.batchTriggerV2({
        items: await Promise.all(items.map(async (item)=>{
            const parsedPayload = parsePayload ? await parsePayload(item.payload) : item.payload;
            const payloadPacket = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$utils$2f$ioSerialization$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["stringifyIO"])(parsedPayload);
            return {
                task: taskIdentifier,
                payload: payloadPacket.data,
                options: {
                    queue: item.options?.queue ?? queue,
                    concurrencyKey: item.options?.concurrencyKey,
                    test: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$task$2d$context$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["taskContext"].ctx?.run.isTest,
                    payloadType: payloadPacket.dataType,
                    idempotencyKey: await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$idempotencyKeys$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["makeIdempotencyKey"])(item.options?.idempotencyKey),
                    idempotencyKeyTTL: item.options?.idempotencyKeyTTL,
                    delay: item.options?.delay,
                    ttl: item.options?.ttl,
                    tags: item.options?.tags,
                    maxAttempts: item.options?.maxAttempts,
                    parentAttempt: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$task$2d$context$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["taskContext"].ctx?.attempt.id,
                    metadata: item.options?.metadata,
                    maxDuration: item.options?.maxDuration,
                    machine: item.options?.machine
                }
            };
        }))
    }, {
        spanParentAsLink: true,
        idempotencyKey: await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$idempotencyKeys$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["makeIdempotencyKey"])(options?.idempotencyKey),
        idempotencyKeyTTL: options?.idempotencyKeyTTL,
        processingStrategy: options?.triggerSequentially ? "sequential" : undefined
    }, {
        name,
        tracer: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$sdk$2f$dist$2f$esm$2f$v3$2f$tracer$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["tracer"],
        icon: "trigger",
        onResponseBody (body, span) {
            if (body && typeof body === "object" && !Array.isArray(body)) {
                if ("id" in body && typeof body.id === "string") {
                    span.setAttribute("batchId", body.id);
                }
                if ("runs" in body && Array.isArray(body.runs)) {
                    span.setAttribute("runCount", body.runs.length);
                }
                if ("isCached" in body && typeof body.isCached === "boolean") {
                    if (body.isCached) {
                        console.warn(`Result is a cached response because the request was idempotent.`);
                    }
                    span.setAttribute("isCached", body.isCached);
                }
                if ("idempotencyKey" in body && typeof body.idempotencyKey === "string") {
                    span.setAttribute("idempotencyKey", body.idempotencyKey);
                }
            }
        },
        ...requestOptions
    });
    const handle = {
        batchId: response.id,
        isCached: response.isCached,
        idempotencyKey: response.idempotencyKey,
        runs: response.runs,
        publicAccessToken: response.publicAccessToken
    };
    return handle;
}
async function triggerAndWait_internal(name, id, payload, parsePayload, options, requestOptions) {
    const ctx = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$task$2d$context$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["taskContext"].ctx;
    if (!ctx) {
        throw new Error("triggerAndWait can only be used from inside a task.run()");
    }
    const apiClient = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$apiClientManager$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["apiClientManager"].clientOrThrow();
    const parsedPayload = parsePayload ? await parsePayload(payload) : payload;
    const payloadPacket = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$utils$2f$ioSerialization$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["stringifyIO"])(parsedPayload);
    return await __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$sdk$2f$dist$2f$esm$2f$v3$2f$tracer$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["tracer"].startActiveSpan(name, async (span)=>{
        const response = await apiClient.triggerTask(id, {
            payload: payloadPacket.data,
            options: {
                dependentAttempt: ctx.attempt.id,
                lockToVersion: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$task$2d$context$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["taskContext"].worker?.version,
                queue: options?.queue,
                concurrencyKey: options?.concurrencyKey,
                test: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$task$2d$context$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["taskContext"].ctx?.run.isTest,
                payloadType: payloadPacket.dataType,
                delay: options?.delay,
                ttl: options?.ttl,
                tags: options?.tags,
                maxAttempts: options?.maxAttempts,
                metadata: options?.metadata,
                maxDuration: options?.maxDuration,
                machine: options?.machine
            }
        }, {}, requestOptions);
        span.setAttribute("runId", response.id);
        const result = await __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$runtime$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["runtime"].waitForTask({
            id: response.id,
            ctx
        });
        return await handleTaskRunExecutionResult(result, id);
    }, {
        kind: __TURBOPACK__imported__module__$5b$externals$5d2f40$opentelemetry$2f$api__$5b$external$5d$__$2840$opentelemetry$2f$api$2c$__cjs$29$__["SpanKind"].PRODUCER,
        attributes: {
            [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$semanticInternalAttributes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["SemanticInternalAttributes"].STYLE_ICON]: "trigger",
            ...(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$utils$2f$styleAttributes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["accessoryAttributes"])({
                items: [
                    {
                        text: id,
                        variant: "normal"
                    }
                ],
                style: "codepath"
            })
        }
    });
}
async function batchTriggerAndWait_internal(name, id, items, parsePayload, options, requestOptions, queue) {
    const ctx = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$task$2d$context$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["taskContext"].ctx;
    if (!ctx) {
        throw new Error("batchTriggerAndWait can only be used from inside a task.run()");
    }
    const apiClient = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$apiClientManager$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["apiClientManager"].clientOrThrow();
    return await __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$sdk$2f$dist$2f$esm$2f$v3$2f$tracer$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["tracer"].startActiveSpan(name, async (span)=>{
        const response = await apiClient.batchTriggerV2({
            items: await Promise.all(items.map(async (item)=>{
                const parsedPayload = parsePayload ? await parsePayload(item.payload) : item.payload;
                const payloadPacket = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$utils$2f$ioSerialization$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["stringifyIO"])(parsedPayload);
                return {
                    task: id,
                    payload: payloadPacket.data,
                    options: {
                        lockToVersion: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$task$2d$context$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["taskContext"].worker?.version,
                        queue: item.options?.queue ?? queue,
                        concurrencyKey: item.options?.concurrencyKey,
                        test: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$task$2d$context$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["taskContext"].ctx?.run.isTest,
                        payloadType: payloadPacket.dataType,
                        delay: item.options?.delay,
                        ttl: item.options?.ttl,
                        tags: item.options?.tags,
                        maxAttempts: item.options?.maxAttempts,
                        metadata: item.options?.metadata,
                        maxDuration: item.options?.maxDuration,
                        machine: item.options?.machine
                    }
                };
            })),
            dependentAttempt: ctx.attempt.id
        }, {
            processingStrategy: options?.triggerSequentially ? "sequential" : undefined
        }, requestOptions);
        span.setAttribute("batchId", response.id);
        span.setAttribute("runCount", response.runs.length);
        span.setAttribute("isCached", response.isCached);
        if (response.isCached) {
            console.warn(`Result is a cached response because the request was idempotent.`);
        }
        if (response.idempotencyKey) {
            span.setAttribute("idempotencyKey", response.idempotencyKey);
        }
        const result = await __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$runtime$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["runtime"].waitForBatch({
            id: response.id,
            runs: response.runs.map((run)=>run.id),
            ctx
        });
        const runs = await handleBatchTaskRunExecutionResult(result.items, id);
        return {
            id: result.id,
            runs
        };
    }, {
        kind: __TURBOPACK__imported__module__$5b$externals$5d2f40$opentelemetry$2f$api__$5b$external$5d$__$2840$opentelemetry$2f$api$2c$__cjs$29$__["SpanKind"].PRODUCER,
        attributes: {
            [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$semanticInternalAttributes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["SemanticInternalAttributes"].STYLE_ICON]: "trigger",
            ...(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$utils$2f$styleAttributes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["accessoryAttributes"])({
                items: [
                    {
                        text: id,
                        variant: "normal"
                    }
                ],
                style: "codepath"
            })
        }
    });
}
async function handleBatchTaskRunExecutionResult(items, taskIdentifier) {
    const someObjectStoreOutputs = items.some((item)=>item.ok && item.outputType === "application/store");
    if (!someObjectStoreOutputs) {
        const results = await Promise.all(items.map(async (item)=>{
            return await handleTaskRunExecutionResult(item, taskIdentifier);
        }));
        return results;
    }
    return await __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$sdk$2f$dist$2f$esm$2f$v3$2f$tracer$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["tracer"].startActiveSpan("store.downloadPayloads", async (span)=>{
        const results = await Promise.all(items.map(async (item)=>{
            return await handleTaskRunExecutionResult(item, taskIdentifier);
        }));
        return results;
    }, {
        kind: __TURBOPACK__imported__module__$5b$externals$5d2f40$opentelemetry$2f$api__$5b$external$5d$__$2840$opentelemetry$2f$api$2c$__cjs$29$__["SpanKind"].INTERNAL,
        [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$semanticInternalAttributes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["SemanticInternalAttributes"].STYLE_ICON]: "cloud-download"
    });
}
async function handleBatchTaskRunExecutionResultV2(items) {
    const someObjectStoreOutputs = items.some((item)=>item.ok && item.outputType === "application/store");
    if (!someObjectStoreOutputs) {
        const results = await Promise.all(items.map(async (item)=>{
            return await handleTaskRunExecutionResult(item, item.taskIdentifier ?? "unknown");
        }));
        return results;
    }
    return await __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$sdk$2f$dist$2f$esm$2f$v3$2f$tracer$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["tracer"].startActiveSpan("store.downloadPayloads", async (span)=>{
        const results = await Promise.all(items.map(async (item)=>{
            return await handleTaskRunExecutionResult(item, item.taskIdentifier ?? "unknown");
        }));
        return results;
    }, {
        kind: __TURBOPACK__imported__module__$5b$externals$5d2f40$opentelemetry$2f$api__$5b$external$5d$__$2840$opentelemetry$2f$api$2c$__cjs$29$__["SpanKind"].INTERNAL,
        [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$semanticInternalAttributes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["SemanticInternalAttributes"].STYLE_ICON]: "cloud-download"
    });
}
async function handleTaskRunExecutionResult(execution, taskIdentifier) {
    if (execution.ok) {
        const outputPacket = {
            data: execution.output,
            dataType: execution.outputType
        };
        const importedPacket = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$utils$2f$ioSerialization$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["conditionallyImportPacket"])(outputPacket, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$sdk$2f$dist$2f$esm$2f$v3$2f$tracer$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["tracer"]);
        return {
            ok: true,
            id: execution.id,
            taskIdentifier: execution.taskIdentifier ?? taskIdentifier,
            output: await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$utils$2f$ioSerialization$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["parsePacket"])(importedPacket)
        };
    } else {
        return {
            ok: false,
            id: execution.id,
            taskIdentifier: execution.taskIdentifier ?? taskIdentifier,
            error: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$errors$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["createErrorTaskError"])(execution.error)
        };
    }
} //# sourceMappingURL=shared.js.map
}}),
"[project]/node_modules/@trigger.dev/sdk/dist/esm/v3/shared.js [app-rsc] (ecmascript) <module evaluation>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, t: __turbopack_require_real__ } = __turbopack_context__;
{
__turbopack_esm__({});
var __TURBOPACK__imported__module__$5b$externals$5d2f40$opentelemetry$2f$api__$5b$external$5d$__$2840$opentelemetry$2f$api$2c$__cjs$29$__ = __turbopack_import__("[externals]/@opentelemetry/api [external] (@opentelemetry/api, cjs)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/core/dist/esm/v3/index.js [app-rsc] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$sdk$2f$dist$2f$esm$2f$v3$2f$runs$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/sdk/dist/esm/v3/runs.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$sdk$2f$dist$2f$esm$2f$v3$2f$tracer$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/sdk/dist/esm/v3/tracer.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$sdk$2f$dist$2f$esm$2f$v3$2f$shared$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/sdk/dist/esm/v3/shared.js [app-rsc] (ecmascript) <locals>");
}}),
"[project]/node_modules/@trigger.dev/sdk/dist/esm/v3/tasks.js [app-rsc] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "schemaTask": (()=>schemaTask),
    "task": (()=>task),
    "tasks": (()=>tasks),
    "toolTask": (()=>toolTask)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$sdk$2f$dist$2f$esm$2f$v3$2f$shared$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/sdk/dist/esm/v3/shared.js [app-rsc] (ecmascript) <locals>");
;
;
const task = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$sdk$2f$dist$2f$esm$2f$v3$2f$shared$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createTask"];
const schemaTask = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$sdk$2f$dist$2f$esm$2f$v3$2f$shared$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createSchemaTask"];
const toolTask = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$sdk$2f$dist$2f$esm$2f$v3$2f$shared$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createToolTask"];
const tasks = {
    trigger: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$sdk$2f$dist$2f$esm$2f$v3$2f$shared$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["trigger"],
    triggerAndPoll: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$sdk$2f$dist$2f$esm$2f$v3$2f$shared$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["triggerAndPoll"],
    batchTrigger: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$sdk$2f$dist$2f$esm$2f$v3$2f$shared$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["batchTrigger"],
    triggerAndWait: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$sdk$2f$dist$2f$esm$2f$v3$2f$shared$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["triggerAndWait"],
    batchTriggerAndWait: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$sdk$2f$dist$2f$esm$2f$v3$2f$shared$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["batchTriggerAndWait"]
}; //# sourceMappingURL=tasks.js.map
}}),
"[project]/node_modules/@trigger.dev/sdk/dist/esm/v3/tasks.js [app-rsc] (ecmascript) <module evaluation>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, t: __turbopack_require_real__ } = __turbopack_context__;
{
__turbopack_esm__({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$sdk$2f$dist$2f$esm$2f$v3$2f$shared$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/sdk/dist/esm/v3/shared.js [app-rsc] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$sdk$2f$dist$2f$esm$2f$v3$2f$tasks$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/sdk/dist/esm/v3/tasks.js [app-rsc] (ecmascript) <locals>");
}}),
"[project]/node_modules/@trigger.dev/sdk/dist/esm/v3/batch.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "batch": (()=>batch)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/core/dist/esm/v3/index.js [app-rsc] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$sdk$2f$dist$2f$esm$2f$v3$2f$shared$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/sdk/dist/esm/v3/shared.js [app-rsc] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$sdk$2f$dist$2f$esm$2f$v3$2f$tracer$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/sdk/dist/esm/v3/tracer.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$sdk$2f$dist$2f$esm$2f$v3$2f$shared$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/sdk/dist/esm/v3/shared.js [app-rsc] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$apiClientManager$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/core/dist/esm/v3/apiClientManager-api.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$apiClient$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/core/dist/esm/v3/apiClient/index.js [app-rsc] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$utils$2f$styleAttributes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/core/dist/esm/v3/utils/styleAttributes.js [app-rsc] (ecmascript)");
;
;
;
const batch = {
    trigger: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$sdk$2f$dist$2f$esm$2f$v3$2f$shared$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["batchTriggerById"],
    triggerAndWait: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$sdk$2f$dist$2f$esm$2f$v3$2f$shared$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["batchTriggerByIdAndWait"],
    triggerByTask: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$sdk$2f$dist$2f$esm$2f$v3$2f$shared$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["batchTriggerTasks"],
    triggerByTaskAndWait: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$sdk$2f$dist$2f$esm$2f$v3$2f$shared$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["batchTriggerAndWaitTasks"],
    retrieve: retrieveBatch
};
/**
 * Retrieves details about a specific batch by its ID.
 *
 * @param {string} batchId - The unique identifier of the batch to retrieve
 * @param {ApiRequestOptions} [requestOptions] - Optional API request configuration options
 * @returns {ApiPromise<RetrieveBatchResponse>} A promise that resolves with the batch details
 *
 * @example
 * // First trigger a batch
 * const response = await batch.trigger([
 *   { id: "simple-task", payload: { message: "Hello, World!" } }
 * ]);
 *
 * // Then retrieve the batch details
 * const batchDetails = await batch.retrieve(response.batchId);
 * console.log("batch", batchDetails);
 */ function retrieveBatch(batchId, requestOptions) {
    const apiClient = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$apiClientManager$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["apiClientManager"].clientOrThrow();
    const $requestOptions = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$apiClient$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["mergeRequestOptions"])({
        tracer: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$sdk$2f$dist$2f$esm$2f$v3$2f$tracer$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["tracer"],
        name: "batch.retrieve()",
        icon: "batch",
        attributes: {
            batchId: batchId,
            ...(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$utils$2f$styleAttributes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["accessoryAttributes"])({
                items: [
                    {
                        text: batchId,
                        variant: "normal"
                    }
                ],
                style: "codepath"
            })
        }
    }, requestOptions);
    return apiClient.retrieveBatch(batchId, $requestOptions);
} //# sourceMappingURL=batch.js.map
}}),
"[project]/node_modules/@trigger.dev/sdk/dist/esm/v3/wait.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "wait": (()=>wait)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/core/dist/esm/v3/index.js [app-rsc] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$sdk$2f$dist$2f$esm$2f$v3$2f$tracer$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/sdk/dist/esm/v3/tracer.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$semanticInternalAttributes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/core/dist/esm/v3/semanticInternalAttributes.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$utils$2f$styleAttributes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/core/dist/esm/v3/utils/styleAttributes.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$runtime$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/core/dist/esm/v3/runtime-api.js [app-rsc] (ecmascript)");
;
;
const wait = {
    for: async (options)=>{
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$sdk$2f$dist$2f$esm$2f$v3$2f$tracer$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["tracer"].startActiveSpan(`wait.for()`, async (span)=>{
            const start = Date.now();
            const durationInMs = calculateDurationInMs(options);
            await __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$runtime$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["runtime"].waitForDuration(durationInMs);
        }, {
            attributes: {
                [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$semanticInternalAttributes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["SemanticInternalAttributes"].STYLE_ICON]: "wait",
                ...(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$utils$2f$styleAttributes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["accessoryAttributes"])({
                    items: [
                        {
                            text: nameForWaitOptions(options),
                            variant: "normal"
                        }
                    ],
                    style: "codepath"
                })
            }
        });
    },
    until: async (options)=>{
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$sdk$2f$dist$2f$esm$2f$v3$2f$tracer$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["tracer"].startActiveSpan(`wait.until()`, async (span)=>{
            const start = Date.now();
            if (options.throwIfInThePast && options.date < new Date()) {
                throw new Error("Date is in the past");
            }
            const durationInMs = options.date.getTime() - start;
            await __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$runtime$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["runtime"].waitForDuration(durationInMs);
        }, {
            attributes: {
                [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$semanticInternalAttributes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["SemanticInternalAttributes"].STYLE_ICON]: "wait",
                ...(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$utils$2f$styleAttributes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["accessoryAttributes"])({
                    items: [
                        {
                            text: options.date.toISOString(),
                            variant: "normal"
                        }
                    ],
                    style: "codepath"
                })
            }
        });
    }
};
function nameForWaitOptions(options) {
    if ("seconds" in options) {
        return options.seconds === 1 ? `1 second` : `${options.seconds} seconds`;
    }
    if ("minutes" in options) {
        return options.minutes === 1 ? `1 minute` : `${options.minutes} minutes`;
    }
    if ("hours" in options) {
        return options.hours === 1 ? `1 hour` : `${options.hours} hours`;
    }
    if ("days" in options) {
        return options.days === 1 ? `1 day` : `${options.days} days`;
    }
    if ("weeks" in options) {
        return options.weeks === 1 ? `1 week` : `${options.weeks} weeks`;
    }
    if ("months" in options) {
        return options.months === 1 ? `1 month` : `${options.months} months`;
    }
    if ("years" in options) {
        return options.years === 1 ? `1 year` : `${options.years} years`;
    }
    return "NaN";
}
function calculateDurationInMs(options) {
    if ("seconds" in options) {
        return options.seconds * 1000;
    }
    if ("minutes" in options) {
        return options.minutes * 1000 * 60;
    }
    if ("hours" in options) {
        return options.hours * 1000 * 60 * 60;
    }
    if ("days" in options) {
        return options.days * 1000 * 60 * 60 * 24;
    }
    if ("weeks" in options) {
        return options.weeks * 1000 * 60 * 60 * 24 * 7;
    }
    if ("months" in options) {
        return options.months * 1000 * 60 * 60 * 24 * 30;
    }
    if ("years" in options) {
        return options.years * 1000 * 60 * 60 * 24 * 365;
    }
    throw new Error("Invalid options");
} //# sourceMappingURL=wait.js.map
}}),
"[project]/node_modules/@trigger.dev/sdk/dist/esm/v3/waitUntil.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "waitUntil": (()=>waitUntil)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/core/dist/esm/v3/index.js [app-rsc] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$wait$2d$until$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/core/dist/esm/v3/wait-until-api.js [app-rsc] (ecmascript)");
;
function waitUntil(promise) {
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$wait$2d$until$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["waitUntil"].register({
        promise,
        requiresResolving: ()=>true
    });
} //# sourceMappingURL=waitUntil.js.map
}}),
"[project]/node_modules/@trigger.dev/sdk/dist/esm/v3/usage.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "usage": (()=>usage)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/core/dist/esm/v3/index.js [app-rsc] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$usage$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/core/dist/esm/v3/usage-api.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$task$2d$context$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/core/dist/esm/v3/task-context-api.js [app-rsc] (ecmascript)");
;
const usage = {
    /**
     * Get the current running usage of this task run.
     *
     * @example
     *
     * ```typescript
     * import { usage, task } from "@trigger.dev/sdk/v3";
     *
     * export const myTask = task({
     *  id: "my-task",
     *  run: async (payload, { ctx }) => {
     *   // ... Do a bunch of work
     *
     *   const currentUsage = usage.getCurrent();
     *
     *   // You have access to the current compute cost and duration up to this point
     *   console.log("Current attempt compute cost and duration", {
     *     cost: currentUsage.compute.attempt.costInCents,
     *     duration: currentUsage.compute.attempt.durationMs,
     *   });
     *
     *   // You also can see the total compute cost and duration up to this point in the run, across all attempts
     *   console.log("Current total compute cost and duration", {
     *     cost: currentUsage.compute.total.costInCents,
     *     duration: currentUsage.compute.total.durationMs,
     *   });
     *
     *   // You can see the base cost of the run, which is the cost of the run before any compute costs
     *   console.log("Total cost", {
     *     cost: currentUsage.totalCostInCents,
     *     baseCost: currentUsage.baseCostInCents,
     *   });
     *  },
     * });
     * ```
     */ getCurrent: ()=>{
        const sample = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$usage$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["usage"].sample();
        const machine = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$task$2d$context$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["taskContext"].ctx?.machine;
        const run = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$task$2d$context$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["taskContext"].ctx?.run;
        if (!sample) {
            return {
                compute: {
                    attempt: {
                        costInCents: 0,
                        durationMs: 0
                    },
                    total: {
                        costInCents: run?.costInCents ?? 0,
                        durationMs: run?.durationMs ?? 0
                    }
                },
                baseCostInCents: run?.baseCostInCents ?? 0,
                totalCostInCents: (run?.costInCents ?? 0) + (run?.baseCostInCents ?? 0)
            };
        }
        const currentCostInCents = machine?.centsPerMs ? sample.cpuTime * machine.centsPerMs : 0;
        return {
            compute: {
                attempt: {
                    costInCents: currentCostInCents,
                    durationMs: sample.cpuTime
                },
                total: {
                    costInCents: (run?.costInCents ?? 0) + currentCostInCents,
                    durationMs: (run?.durationMs ?? 0) + sample.cpuTime
                }
            },
            baseCostInCents: run?.baseCostInCents ?? 0,
            totalCostInCents: (run?.costInCents ?? 0) + currentCostInCents + (run?.baseCostInCents ?? 0)
        };
    },
    /**
     * Measure the cost and duration of a function.
     *
     * @example
     *
     * ```typescript
     * import { usage } from "@trigger.dev/sdk/v3";
     *
     * export const myTask = task({
     *  id: "my-task",
     *  run: async (payload, { ctx }) => {
     *    const { result, compute } = await usage.measure(async () => {
     *      // Do some work
     *      return "result";
     *    });
     *
     *    console.log("Result", result);
     *    console.log("Cost and duration", { cost: compute.costInCents, duration: compute.durationMs });
     *  },
     * });
     * ```
     */ measure: async (cb)=>{
        const measurement = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$usage$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["usage"].start();
        const result = await cb();
        const sample = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$usage$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["usage"].stop(measurement);
        const machine = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$task$2d$context$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["taskContext"].ctx?.machine;
        const costInCents = machine?.centsPerMs ? sample.cpuTime * machine.centsPerMs : 0;
        return {
            result,
            compute: {
                costInCents,
                durationMs: sample.cpuTime
            }
        };
    }
}; //# sourceMappingURL=usage.js.map
}}),
"[project]/node_modules/@trigger.dev/sdk/dist/esm/v3/idempotencyKeys.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "idempotencyKeys": (()=>idempotencyKeys)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/core/dist/esm/v3/index.js [app-rsc] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$idempotencyKeys$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/core/dist/esm/v3/idempotencyKeys.js [app-rsc] (ecmascript)");
;
const idempotencyKeys = {
    create: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$idempotencyKeys$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["createIdempotencyKey"]
}; //# sourceMappingURL=idempotencyKeys.js.map
}}),
"[project]/node_modules/@trigger.dev/sdk/dist/esm/v3/tags.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "tags": (()=>tags)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/core/dist/esm/v3/index.js [app-rsc] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$sdk$2f$dist$2f$esm$2f$v3$2f$tracer$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/sdk/dist/esm/v3/tracer.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$apiClientManager$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/core/dist/esm/v3/apiClientManager-api.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$task$2d$context$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/core/dist/esm/v3/task-context-api.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$apiClient$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/core/dist/esm/v3/apiClient/index.js [app-rsc] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$utils$2f$styleAttributes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/core/dist/esm/v3/utils/styleAttributes.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$apiClient$2f$errors$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/core/dist/esm/v3/apiClient/errors.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$logger$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/core/dist/esm/v3/logger-api.js [app-rsc] (ecmascript)");
;
;
const tags = {
    add: addTags
};
async function addTags(tags, requestOptions) {
    const apiClient = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$apiClientManager$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["apiClientManager"].clientOrThrow();
    const run = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$task$2d$context$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["taskContext"].ctx?.run;
    if (!run) {
        throw new Error("Can't set tags outside of a run. You can trigger a task and set tags in the options.");
    }
    const $requestOptions = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$apiClient$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["mergeRequestOptions"])({
        tracer: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$sdk$2f$dist$2f$esm$2f$v3$2f$tracer$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["tracer"],
        name: "tags.set()",
        icon: "tag",
        attributes: {
            ...(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$utils$2f$styleAttributes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["accessoryAttributes"])({
                items: [
                    {
                        text: typeof tags === "string" ? tags : tags.join(", "),
                        variant: "normal"
                    }
                ],
                style: "codepath"
            })
        }
    }, requestOptions);
    try {
        await apiClient.addTags(run.id, {
            tags
        }, $requestOptions);
    } catch (error) {
        if (error instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$apiClient$2f$errors$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["UnprocessableEntityError"]) {
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$logger$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["logger"].error(error.message, {
                existingTags: run.tags,
                newTags: tags
            });
            return;
        }
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$logger$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["logger"].error("Failed to set tags", {
            error
        });
        throw error;
    }
} //# sourceMappingURL=tags.js.map
}}),
"[project]/node_modules/@trigger.dev/sdk/dist/esm/v3/metadata.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "metadata": (()=>metadata)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/core/dist/esm/v3/index.js [app-rsc] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$sdk$2f$dist$2f$esm$2f$v3$2f$tracer$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/sdk/dist/esm/v3/tracer.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$run$2d$metadata$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/core/dist/esm/v3/run-metadata-api.js [app-rsc] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$apiClient$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/core/dist/esm/v3/apiClient/index.js [app-rsc] (ecmascript) <locals>");
;
;
const parentMetadataUpdater = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$run$2d$metadata$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["runMetadata"].parent;
const rootMetadataUpdater = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$run$2d$metadata$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["runMetadata"].root;
/**
 * Provides access to run metadata operations.
 * @namespace
 * @property {Function} current - Get the current run's metadata.
 * @property {Function} get - Get a specific key from the current run's metadata.
 * @property {Function} set - Set a key in the current run's metadata.
 * @property {Function} del - Delete a key from the current run's metadata.
 * @property {Function} save - Update the entire metadata object for the current run.
 */ const metadataUpdater = {
    set: setMetadataKey,
    del: deleteMetadataKey,
    append: appendMetadataKey,
    remove: removeMetadataKey,
    increment: incrementMetadataKey,
    decrement: decrementMetadataKey,
    flush: flushMetadata
};
const metadata = {
    current: currentMetadata,
    get: getMetadataKey,
    save: saveMetadata,
    replace: replaceMetadata,
    stream: stream,
    fetchStream: fetchStream,
    parent: parentMetadataUpdater,
    root: rootMetadataUpdater,
    refresh: refreshMetadata,
    ...metadataUpdater
};
/**
 * Returns the metadata of the current run if inside a task run.
 * This function allows you to access the entire metadata object for the current run.
 *
 * @returns {RunMetadata | undefined} The current run's metadata or undefined if not in a run context.
 *
 * @example
 * const currentMetadata = metadata.current();
 * console.log(currentMetadata);
 */ function currentMetadata() {
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$run$2d$metadata$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["runMetadata"].current();
}
/**
 * Get a specific key from the metadata of the current run if inside a task run.
 *
 * @param {string} key - The key to retrieve from the metadata.
 * @returns {DeserializedJson | undefined} The value associated with the key, or undefined if not found or not in a run context.
 *
 * @example
 * const user = metadata.get("user");
 * console.log(user.name); // "Eric"
 * console.log(user.id); // "user_1234"
 */ function getMetadataKey(key) {
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$run$2d$metadata$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["runMetadata"].getKey(key);
}
/**
 * Set a key in the metadata of the current run if inside a task run.
 * This function allows you to update or add a new key-value pair to the run's metadata.
 *
 * @param {string} key - The key to set in the metadata.
 * @param {DeserializedJson} value - The value to associate with the key.
 *
 * @example
 * metadata.set("progress", 0.5);
 */ function setMetadataKey(key, value) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$run$2d$metadata$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["runMetadata"].set(key, value);
    return metadataUpdater;
}
/**
 * Delete a key from the metadata of the current run if inside a task run.
 *
 * @param {string} key - The key to delete from the metadata.
 *
 * @example
 * metadata.del("progress");
 */ function deleteMetadataKey(key) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$run$2d$metadata$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["runMetadata"].del(key);
    return metadataUpdater;
}
/**
 * Update the entire metadata object for the current run if inside a task run.
 * This function allows you to replace the entire metadata object with a new one.
 *
 * @param {RunMetadata} metadata - The new metadata object to set for the run.
 * @returns {void}
 *
 * @example
 * metadata.replace({ progress: 0.6, user: { name: "Alice", id: "user_5678" } });
 */ function replaceMetadata(metadata) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$run$2d$metadata$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["runMetadata"].update(metadata);
}
/**
 * @deprecated Use `metadata.replace()` instead.
 */ function saveMetadata(metadata) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$run$2d$metadata$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["runMetadata"].update(metadata);
}
/**
 * Increments a numeric value in the metadata of the current run by the specified amount.
 * This function allows you to atomically increment a numeric metadata value.
 *
 * @param {string} key - The key of the numeric value to increment.
 * @param {number} value - The amount to increment the value by.
 *
 * @example
 * metadata.increment("counter", 1); // Increments counter by 1
 * metadata.increment("score", 10); // Increments score by 10
 */ function incrementMetadataKey(key, value = 1) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$run$2d$metadata$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["runMetadata"].increment(key, value);
    return metadataUpdater;
}
/**
 * Decrements a numeric value in the metadata of the current run by the specified amount.
 * This function allows you to atomically decrement a numeric metadata value.
 *
 * @param {string} key - The key of the numeric value to decrement.
 * @param {number} value - The amount to decrement the value by.
 *
 * @example
 * metadata.decrement("counter", 1); // Decrements counter by 1
 * metadata.decrement("score", 5); // Decrements score by 5
 */ function decrementMetadataKey(key, value = 1) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$run$2d$metadata$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["runMetadata"].decrement(key, value);
    return metadataUpdater;
}
/**
 * Appends a value to an array in the metadata of the current run.
 * If the key doesn't exist, it creates a new array with the value.
 * If the key exists but isn't an array, it converts the existing value to an array.
 *
 * @param {string} key - The key of the array in metadata.
 * @param {DeserializedJson} value - The value to append to the array.
 *
 * @example
 * metadata.append("logs", "User logged in");
 * metadata.append("events", { type: "click", timestamp: Date.now() });
 */ function appendMetadataKey(key, value) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$run$2d$metadata$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["runMetadata"].append(key, value);
    return metadataUpdater;
}
/**
 * Removes a value from an array in the metadata of the current run.
 *
 * @param {string} key - The key of the array in metadata.
 * @param {DeserializedJson} value - The value to remove from the array.
 *
 * @example
 *
 * metadata.remove("logs", "User logged in");
 * metadata.remove("events", { type: "click", timestamp: Date.now() });
 */ function removeMetadataKey(key, value) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$run$2d$metadata$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["runMetadata"].remove(key, value);
    return metadataUpdater;
}
/**
 * Flushes metadata to the Trigger.dev instance
 *
 * @param {ApiRequestOptions} [requestOptions] - Optional request options to customize the API request.
 * @returns {Promise<void>} A promise that resolves when the metadata flush operation is complete.
 */ async function flushMetadata(requestOptions) {
    const $requestOptions = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$apiClient$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["mergeRequestOptions"])({
        tracer: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$sdk$2f$dist$2f$esm$2f$v3$2f$tracer$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["tracer"],
        name: "metadata.flush()",
        icon: "code-plus"
    }, requestOptions);
    await __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$run$2d$metadata$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["runMetadata"].flush($requestOptions);
}
/**
 * Refreshes metadata from the Trigger.dev instance
 *
 * @param {ApiRequestOptions} [requestOptions] - Optional request options to customize the API request.
 * @returns {Promise<void>} A promise that resolves when the metadata refresh operation is complete.
 */ async function refreshMetadata(requestOptions) {
    const $requestOptions = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$apiClient$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["mergeRequestOptions"])({
        tracer: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$sdk$2f$dist$2f$esm$2f$v3$2f$tracer$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["tracer"],
        name: "metadata.refresh()",
        icon: "code-plus"
    }, requestOptions);
    await __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$run$2d$metadata$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["runMetadata"].refresh($requestOptions);
}
async function stream(key, value, signal) {
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$run$2d$metadata$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["runMetadata"].stream(key, value, signal);
}
async function fetchStream(key, signal) {
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$run$2d$metadata$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["runMetadata"].fetchStream(key, signal);
} //# sourceMappingURL=metadata.js.map
}}),
"[project]/node_modules/@trigger.dev/sdk/dist/esm/v3/timeout.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "timeout": (()=>timeout)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/core/dist/esm/v3/index.js [app-rsc] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$timeout$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/core/dist/esm/v3/timeout-api.js [app-rsc] (ecmascript)");
;
const MAXIMUM_MAX_DURATION = 2_147_483_647;
const timeout = {
    None: MAXIMUM_MAX_DURATION,
    signal: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$timeout$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["timeout"].signal
}; //# sourceMappingURL=timeout.js.map
}}),
"[project]/node_modules/@trigger.dev/sdk/dist/esm/imports/uncrypto.js [app-rsc] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// @ts-ignore
__turbopack_esm__({});
;
;
 //# sourceMappingURL=uncrypto.js.map
}}),
"[project]/node_modules/@trigger.dev/sdk/dist/esm/imports/uncrypto.js [app-rsc] (ecmascript) <module evaluation>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, t: __turbopack_require_real__ } = __turbopack_context__;
{
__turbopack_esm__({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$sdk$2f$dist$2f$esm$2f$imports$2f$uncrypto$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/sdk/dist/esm/imports/uncrypto.js [app-rsc] (ecmascript) <locals>");
}}),
"[project]/node_modules/@trigger.dev/sdk/dist/esm/v3/webhooks.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "WebhookError": (()=>WebhookError),
    "webhooks": (()=>webhooks)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/core/dist/esm/v3/index.js [app-rsc] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$sdk$2f$dist$2f$esm$2f$imports$2f$uncrypto$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/sdk/dist/esm/imports/uncrypto.js [app-rsc] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$schemas$2f$webhooks$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/core/dist/esm/v3/schemas/webhooks.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uncrypto$2f$dist$2f$crypto$2e$node$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/uncrypto/dist/crypto.node.mjs [app-rsc] (ecmascript)");
;
;
class WebhookError extends Error {
    constructor(message){
        super(message);
        this.name = "WebhookError";
    }
}
/** Header name used for webhook signatures */ const SIGNATURE_HEADER_NAME = "x-trigger-signature-hmacsha256";
const webhooks = {
    constructEvent,
    SIGNATURE_HEADER_NAME
};
async function constructEvent(request, secret) {
    let payload;
    let signature;
    if (request instanceof Request) {
        if (!secret) {
            throw new WebhookError("Secret is required when passing a Request object");
        }
        const signatureHeader = request.headers.get(SIGNATURE_HEADER_NAME);
        if (!signatureHeader) {
            throw new WebhookError("No signature header found");
        }
        signature = signatureHeader;
        payload = await request.text();
    } else {
        payload = request.payload.toString();
        if (Array.isArray(request.header)) {
            throw new WebhookError("Signature header cannot be an array");
        }
        signature = request.header.toString();
    }
    // Verify the signature
    const isValid = await verifySignature(payload, signature, secret);
    if (!isValid) {
        throw new WebhookError("Invalid signature");
    }
    // Parse and validate the payload
    try {
        const jsonPayload = JSON.parse(payload);
        const parsedPayload = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$schemas$2f$webhooks$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["Webhook"].parse(jsonPayload);
        return parsedPayload;
    } catch (error) {
        if (error instanceof Error) {
            throw new WebhookError(`Webhook parsing failed: ${error.message}`);
        }
        throw new WebhookError("Webhook parsing failed");
    }
}
/**
 * Verifies the signature of a webhook payload
 * @param payload - Raw payload string to verify
 * @param signature - Expected signature to check against
 * @param secret - Secret key used to generate the signature
 * @returns Promise resolving to boolean indicating if signature is valid
 * @throws {WebhookError} If signature verification process fails
 *
 * @example
 * const isValid = await verifySignature(
 *   '{"event": "test"}',
 *   "abc123signature",
 *   "webhook_secret"
 * );
 */ async function verifySignature(payload, signature, secret) {
    try {
        if (!secret) {
            throw new WebhookError("Secret is required for signature verification");
        }
        // Convert the payload and secret to buffers
        const hashPayload = Buffer.from(payload, "utf-8");
        const hmacSecret = Buffer.from(secret, "utf-8");
        // Import the secret key
        const key = await __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uncrypto$2f$dist$2f$crypto$2e$node$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["subtle"].importKey("raw", hmacSecret, {
            name: "HMAC",
            hash: "SHA-256"
        }, false, [
            "sign",
            "verify"
        ]);
        // Calculate the expected signature
        const actualSignature = await __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uncrypto$2f$dist$2f$crypto$2e$node$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["subtle"].sign("HMAC", key, hashPayload);
        const actualSignatureHex = Buffer.from(actualSignature).toString("hex");
        // Compare signatures using timing-safe comparison
        return timingSafeEqual(signature, actualSignatureHex);
    } catch (error) {
        throw new WebhookError("Signature verification failed");
    }
}
// Timing-safe comparison to prevent timing attacks
function timingSafeEqual(a, b) {
    if (a.length !== b.length) {
        return false;
    }
    let result = 0;
    for(let i = 0; i < a.length; i++){
        result |= a.charCodeAt(i) ^ b.charCodeAt(i);
    }
    return result === 0;
} //# sourceMappingURL=webhooks.js.map
}}),
"[project]/node_modules/@trigger.dev/sdk/dist/esm/v3/schedules/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "activate": (()=>activate),
    "create": (()=>create),
    "deactivate": (()=>deactivate),
    "del": (()=>del),
    "list": (()=>list),
    "retrieve": (()=>retrieve),
    "task": (()=>task),
    "timezones": (()=>timezones),
    "update": (()=>update)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/core/dist/esm/v3/index.js [app-rsc] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$zodfetch$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/core/dist/esm/v3/zodfetch.js [app-rsc] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$sdk$2f$dist$2f$esm$2f$v3$2f$shared$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/sdk/dist/esm/v3/shared.js [app-rsc] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$sdk$2f$dist$2f$esm$2f$v3$2f$tracer$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/sdk/dist/esm/v3/tracer.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$sdk$2f$dist$2f$esm$2f$v3$2f$shared$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/sdk/dist/esm/v3/shared.js [app-rsc] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$task$2d$catalog$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/core/dist/esm/v3/task-catalog-api.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$apiClientManager$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/core/dist/esm/v3/apiClientManager-api.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$apiClient$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/core/dist/esm/v3/apiClient/index.js [app-rsc] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$utils$2f$styleAttributes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/core/dist/esm/v3/utils/styleAttributes.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$apiClient$2f$core$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/core/dist/esm/v3/apiClient/core.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$schemas$2f$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/core/dist/esm/v3/schemas/api.js [app-rsc] (ecmascript)");
;
;
;
;
function task(params) {
    const task = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$sdk$2f$dist$2f$esm$2f$v3$2f$shared$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createTask"])(params);
    const cron = params.cron ? typeof params.cron === "string" ? params.cron : params.cron.pattern : undefined;
    const timezone = (params.cron && typeof params.cron !== "string" ? params.cron.timezone : "UTC") ?? "UTC";
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$task$2d$catalog$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["taskCatalog"].updateTaskMetadata(task.id, {
        triggerSource: "schedule",
        schedule: cron ? {
            cron: cron,
            timezone
        } : undefined
    });
    return task;
}
function create(options, requestOptions) {
    const apiClient = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$apiClientManager$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["apiClientManager"].clientOrThrow();
    const $requestOptions = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$apiClient$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["mergeRequestOptions"])({
        tracer: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$sdk$2f$dist$2f$esm$2f$v3$2f$tracer$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["tracer"],
        name: "schedules.create()",
        icon: "clock",
        attributes: {
            ...(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$utils$2f$styleAttributes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["accessoryAttributes"])({
                items: [
                    {
                        text: options.cron,
                        variant: "normal"
                    }
                ],
                style: "codepath"
            })
        }
    }, requestOptions);
    return apiClient.createSchedule(options, $requestOptions);
}
function retrieve(scheduleId, requestOptions) {
    const apiClient = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$apiClientManager$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["apiClientManager"].clientOrThrow();
    const $requestOptions = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$apiClient$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["mergeRequestOptions"])({
        tracer: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$sdk$2f$dist$2f$esm$2f$v3$2f$tracer$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["tracer"],
        name: "schedules.retrieve()",
        icon: "clock",
        attributes: {
            scheduleId,
            ...(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$utils$2f$styleAttributes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["accessoryAttributes"])({
                items: [
                    {
                        text: scheduleId,
                        variant: "normal"
                    }
                ],
                style: "codepath"
            })
        }
    }, requestOptions);
    return apiClient.retrieveSchedule(scheduleId, $requestOptions);
}
function update(scheduleId, options, requestOptions) {
    const apiClient = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$apiClientManager$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["apiClientManager"].clientOrThrow();
    const $requestOptions = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$apiClient$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["mergeRequestOptions"])({
        tracer: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$sdk$2f$dist$2f$esm$2f$v3$2f$tracer$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["tracer"],
        name: "schedules.update()",
        icon: "clock",
        attributes: {
            scheduleId,
            ...(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$utils$2f$styleAttributes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["accessoryAttributes"])({
                items: [
                    {
                        text: scheduleId,
                        variant: "normal"
                    }
                ],
                style: "codepath"
            })
        }
    }, requestOptions);
    return apiClient.updateSchedule(scheduleId, options, $requestOptions);
}
function del(scheduleId, requestOptions) {
    const apiClient = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$apiClientManager$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["apiClientManager"].clientOrThrow();
    const $requestOptions = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$apiClient$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["mergeRequestOptions"])({
        tracer: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$sdk$2f$dist$2f$esm$2f$v3$2f$tracer$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["tracer"],
        name: "schedules.delete()",
        icon: "clock",
        attributes: {
            scheduleId,
            ...(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$utils$2f$styleAttributes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["accessoryAttributes"])({
                items: [
                    {
                        text: scheduleId,
                        variant: "normal"
                    }
                ],
                style: "codepath"
            })
        }
    }, requestOptions);
    return apiClient.deleteSchedule(scheduleId, $requestOptions);
}
function deactivate(scheduleId, requestOptions) {
    const apiClient = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$apiClientManager$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["apiClientManager"].clientOrThrow();
    const $requestOptions = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$apiClient$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["mergeRequestOptions"])({
        tracer: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$sdk$2f$dist$2f$esm$2f$v3$2f$tracer$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["tracer"],
        name: "schedules.deactivate()",
        icon: "clock",
        attributes: {
            scheduleId,
            ...(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$utils$2f$styleAttributes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["accessoryAttributes"])({
                items: [
                    {
                        text: scheduleId,
                        variant: "normal"
                    }
                ],
                style: "codepath"
            })
        }
    }, requestOptions);
    return apiClient.deactivateSchedule(scheduleId, $requestOptions);
}
function activate(scheduleId, requestOptions) {
    const apiClient = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$apiClientManager$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["apiClientManager"].clientOrThrow();
    const $requestOptions = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$apiClient$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["mergeRequestOptions"])({
        tracer: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$sdk$2f$dist$2f$esm$2f$v3$2f$tracer$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["tracer"],
        name: "schedules.activate()",
        icon: "clock",
        attributes: {
            scheduleId,
            ...(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$utils$2f$styleAttributes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["accessoryAttributes"])({
                items: [
                    {
                        text: scheduleId,
                        variant: "normal"
                    }
                ],
                style: "codepath"
            })
        }
    }, requestOptions);
    return apiClient.activateSchedule(scheduleId, $requestOptions);
}
function list(options, requestOptions) {
    const apiClient = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$apiClientManager$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["apiClientManager"].clientOrThrow();
    const $requestOptions = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$apiClient$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["mergeRequestOptions"])({
        tracer: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$sdk$2f$dist$2f$esm$2f$v3$2f$tracer$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["tracer"],
        name: "schedules.list()",
        icon: "clock"
    }, requestOptions);
    return apiClient.listSchedules(options, $requestOptions);
}
function timezones(options) {
    const baseUrl = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$apiClientManager$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["apiClientManager"].baseURL;
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$apiClient$2f$core$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["zodfetch"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$schemas$2f$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["TimezonesResult"], `${baseUrl}/api/v1/timezones${options?.excludeUtc === true ? "?excludeUtc=true" : ""}`, {
        method: "GET",
        headers: {
            "Content-Type": "application/json"
        }
    });
} //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@trigger.dev/sdk/dist/esm/v3/envvars.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "create": (()=>create),
    "del": (()=>del),
    "list": (()=>list),
    "retrieve": (()=>retrieve),
    "update": (()=>update),
    "upload": (()=>upload)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/core/dist/esm/v3/index.js [app-rsc] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$sdk$2f$dist$2f$esm$2f$v3$2f$tracer$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/sdk/dist/esm/v3/tracer.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$task$2d$context$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/core/dist/esm/v3/task-context-api.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$apiClientManager$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/core/dist/esm/v3/apiClientManager-api.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$apiClient$2f$core$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/core/dist/esm/v3/apiClient/core.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$apiClient$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/core/dist/esm/v3/apiClient/index.js [app-rsc] (ecmascript) <locals>");
;
;
function upload(projectRefOrParams, slugOrRequestOptions, params, requestOptions) {
    let $projectRef;
    let $params;
    let $slug;
    const $requestOptions = overloadRequestOptions("upload", slugOrRequestOptions, requestOptions);
    if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$task$2d$context$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["taskContext"].ctx) {
        if (typeof projectRefOrParams === "string") {
            $projectRef = projectRefOrParams;
            $slug = typeof slugOrRequestOptions === "string" ? slugOrRequestOptions : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$task$2d$context$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["taskContext"].ctx.environment.slug;
            if (!params) {
                throw new Error("params is required");
            }
            $params = params;
        } else {
            $params = projectRefOrParams;
            $projectRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$task$2d$context$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["taskContext"].ctx.project.ref;
            $slug = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$task$2d$context$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["taskContext"].ctx.environment.slug;
        }
    } else {
        if (typeof projectRefOrParams !== "string") {
            throw new Error("projectRef is required");
        }
        if (!slugOrRequestOptions || typeof slugOrRequestOptions !== "string") {
            throw new Error("slug is required");
        }
        if (!params) {
            throw new Error("params is required");
        }
        $projectRef = projectRefOrParams;
        $slug = slugOrRequestOptions;
        $params = params;
    }
    const apiClient = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$apiClientManager$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["apiClientManager"].clientOrThrow();
    return apiClient.importEnvVars($projectRef, $slug, $params, $requestOptions);
}
function list(projectRefOrRequestOptions, slug, requestOptions) {
    const $projectRef = !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$apiClient$2f$core$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["isRequestOptions"])(projectRefOrRequestOptions) ? projectRefOrRequestOptions : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$task$2d$context$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["taskContext"].ctx?.project.ref;
    const $slug = slug ?? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$task$2d$context$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["taskContext"].ctx?.environment.slug;
    let $requestOptions = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$apiClient$2f$core$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["isRequestOptions"])(projectRefOrRequestOptions) ? projectRefOrRequestOptions : requestOptions;
    if (!$projectRef) {
        throw new Error("projectRef is required");
    }
    if (!$slug) {
        throw new Error("slug is required");
    }
    $requestOptions = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$apiClient$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["mergeRequestOptions"])({
        tracer: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$sdk$2f$dist$2f$esm$2f$v3$2f$tracer$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["tracer"],
        name: "envvars.list()",
        icon: "id-badge"
    }, $requestOptions);
    const apiClient = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$apiClientManager$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["apiClientManager"].clientOrThrow();
    return apiClient.listEnvVars($projectRef, $slug, $requestOptions);
}
function create(projectRefOrParams, slugOrRequestOptions, params, requestOptions) {
    let $projectRef;
    let $slug;
    let $params;
    const $requestOptions = overloadRequestOptions("create", slugOrRequestOptions, requestOptions);
    if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$task$2d$context$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["taskContext"].ctx) {
        if (typeof projectRefOrParams === "string") {
            $projectRef = projectRefOrParams;
            $slug = typeof slugOrRequestOptions === "string" ? slugOrRequestOptions : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$task$2d$context$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["taskContext"].ctx.environment.slug;
            if (!params) {
                throw new Error("params is required");
            }
            $params = params;
        } else {
            $params = projectRefOrParams;
            $projectRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$task$2d$context$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["taskContext"].ctx.project.ref;
            $slug = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$task$2d$context$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["taskContext"].ctx.environment.slug;
        }
    } else {
        if (typeof projectRefOrParams !== "string") {
            throw new Error("projectRef is required");
        }
        if (!slugOrRequestOptions || typeof slugOrRequestOptions !== "string") {
            throw new Error("slug is required");
        }
        if (!params) {
            throw new Error("params is required");
        }
        $projectRef = projectRefOrParams;
        $slug = slugOrRequestOptions;
        $params = params;
    }
    const apiClient = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$apiClientManager$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["apiClientManager"].clientOrThrow();
    return apiClient.createEnvVar($projectRef, $slug, $params, $requestOptions);
}
function retrieve(projectRefOrName, slugOrRequestOptions, name1, requestOptions) {
    let $projectRef;
    let $slug;
    let $name;
    const $requestOptions = overloadRequestOptions("retrieve", slugOrRequestOptions, requestOptions);
    if (typeof name1 === "string") {
        $projectRef = projectRefOrName;
        $slug = typeof slugOrRequestOptions === "string" ? slugOrRequestOptions : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$task$2d$context$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["taskContext"].ctx?.environment.slug;
        $name = name1;
    } else {
        $projectRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$task$2d$context$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["taskContext"].ctx?.project.ref;
        $slug = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$task$2d$context$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["taskContext"].ctx?.environment.slug;
        $name = projectRefOrName;
    }
    if (!$projectRef) {
        throw new Error("projectRef is required");
    }
    if (!$slug) {
        throw new Error("slug is required");
    }
    const apiClient = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$apiClientManager$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["apiClientManager"].clientOrThrow();
    return apiClient.retrieveEnvVar($projectRef, $slug, $name, $requestOptions);
}
function del(projectRefOrName, slugOrRequestOptions, name1, requestOptions) {
    let $projectRef;
    let $slug;
    let $name;
    const $requestOptions = overloadRequestOptions("del", slugOrRequestOptions, requestOptions);
    if (typeof name1 === "string") {
        $projectRef = projectRefOrName;
        $slug = typeof slugOrRequestOptions === "string" ? slugOrRequestOptions : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$task$2d$context$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["taskContext"].ctx?.environment.slug;
        $name = name1;
    } else {
        $projectRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$task$2d$context$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["taskContext"].ctx?.project.ref;
        $slug = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$task$2d$context$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["taskContext"].ctx?.environment.slug;
        $name = projectRefOrName;
    }
    if (!$projectRef) {
        throw new Error("projectRef is required");
    }
    if (!$slug) {
        throw new Error("slug is required");
    }
    const apiClient = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$apiClientManager$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["apiClientManager"].clientOrThrow();
    return apiClient.deleteEnvVar($projectRef, $slug, $name, $requestOptions);
}
function update(projectRefOrName, slugOrParams, nameOrRequestOptions, params, requestOptions) {
    let $projectRef;
    let $slug;
    let $name;
    let $params;
    const $requestOptions = overloadRequestOptions("update", nameOrRequestOptions, requestOptions);
    if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$task$2d$context$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["taskContext"].ctx) {
        if (typeof slugOrParams === "string") {
            $projectRef = slugOrParams;
            $slug = slugOrParams ?? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$task$2d$context$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["taskContext"].ctx.environment.slug;
            $name = typeof nameOrRequestOptions === "string" ? nameOrRequestOptions : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$task$2d$context$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["taskContext"].ctx.environment.slug;
            if (!params) {
                throw new Error("params is required");
            }
            $params = params;
        } else {
            $params = slugOrParams;
            $projectRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$task$2d$context$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["taskContext"].ctx.project.ref;
            $slug = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$task$2d$context$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["taskContext"].ctx.environment.slug;
            $name = projectRefOrName;
        }
    } else {
        if (typeof slugOrParams !== "string") {
            throw new Error("slug is required");
        }
        if (!projectRefOrName) {
            throw new Error("projectRef is required");
        }
        if (!params) {
            throw new Error("params is required");
        }
        $projectRef = projectRefOrName;
        $slug = slugOrParams;
        $name = name;
        $params = params;
    }
    const apiClient = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$apiClientManager$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["apiClientManager"].clientOrThrow();
    return apiClient.updateEnvVar($projectRef, $slug, $name, $params, $requestOptions);
}
function overloadRequestOptions(name1, slugOrRequestOptions, requestOptions) {
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$apiClient$2f$core$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["isRequestOptions"])(slugOrRequestOptions)) {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$apiClient$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["mergeRequestOptions"])({
            tracer: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$sdk$2f$dist$2f$esm$2f$v3$2f$tracer$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["tracer"],
            name: `envvars.${name1}()`,
            icon: "id-badge"
        }, slugOrRequestOptions);
    } else {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$apiClient$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["mergeRequestOptions"])({
            tracer: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$sdk$2f$dist$2f$esm$2f$v3$2f$tracer$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["tracer"],
            name: `envvars.${name1}()`,
            icon: "id-badge"
        }, requestOptions);
    }
} //# sourceMappingURL=envvars.js.map
}}),
"[project]/node_modules/@trigger.dev/sdk/dist/esm/v3/auth.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "auth": (()=>auth),
    "configure": (()=>configure)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/core/dist/esm/v3/index.js [app-rsc] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$apiClientManager$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/core/dist/esm/v3/apiClientManager-api.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$jwt$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/core/dist/esm/v3/jwt.js [app-rsc] (ecmascript)");
;
;
function configure(options) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$apiClientManager$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["apiClientManager"].setGlobalAPIClientConfiguration(options);
}
const auth = {
    configure,
    createPublicToken,
    createTriggerPublicToken,
    createBatchTriggerPublicToken,
    withAuth,
    withPublicToken,
    withTriggerPublicToken,
    withBatchTriggerPublicToken
};
/**
 * Creates a public token using the provided options.
 *
 * @param options - Optional parameters for creating the public token.
 * @param options.scopes - An array of permission scopes to be included in the token.
 * @param options.expirationTime - The expiration time for the token.
 * @returns A promise that resolves to a string representing the generated public token.
 *
 * @example
 *
 * ```typescript
 * import { auth } from "@trigger.dev/sdk/v3";
 *
 * const publicToken = await auth.createPublicToken({
 *  scopes: {
 *   read: {
 *     tags: ["file:1234"]
 *   }
 * });
 * ```
 */ async function createPublicToken(options) {
    const apiClient = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$apiClientManager$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["apiClientManager"].clientOrThrow();
    const claims = await apiClient.generateJWTClaims();
    return await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$jwt$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["generateJWT"])({
        secretKey: apiClient.accessToken,
        payload: {
            ...claims,
            scopes: options?.scopes ? flattenScopes(options.scopes) : undefined
        },
        expirationTime: options?.expirationTime
    });
}
/**
 * Executes a function with a public token, providing temporary access permissions.
 *
 * @param options - Options for creating the public token.
 * @param fn - The asynchronous function to be executed with the public token.
 */ async function withPublicToken(options, fn) {
    const token = await createPublicToken(options);
    await withAuth({
        accessToken: token
    }, fn);
}
/**
 * Creates a one-time use token to trigger a specific task.
 *
 * @param task - The task ID or an array of task IDs that the token should allow triggering.
 * @param options - Options for creating the one-time use token.
 * @returns A promise that resolves to a string representing the generated one-time use token.
 *
 * @example
 * Create a one-time use public token that allows triggering a specific task:
 *
 * ```ts
 * import { auth } from "@trigger.dev/sdk/v3";
 *
 * const token = await auth.createTriggerPublicToken("my-task");
 * ```
 *
 * @example You can also create a one-time use token that allows triggering multiple tasks:
 *
 * ```ts
 * import { auth } from "@trigger.dev/sdk/v3";
 *
 * const token = await auth.createTriggerPublicToken(["task1", "task2"]);
 * ```
 *
 * @example You can also create a one-time use token that allows triggering a task with a specific expiration time:
 *
 * ```ts
 * import { auth } from "@trigger.dev/sdk/v3";
 *
 * const token = await auth.createTriggerPublicToken("my-task", { expirationTime: "1h" });
 * ```
 */ async function createTriggerPublicToken(task, options) {
    const apiClient = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$apiClientManager$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["apiClientManager"].clientOrThrow();
    const claims = await apiClient.generateJWTClaims();
    return await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$jwt$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["generateJWT"])({
        secretKey: apiClient.accessToken,
        payload: {
            ...claims,
            otu: typeof options?.multipleUse === "boolean" ? !options.multipleUse : true,
            scopes: flattenScopes({
                trigger: {
                    tasks: task
                }
            })
        },
        expirationTime: options?.expirationTime
    });
}
/**
 * Executes a function with a one-time use token that allows triggering a specific task.
 *
 * @param task - The task ID or an array of task IDs that the token should allow triggering.
 * @param options - Options for creating the one-time use token.
 * @param fn - The asynchronous function to be executed with the one-time use token.
 */ async function withTriggerPublicToken(task, options = {}, fn) {
    const token = await createTriggerPublicToken(task, options);
    await withAuth({
        accessToken: token
    }, fn);
}
/**
 * Creates a one-time use token to batch trigger a specific task or tasks.
 *
 * @param task - The task ID or an array of task IDs that the token should allow triggering.
 * @param options - Options for creating the one-time use token.
 * @returns A promise that resolves to a string representing the generated one-time use token.
 *
 * @example
 *
 * ```ts
 * import { auth } from "@trigger.dev/sdk/v3";
 *
 * const token = await auth.createBatchTriggerPublicToken("my-task");
 * ```
 *
 * @example You can also create a one-time use token that allows batch triggering multiple tasks:
 *
 * ```ts
 * import { auth } from "@trigger.dev/sdk/v3";
 *
 * const token = await auth.createBatchTriggerPublicToken(["task1", "task2"]);
 * ```
 *
 * @example You can also create a one-time use token that allows batch triggering a task with a specific expiration time:
 *
 * ```ts
 * import { auth } from "@trigger.dev/sdk/v3";
 *
 * const token = await auth.createBatchTriggerPublicToken("my-task", { expirationTime: "1h" });
 * ```
 */ async function createBatchTriggerPublicToken(task, options) {
    const apiClient = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$apiClientManager$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["apiClientManager"].clientOrThrow();
    const claims = await apiClient.generateJWTClaims();
    return await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$jwt$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["generateJWT"])({
        secretKey: apiClient.accessToken,
        payload: {
            ...claims,
            otu: typeof options?.multipleUse === "boolean" ? !options.multipleUse : true,
            scopes: flattenScopes({
                batchTrigger: {
                    tasks: task
                }
            })
        },
        expirationTime: options?.expirationTime
    });
}
/**
 * Executes a function with a one-time use token that allows triggering a specific task.
 *
 * @param task - The task ID or an array of task IDs that the token should allow triggering.
 * @param options - Options for creating the one-time use token.
 * @param fn - The asynchronous function to be executed with the one-time use token.
 */ async function withBatchTriggerPublicToken(task, options = {}, fn) {
    const token = await createBatchTriggerPublicToken(task, options);
    await withAuth({
        accessToken: token
    }, fn);
}
/**
 * Executes a provided asynchronous function with a specified API client configuration.
 *
 * @template R - The type of the asynchronous function to be executed.
 * @param {ApiClientConfiguration} config - The configuration for the API client.
 * @param {R} fn - The asynchronous function to be executed.
 * @returns {Promise<ReturnType<R>>} A promise that resolves to the return type of the provided function.
 */ async function withAuth(config, fn) {
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$apiClientManager$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["apiClientManager"].runWithConfig(config, fn);
}
function flattenScopes(permissions) {
    const flattenedPermissions = [];
    for (const [action, properties] of Object.entries(permissions)){
        if (properties) {
            if (typeof properties === "boolean" && properties) {
                flattenedPermissions.push(action);
            } else if (typeof properties === "object") {
                for (const [property, value] of Object.entries(properties)){
                    if (Array.isArray(value)) {
                        for (const item of value){
                            flattenedPermissions.push(`${action}:${property}:${item}`);
                        }
                    } else if (typeof value === "string") {
                        flattenedPermissions.push(`${action}:${property}:${value}`);
                    } else if (typeof value === "boolean" && value) {
                        flattenedPermissions.push(`${action}:${property}`);
                    }
                }
            }
        }
    }
    return flattenedPermissions;
} //# sourceMappingURL=auth.js.map
}}),
"[project]/node_modules/@trigger.dev/sdk/dist/esm/v3/index.js [app-rsc] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({});
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
 //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@trigger.dev/sdk/dist/esm/v3/index.js [app-rsc] (ecmascript) <module evaluation>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, t: __turbopack_require_real__ } = __turbopack_context__;
{
__turbopack_esm__({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$sdk$2f$dist$2f$esm$2f$v3$2f$cache$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/sdk/dist/esm/v3/cache.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$sdk$2f$dist$2f$esm$2f$v3$2f$config$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/sdk/dist/esm/v3/config.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$sdk$2f$dist$2f$esm$2f$v3$2f$retry$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/sdk/dist/esm/v3/retry.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$sdk$2f$dist$2f$esm$2f$v3$2f$shared$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/sdk/dist/esm/v3/shared.js [app-rsc] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$sdk$2f$dist$2f$esm$2f$v3$2f$tasks$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/sdk/dist/esm/v3/tasks.js [app-rsc] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$sdk$2f$dist$2f$esm$2f$v3$2f$batch$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/sdk/dist/esm/v3/batch.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$sdk$2f$dist$2f$esm$2f$v3$2f$wait$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/sdk/dist/esm/v3/wait.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$sdk$2f$dist$2f$esm$2f$v3$2f$waitUntil$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/sdk/dist/esm/v3/waitUntil.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$sdk$2f$dist$2f$esm$2f$v3$2f$usage$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/sdk/dist/esm/v3/usage.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$sdk$2f$dist$2f$esm$2f$v3$2f$idempotencyKeys$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/sdk/dist/esm/v3/idempotencyKeys.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$sdk$2f$dist$2f$esm$2f$v3$2f$tags$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/sdk/dist/esm/v3/tags.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$sdk$2f$dist$2f$esm$2f$v3$2f$metadata$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/sdk/dist/esm/v3/metadata.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$sdk$2f$dist$2f$esm$2f$v3$2f$timeout$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/sdk/dist/esm/v3/timeout.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$sdk$2f$dist$2f$esm$2f$v3$2f$webhooks$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/sdk/dist/esm/v3/webhooks.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$core$2f$dist$2f$esm$2f$v3$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/core/dist/esm/v3/index.js [app-rsc] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$sdk$2f$dist$2f$esm$2f$v3$2f$runs$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/sdk/dist/esm/v3/runs.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$sdk$2f$dist$2f$esm$2f$v3$2f$schedules$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/sdk/dist/esm/v3/schedules/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$sdk$2f$dist$2f$esm$2f$v3$2f$envvars$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/sdk/dist/esm/v3/envvars.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$sdk$2f$dist$2f$esm$2f$v3$2f$auth$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/sdk/dist/esm/v3/auth.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$sdk$2f$dist$2f$esm$2f$v3$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/sdk/dist/esm/v3/index.js [app-rsc] (ecmascript) <locals>");
}}),
"[project]/node_modules/@trigger.dev/sdk/dist/esm/v3/schedules/index.js [app-rsc] (ecmascript) <export * as schedules>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, t: __turbopack_require_real__ } = __turbopack_context__;
{
__turbopack_esm__({
    "schedules": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$sdk$2f$dist$2f$esm$2f$v3$2f$schedules$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$trigger$2e$dev$2f$sdk$2f$dist$2f$esm$2f$v3$2f$schedules$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@trigger.dev/sdk/dist/esm/v3/schedules/index.js [app-rsc] (ecmascript)");
}}),

};

//# sourceMappingURL=node_modules_%40trigger_dev_sdk_dist_esm_585417._.js.map