{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/dezalduasamuel/Desktop/Code/playlist-manager-product/playlist-manager-next/app/my-playlists/%5Bid%5D/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/app/my-playlists/[id]/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/my-playlists/[id]/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAkS,GAC/T,gEACA"}},
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 21, "column": 0}, "map": {"version":3,"sources":["file:///Users/dezalduasamuel/Desktop/Code/playlist-manager-product/playlist-manager-next/app/my-playlists/%5Bid%5D/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/app/my-playlists/[id]/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/my-playlists/[id]/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA8Q,GAC3S,4CACA"}},
    {"offset": {"line": 29, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 35, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 39, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 59, "column": 0}, "map": {"version":3,"sources":["file:///Users/dezalduasamuel/Desktop/Code/playlist-manager-product/playlist-manager-next/trigger/example.ts"],"sourcesContent":["import { logger, schedules, wait } from '@trigger.dev/sdk/v3';\n\nexport const firstScheduledTask = schedules.task({\n\tid: 'first-scheduled-task',\n\t// Every hour\n\tcron: '0 * * * *',\n\t// Set an optional maxDuration to prevent tasks from running indefinitely\n\tmaxDuration: 300, // Stop executing after 300 secs (5 mins) of compute\n\trun: async (payload, {}) => {\n\t\t// The payload contains the last run timestamp that you can use to check if this is the first run\n\t\t// And calculate the time since the last run\n\t\tconst distanceInMs =\n\t\t\tpayload.timestamp.getTime() -\n\t\t\t(payload.lastTimestamp ?? new Date()).getTime();\n\n\t\tlogger.log('First scheduled tasks', { payload, distanceInMs });\n\n\t\t// Wait for 5 seconds\n\t\tawait wait.for({ seconds: 5 });\n\n\t\t// Format the timestamp using the timezone from the payload\n\t\tconst formatted = payload.timestamp.toLocaleString('en-US', {\n\t\t\ttimeZone: payload.timezone,\n\t\t});\n\n\t\tlogger.log(formatted);\n\t},\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AAAA;AAAA;;AAEO,MAAM,qBAAqB,uNAAA,CAAA,YAAS,CAAC,IAAI,CAAC;IAChD,IAAI;IACJ,aAAa;IACb,MAAM;IACN,yEAAyE;IACzE,aAAa;IACb,KAAK,OAAO,SAAS,EAAE;QACtB,iGAAiG;QACjG,4CAA4C;QAC5C,MAAM,eACL,QAAQ,SAAS,CAAC,OAAO,KACzB,CAAC,QAAQ,aAAa,IAAI,IAAI,MAAM,EAAE,OAAO;QAE9C,8KAAA,CAAA,SAAM,CAAC,GAAG,CAAC,yBAAyB;YAAE;YAAS;QAAa;QAE5D,qBAAqB;QACrB,MAAM,oKAAA,CAAA,OAAI,CAAC,GAAG,CAAC;YAAE,SAAS;QAAE;QAE5B,2DAA2D;QAC3D,MAAM,YAAY,QAAQ,SAAS,CAAC,cAAc,CAAC,SAAS;YAC3D,UAAU,QAAQ,QAAQ;QAC3B;QAEA,8KAAA,CAAA,SAAM,CAAC,GAAG,CAAC;IACZ;AACD"}},
    {"offset": {"line": 92, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 98, "column": 0}, "map": {"version":3,"sources":["file:///Users/dezalduasamuel/Desktop/Code/playlist-manager-product/playlist-manager-next/app/actions/add-cron.ts"],"sourcesContent":["'use server';\nimport { firstScheduledTask } from '@/trigger/example';\nimport { schedules } from '@trigger.dev/sdk/v3';\n\nexport async function addCron(playlistId: string) {\n\tconsole.log('addCron', playlistId);\n\tawait schedules.create({\n\t\ttask: firstScheduledTask.id,\n\t\tcron: '* * * * *',\n\t\tdeduplicationKey: `playlist-${playlistId}`,\n\t\texternalId: playlistId,\n\t});\n}\n"],"names":[],"mappings":";;;;;AACA;AACA;;AAAA;;;;;AAEO,eAAe,uCAAK,GAAL,QAAQ,UAAkB;IAC/C,QAAQ,GAAG,CAAC,WAAW;IACvB,MAAM,uNAAA,CAAA,YAAS,CAAC,MAAM,CAAC;QACtB,MAAM,kHAAA,CAAA,qBAAkB,CAAC,EAAE;QAC3B,MAAM;QACN,kBAAkB,CAAC,SAAS,EAAE,YAAY;QAC1C,YAAY;IACb;AACD;;;IARsB;;AAAA,+OAAA"}},
    {"offset": {"line": 125, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 131, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 133, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}