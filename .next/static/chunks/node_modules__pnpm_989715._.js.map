{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"file":"EndpointsBase.js","sources":["file:///Users/dezalduasamuel/Desktop/Code/playlist-manager-product/playlist-manager-next/node_modules/.pnpm/%40spotify%2Bweb-api-ts-sdk%401.2.0/node_modules/%40spotify/web-api-ts-sdk/src/endpoints/EndpointsBase.ts"],"sourcesContent":["import { SpotifyApi } from \"../SpotifyApi.js\";\n\nexport default class EndpointsBase {\n    constructor(protected api: SpotifyApi) {\n    }\n\n    protected async getRequest<TReturnType>(url: string): Promise<TReturnType> {\n        return await this.api.makeRequest<TReturnType>(\"GET\", url);\n    }\n\n    protected async postRequest<TReturnType, TBody = unknown>(url: string, body?: TBody, contentType: string | undefined = undefined): Promise<TReturnType> {\n        return await this.api.makeRequest<TReturnType>(\"POST\", url, body, contentType);\n    }\n\n    protected async putRequest<TReturnType, TBody = unknown>(url: string, body?: TBody, contentType: string | undefined = undefined): Promise<TReturnType> {\n        return await this.api.makeRequest<TReturnType>(\"PUT\", url, body, contentType);\n    }\n\n    protected async deleteRequest<TReturnType, TBody = unknown>(url: string, body?: TBody): Promise<TReturnType> {\n        return await this.api.makeRequest<TReturnType>(\"DELETE\", url, body);\n    }\n\n    protected paramsFor(args: any) {\n        const params = new URLSearchParams();\n        for (let key of Object.getOwnPropertyNames(args)) {\n            if (args[key] || (args[key] === 0) || (!args[key] && typeof args[key] === 'boolean')) {\n                params.append(key, args[key].toString());\n            }\n        }\n        return [...params].length > 0 ? `?${params.toString()}` : \"\";\n    }\n}\n\n"],"names":[],"mappings":";;;AAEc,MAAO,aAAa;IACR,IAAA;IAAtB,YAAsB,GAAe,CAAA;QAAf,IAAA,CAAA,GAAG,GAAH,GAAG,CAAY;IACrC,CAAC;IAES,KAAK,CAAC,UAAU,CAAc,GAAW,EAAA;QAC/C,OAAO,MAAM,IAAI,CAAC,GAAG,CAAC,WAAW,CAAc,KAAK,EAAE,GAAG,CAAC,CAAC;IAC/D,CAAC;IAES,KAAK,CAAC,WAAW,CAA+B,GAAW,EAAE,IAAY,EAAE,cAAkC,SAAS,EAAA;QAC5H,OAAO,MAAM,IAAI,CAAC,GAAG,CAAC,WAAW,CAAc,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,WAAW,CAAC,CAAC;IACnF,CAAC;IAES,KAAK,CAAC,UAAU,CAA+B,GAAW,EAAE,IAAY,EAAE,cAAkC,SAAS,EAAA;QAC3H,OAAO,MAAM,IAAI,CAAC,GAAG,CAAC,WAAW,CAAc,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,WAAW,CAAC,CAAC;IAClF,CAAC;IAES,KAAK,CAAC,aAAa,CAA+B,GAAW,EAAE,IAAY,EAAA;QACjF,OAAO,MAAM,IAAI,CAAC,GAAG,CAAC,WAAW,CAAc,QAAQ,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;IACxE,CAAC;IAES,SAAS,CAAC,IAAS,EAAA;QACzB,MAAM,MAAM,GAAG,IAAI,eAAe,EAAE,CAAC;QACrC,KAAK,IAAI,GAAG,IAAI,MAAM,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAE;YAC9C,IAAI,IAAI,CAAC,GAAG,CAAC,IAAI,AAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,GAAK,CAAD,AAAE,IAAI,CAAC,GAAG,CAAC,IAAI,OAAO,IAAI,CAAC,GAAG,CAAC,KAAK,SAAS,CAAC,CAAE;gBAClF,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC;aAC5C;SACJ;QACD,OAAO,CAAC;eAAG,MAAM;SAAC,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAA,CAAA,EAAI,MAAM,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;IACjE,CAAC;CACJ","ignoreList":[0]}},
    {"offset": {"line": 39, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 45, "column": 0}, "map": {"version":3,"file":"AlbumsEndpoints.js","sources":["file:///Users/dezalduasamuel/Desktop/Code/playlist-manager-product/playlist-manager-next/node_modules/.pnpm/%40spotify%2Bweb-api-ts-sdk%401.2.0/node_modules/%40spotify/web-api-ts-sdk/src/endpoints/AlbumsEndpoints.ts"],"sourcesContent":["import type { Market, Album, Albums, MaxInt, Page, SimplifiedTrack } from '../types.js';\nimport EndpointsBase from './EndpointsBase.js';\n\nexport default class AlbumsEndpoints extends EndpointsBase {\n\n    public async get(id: string, market?: Market): Promise<Album>;\n    public async get(ids: string[], market?: Market): Promise<Album[]>;\n    public async get(idOrIds: string | string[], market?: Market) {\n        if (typeof idOrIds === 'string') {\n            const params = this.paramsFor({ market });\n            const album = await this.getRequest<Album>(`albums/${idOrIds}${params}`);\n            return album;\n        }\n\n        const params = this.paramsFor({ ids: idOrIds, market });\n        // TODO: only returns top 20, validate here\n        const response = await this.getRequest<Albums>(`albums${params}`);\n        return response.albums;\n    }\n\n    public tracks(albumId: string, market?: Market, limit?: MaxInt<50>, offset?: number) {\n        const params = this.paramsFor({ market, limit, offset });\n        return this.getRequest<Page<SimplifiedTrack>>(`albums/${albumId}/tracks${params}`);\n    }\n}\n"],"names":[],"mappings":";;;AACA,OAAO,aAAa,MAAM,oBAAoB,CAAC;;AAEjC,MAAO,eAAgB,+RAAQ,UAAa;IAI/C,KAAK,CAAC,GAAG,CAAC,OAA0B,EAAE,MAAe,EAAA;QACxD,IAAI,OAAO,OAAO,KAAK,QAAQ,EAAE;YAC7B,MAAM,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC;gBAAE,MAAM;YAAA,CAAE,CAAC,CAAC;YAC1C,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,UAAU,CAAQ,CAAA,OAAA,EAAU,OAAO,GAAG,MAAM,EAAE,CAAC,CAAC;YACzE,OAAO,KAAK,CAAC;SAChB;QAED,MAAM,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC;YAAE,GAAG,EAAE,OAAO;YAAE,MAAM;QAAA,CAAE,CAAC,CAAC;QACxD,2CAA2C;QAC3C,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,UAAU,CAAS,CAAA,MAAA,EAAS,MAAM,EAAE,CAAC,CAAC;QAClE,OAAO,QAAQ,CAAC,MAAM,CAAC;IAC3B,CAAC;IAEM,MAAM,CAAC,OAAe,EAAE,MAAe,EAAE,KAAkB,EAAE,MAAe,EAAA;QAC/E,MAAM,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC;YAAE,MAAM;YAAE,KAAK;YAAE,MAAM;QAAA,CAAE,CAAC,CAAC;QACzD,OAAO,IAAI,CAAC,UAAU,CAAwB,CAAA,OAAA,EAAU,OAAO,CAAA,OAAA,EAAU,MAAM,EAAE,CAAC,CAAC;IACvF,CAAC;CACJ","ignoreList":[0]}},
    {"offset": {"line": 76, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 82, "column": 0}, "map": {"version":3,"file":"ArtistsEndpoints.js","sources":["file:///Users/dezalduasamuel/Desktop/Code/playlist-manager-product/playlist-manager-next/node_modules/.pnpm/%40spotify%2Bweb-api-ts-sdk%401.2.0/node_modules/%40spotify/web-api-ts-sdk/src/endpoints/ArtistsEndpoints.ts"],"sourcesContent":["\nimport type {\n    Artist,\n    Artists,\n    Market,\n    MaxInt,\n    Page,\n    SimplifiedAlbum,\n    TopTracksResult,\n} from \"../types.js\";\nimport EndpointsBase from \"./EndpointsBase.js\";\n\nexport default class ArtistsEndpoints extends EndpointsBase {\n    public async get(id: string): Promise<Artist>;\n    public async get(ids: string[]): Promise<Artist[]>;\n    public async get(idOrIds: string | string[]) {\n        if (typeof idOrIds === \"string\") {\n            const artist = this.getRequest<Artist>(`artists/${idOrIds}`);\n            return artist;\n        }\n\n        const params = this.paramsFor({ ids: idOrIds });\n        const response = await this.getRequest<Artists>(`artists${params}`);\n        return response.artists;\n    }\n\n    public albums(\n        id: string,\n        includeGroups?: string,\n        market?: Market,\n        limit?: MaxInt<50>,\n        offset?: number\n    ) {\n        const params = this.paramsFor({\n            include_groups: includeGroups,\n            market,\n            limit,\n            offset,\n        });\n        return this.getRequest<Page<SimplifiedAlbum>>(\n            `artists/${id}/albums${params}`\n        );\n    }\n\n    public topTracks(id: string, market: Market) {\n        // BUG: market is flagged as optional in the docs, but it's actually required for this endpoint\n        // otherwise you get a 400\n\n        const params = this.paramsFor({ market });\n        return this.getRequest<TopTracksResult>(\n            `artists/${id}/top-tracks${params}`\n        );\n    }\n\n    public relatedArtists(id: string) {\n        return this.getRequest<Artists>(`artists/${id}/related-artists`);\n    }\n}\n"],"names":[],"mappings":";;;AAUA,OAAO,aAAa,MAAM,oBAAoB,CAAC;;AAEjC,MAAO,gBAAiB,+RAAQ,UAAa;IAGhD,KAAK,CAAC,GAAG,CAAC,OAA0B,EAAA;QACvC,IAAI,OAAO,OAAO,KAAK,QAAQ,EAAE;YAC7B,MAAM,MAAM,GAAG,IAAI,CAAC,UAAU,CAAS,CAAA,QAAA,EAAW,OAAO,EAAE,CAAC,CAAC;YAC7D,OAAO,MAAM,CAAC;SACjB;QAED,MAAM,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC;YAAE,GAAG,EAAE,OAAO;QAAA,CAAE,CAAC,CAAC;QAChD,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,UAAU,CAAU,CAAA,OAAA,EAAU,MAAM,EAAE,CAAC,CAAC;QACpE,OAAO,QAAQ,CAAC,OAAO,CAAC;IAC5B,CAAC;IAEM,MAAM,CACT,EAAU,EACV,aAAsB,EACtB,MAAe,EACf,KAAkB,EAClB,MAAe,EAAA;QAEf,MAAM,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC;YAC1B,cAAc,EAAE,aAAa;YAC7B,MAAM;YACN,KAAK;YACL,MAAM;SACT,CAAC,CAAC;QACH,OAAO,IAAI,CAAC,UAAU,CAClB,CAAA,QAAA,EAAW,EAAE,CAAA,OAAA,EAAU,MAAM,EAAE,CAClC,CAAC;IACN,CAAC;IAEM,SAAS,CAAC,EAAU,EAAE,MAAc,EAAA;QACvC,+FAA+F;QAC/F,0BAA0B;QAE1B,MAAM,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC;YAAE,MAAM;QAAA,CAAE,CAAC,CAAC;QAC1C,OAAO,IAAI,CAAC,UAAU,CAClB,CAAA,QAAA,EAAW,EAAE,CAAA,WAAA,EAAc,MAAM,EAAE,CACtC,CAAC;IACN,CAAC;IAEM,cAAc,CAAC,EAAU,EAAA;QAC5B,OAAO,IAAI,CAAC,UAAU,CAAU,CAAA,QAAA,EAAW,EAAE,CAAA,gBAAA,CAAkB,CAAC,CAAC;IACrE,CAAC;CACJ","ignoreList":[0]}},
    {"offset": {"line": 120, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 126, "column": 0}, "map": {"version":3,"file":"AudiobooksEndpoints.js","sources":["file:///Users/dezalduasamuel/Desktop/Code/playlist-manager-product/playlist-manager-next/node_modules/.pnpm/%40spotify%2Bweb-api-ts-sdk%401.2.0/node_modules/%40spotify/web-api-ts-sdk/src/endpoints/AudiobooksEndpoints.ts"],"sourcesContent":["import type { Market, Audiobook, Audiobooks, MaxInt, Page, SimplifiedChapter } from '../types.js';\nimport EndpointsBase from './EndpointsBase.js';\n\nexport default class AudiobooksEndpoints extends EndpointsBase {\n    public async get(id: string, market?: Market): Promise<Audiobook>;\n    public async get(ids: string[], market?: Market): Promise<Audiobook[]>;\n    public async get(idOrIds: string | string[], market?: Market) {\n        if (typeof idOrIds === 'string') {\n            const params = this.paramsFor({ market });\n            return this.getRequest<Audiobook>(`audiobooks/${idOrIds}${params}`);\n        }\n\n        const params = this.paramsFor({ ids: idOrIds, market });\n        const response = await this.getRequest<Audiobooks>(`audiobooks${params}`);\n        return response.audiobooks;\n    }\n\n    public getAudiobookChapters(id: string, market?: Market, limit?: MaxInt<50>, offset?: number) {\n        const params = this.paramsFor({ market, limit, offset });\n        return this.getRequest<Page<SimplifiedChapter>>(`audiobooks/${id}/chapters${params}`);\n    }\n\n}\n"],"names":[],"mappings":";;;AACA,OAAO,aAAa,MAAM,oBAAoB,CAAC;;AAEjC,MAAO,mBAAoB,+RAAQ,UAAa;IAGnD,KAAK,CAAC,GAAG,CAAC,OAA0B,EAAE,MAAe,EAAA;QACxD,IAAI,OAAO,OAAO,KAAK,QAAQ,EAAE;YAC7B,MAAM,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC;gBAAE,MAAM;YAAA,CAAE,CAAC,CAAC;YAC1C,OAAO,IAAI,CAAC,UAAU,CAAY,CAAA,WAAA,EAAc,OAAO,GAAG,MAAM,EAAE,CAAC,CAAC;SACvE;QAED,MAAM,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC;YAAE,GAAG,EAAE,OAAO;YAAE,MAAM;QAAA,CAAE,CAAC,CAAC;QACxD,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,UAAU,CAAa,CAAA,UAAA,EAAa,MAAM,EAAE,CAAC,CAAC;QAC1E,OAAO,QAAQ,CAAC,UAAU,CAAC;IAC/B,CAAC;IAEM,oBAAoB,CAAC,EAAU,EAAE,MAAe,EAAE,KAAkB,EAAE,MAAe,EAAA;QACxF,MAAM,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC;YAAE,MAAM;YAAE,KAAK;YAAE,MAAM;QAAA,CAAE,CAAC,CAAC;QACzD,OAAO,IAAI,CAAC,UAAU,CAA0B,CAAA,WAAA,EAAc,EAAE,CAAA,SAAA,EAAY,MAAM,EAAE,CAAC,CAAC;IAC1F,CAAC;CAEJ","ignoreList":[0]}},
    {"offset": {"line": 155, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 161, "column": 0}, "map": {"version":3,"file":"BrowseEndpoints.js","sources":["file:///Users/dezalduasamuel/Desktop/Code/playlist-manager-product/playlist-manager-next/node_modules/.pnpm/%40spotify%2Bweb-api-ts-sdk%401.2.0/node_modules/%40spotify/web-api-ts-sdk/src/endpoints/BrowseEndpoints.ts"],"sourcesContent":["import type { CountryCodeA2, MaxInt, Categories, Category, NewReleases, FeaturedPlaylists } from '../types.js';\nimport EndpointsBase from './EndpointsBase.js';\n\nexport default class BrowseEndpoints extends EndpointsBase {\n\n    public getCategories(country?: CountryCodeA2, locale?: string, limit?: MaxInt<50>, offset?: number) {\n        const params = this.paramsFor({ country, locale, limit, offset });\n\n        return this.getRequest<Categories>(`browse/categories${params}`);\n    }\n\n    public getCategory(categoryId: string, country?: CountryCodeA2, locale?: string) {\n        const params = this.paramsFor({ country, locale });\n\n        return this.getRequest<Category>(`browse/categories/${categoryId}${params}`);\n    }\n\n    public getNewReleases(country?: string, limit?: MaxInt<50>, offset?: number) {\n        const params = this.paramsFor({ country, limit, offset });\n        return this.getRequest<NewReleases>(`browse/new-releases${params}`);\n    }\n\n    public getFeaturedPlaylists(country?: CountryCodeA2, locale?: string, timestamp?: string, limit?: MaxInt<50>, offset?: number) {\n        const params = this.paramsFor({ country, locale, timestamp, limit, offset });\n        return this.getRequest<FeaturedPlaylists>(`browse/featured-playlists${params}`);\n    }\n\n    public getPlaylistsForCategory(category_id: string, country?: CountryCodeA2, limit?: MaxInt<50>, offset?: number) {\n        const params = this.paramsFor({ country, limit, offset });\n        return this.getRequest<FeaturedPlaylists>(`browse/categories/${category_id}/playlists${params}`);\n    }\n}\n"],"names":[],"mappings":";;;AACA,OAAO,aAAa,MAAM,oBAAoB,CAAC;;AAEjC,MAAO,eAAgB,+RAAQ,UAAa;IAE/C,aAAa,CAAC,OAAuB,EAAE,MAAe,EAAE,KAAkB,EAAE,MAAe,EAAA;QAC9F,MAAM,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC;YAAE,OAAO;YAAE,MAAM;YAAE,KAAK;YAAE,MAAM;QAAA,CAAE,CAAC,CAAC;QAElE,OAAO,IAAI,CAAC,UAAU,CAAa,CAAA,iBAAA,EAAoB,MAAM,EAAE,CAAC,CAAC;IACrE,CAAC;IAEM,WAAW,CAAC,UAAkB,EAAE,OAAuB,EAAE,MAAe,EAAA;QAC3E,MAAM,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC;YAAE,OAAO;YAAE,MAAM;QAAA,CAAE,CAAC,CAAC;QAEnD,OAAO,IAAI,CAAC,UAAU,CAAW,CAAA,kBAAA,EAAqB,UAAU,GAAG,MAAM,EAAE,CAAC,CAAC;IACjF,CAAC;IAEM,cAAc,CAAC,OAAgB,EAAE,KAAkB,EAAE,MAAe,EAAA;QACvE,MAAM,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC;YAAE,OAAO;YAAE,KAAK;YAAE,MAAM;QAAA,CAAE,CAAC,CAAC;QAC1D,OAAO,IAAI,CAAC,UAAU,CAAc,CAAA,mBAAA,EAAsB,MAAM,EAAE,CAAC,CAAC;IACxE,CAAC;IAEM,oBAAoB,CAAC,OAAuB,EAAE,MAAe,EAAE,SAAkB,EAAE,KAAkB,EAAE,MAAe,EAAA;QACzH,MAAM,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC;YAAE,OAAO;YAAE,MAAM;YAAE,SAAS;YAAE,KAAK;YAAE,MAAM;QAAA,CAAE,CAAC,CAAC;QAC7E,OAAO,IAAI,CAAC,UAAU,CAAoB,CAAA,yBAAA,EAA4B,MAAM,EAAE,CAAC,CAAC;IACpF,CAAC;IAEM,uBAAuB,CAAC,WAAmB,EAAE,OAAuB,EAAE,KAAkB,EAAE,MAAe,EAAA;QAC5G,MAAM,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC;YAAE,OAAO;YAAE,KAAK;YAAE,MAAM;QAAA,CAAE,CAAC,CAAC;QAC1D,OAAO,IAAI,CAAC,UAAU,CAAoB,CAAA,kBAAA,EAAqB,WAAW,CAAA,UAAA,EAAa,MAAM,EAAE,CAAC,CAAC;IACrG,CAAC;CACJ","ignoreList":[0]}},
    {"offset": {"line": 210, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 216, "column": 0}, "map": {"version":3,"file":"ChaptersEndpoints.js","sources":["file:///Users/dezalduasamuel/Desktop/Code/playlist-manager-product/playlist-manager-next/node_modules/.pnpm/%40spotify%2Bweb-api-ts-sdk%401.2.0/node_modules/%40spotify/web-api-ts-sdk/src/endpoints/ChaptersEndpoints.ts"],"sourcesContent":["import type { Chapter, Chapters } from '../types.js';\nimport EndpointsBase from './EndpointsBase.js';\n\n// These are mandatory, and the only supported market codes for the Chapters API\nexport type ChapterMarket = \"GB\" | \"US\" | \"IE\" | \"NZ\" | \"AU\";\n\nexport default class ChaptersEndpoints extends EndpointsBase {\n    public get(id: string, market: ChapterMarket): Promise<Chapter>;\n    public get(ids: string[], market: ChapterMarket): Promise<Chapter[]>;\n    public async get(idOrIds: string | string[], market: ChapterMarket) {\n        if (typeof idOrIds === 'string') {\n            const params = this.paramsFor({ market });\n            return this.getRequest<Chapter>(`chapters/${idOrIds}${params}`);\n        }\n\n        // TODO: Only returns top 50, validate / pre-check here\n        const params = this.paramsFor({ ids: idOrIds, market });\n        const response = await this.getRequest<Chapters>(`chapters${params}`);\n        return response.chapters;\n    }\n}\n"],"names":[],"mappings":";;;AACA,OAAO,aAAa,MAAM,oBAAoB,CAAC;;AAKjC,MAAO,iBAAkB,+RAAQ,UAAa;IAGjD,KAAK,CAAC,GAAG,CAAC,OAA0B,EAAE,MAAqB,EAAA;QAC9D,IAAI,OAAO,OAAO,KAAK,QAAQ,EAAE;YAC7B,MAAM,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC;gBAAE,MAAM;YAAA,CAAE,CAAC,CAAC;YAC1C,OAAO,IAAI,CAAC,UAAU,CAAU,CAAA,SAAA,EAAY,OAAO,GAAG,MAAM,EAAE,CAAC,CAAC;SACnE;QAED,uDAAuD;QACvD,MAAM,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC;YAAE,GAAG,EAAE,OAAO;YAAE,MAAM;QAAA,CAAE,CAAC,CAAC;QACxD,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,UAAU,CAAW,CAAA,QAAA,EAAW,MAAM,EAAE,CAAC,CAAC;QACtE,OAAO,QAAQ,CAAC,QAAQ,CAAC;IAC7B,CAAC;CACJ","ignoreList":[0]}},
    {"offset": {"line": 238, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 244, "column": 0}, "map": {"version":3,"file":"EpisodesEndpoints.js","sources":["file:///Users/dezalduasamuel/Desktop/Code/playlist-manager-product/playlist-manager-next/node_modules/.pnpm/%40spotify%2Bweb-api-ts-sdk%401.2.0/node_modules/%40spotify/web-api-ts-sdk/src/endpoints/EpisodesEndpoints.ts"],"sourcesContent":["import type { Market, Episode, Episodes } from '../types.js';\nimport EndpointsBase from './EndpointsBase.js';\n\nexport default class EpisodesEndpoints extends EndpointsBase {\n\n    public get(id: string, market: Market): Promise<Episode>\n    public get(ids: string[], market: Market): Promise<Episode[]>\n    public async get(idOrIds: string | string[], market: Market) {\n        if (typeof idOrIds === 'string') {\n            const params = this.paramsFor({ market });\n            return this.getRequest<Episode>(`episodes/${idOrIds}${params}`);\n        }\n\n        const params = this.paramsFor({ ids: idOrIds, market });\n        const response = await this.getRequest<Episodes>(`episodes${params}`);\n        return response.episodes;\n    }\n}\n"],"names":[],"mappings":";;;AACA,OAAO,aAAa,MAAM,oBAAoB,CAAC;;AAEjC,MAAO,iBAAkB,+RAAQ,UAAa;IAIjD,KAAK,CAAC,GAAG,CAAC,OAA0B,EAAE,MAAc,EAAA;QACvD,IAAI,OAAO,OAAO,KAAK,QAAQ,EAAE;YAC7B,MAAM,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC;gBAAE,MAAM;YAAA,CAAE,CAAC,CAAC;YAC1C,OAAO,IAAI,CAAC,UAAU,CAAU,CAAA,SAAA,EAAY,OAAO,GAAG,MAAM,EAAE,CAAC,CAAC;SACnE;QAED,MAAM,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC;YAAE,GAAG,EAAE,OAAO;YAAE,MAAM;QAAA,CAAE,CAAC,CAAC;QACxD,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,UAAU,CAAW,CAAA,QAAA,EAAW,MAAM,EAAE,CAAC,CAAC;QACtE,OAAO,QAAQ,CAAC,QAAQ,CAAC;IAC7B,CAAC;CACJ","ignoreList":[0]}},
    {"offset": {"line": 265, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 271, "column": 0}, "map": {"version":3,"file":"RecommendationsEndpoints.js","sources":["file:///Users/dezalduasamuel/Desktop/Code/playlist-manager-product/playlist-manager-next/node_modules/.pnpm/%40spotify%2Bweb-api-ts-sdk%401.2.0/node_modules/%40spotify/web-api-ts-sdk/src/endpoints/RecommendationsEndpoints.ts"],"sourcesContent":["import type { Genres, Track } from '../types.js';\nimport EndpointsBase from './EndpointsBase.js';\n\nexport default class RecommendationsEndpoints extends EndpointsBase {\n    public get(request: RecommendationsRequestRequiredArguments | RecommendationsRequest) {\n        const params = this.paramsFor(request);\n        return this.getRequest<RecommendationsResponse>(`recommendations${params}`);\n    }\n\n    public genreSeeds() {\n        return this.getRequest<Genres>('recommendations/available-genre-seeds');\n    }\n}\n\nexport interface RecommendationsRequestRequiredArguments {\n    seed_artists?: string[];\n    seed_genres?: string[];\n    seed_tracks?: string[];\n}\n\nexport interface RecommendationsRequest extends RecommendationsRequestRequiredArguments {\n    limit?: number;\n    market?: string;\n    min_acousticness?: number;\n    max_acousticness?: number;\n    target_acousticness?: number;\n    min_danceability?: number;\n    max_danceability?: number;\n    target_danceability?: number;\n    min_duration_ms?: number;\n    max_duration_ms?: number;\n    target_duration_ms?: number;\n    min_energy?: number;\n    max_energy?: number;\n    target_energy?: number;\n    min_instrumentalness?: number;\n    max_instrumentalness?: number;\n    target_instrumentalness?: number;\n    min_key?: number;\n    max_key?: number;\n    target_key?: number;\n    min_liveness?: number;\n    max_liveness?: number;\n    target_liveness?: number;\n    min_loudness?: number;\n    max_loudness?: number;\n    target_loudness?: number;\n    min_mode?: number;\n    max_mode?: number;\n    target_mode?: number;\n    min_popularity?: number;\n    max_popularity?: number;\n    target_popularity?: number;\n    min_speechiness?: number;\n    max_speechiness?: number;\n    target_speechiness?: number;\n    min_tempo?: number;\n    max_tempo?: number;\n    target_tempo?: number;\n    min_time_signature?: number;\n    max_time_signature?: number;\n    target_time_signature?: number;\n    min_valence?: number;\n    max_valence?: number;\n    target_valence?: number;\n}\n\nexport interface RecommendationsResponse {\n    seeds: RecommendationSeed[];\n    tracks: Track[];\n}\n\nexport interface RecommendationSeed {\n    id: string;\n    href: string;\n    type: string;\n\n    initialPoolSize: number;\n    afterFilteringSize: number;\n    afterRelinkingSize: number;\n}\n"],"names":[],"mappings":";;;AACA,OAAO,aAAa,MAAM,oBAAoB,CAAC;;AAEjC,MAAO,wBAAyB,+RAAQ,UAAa;IACxD,GAAG,CAAC,OAAyE,EAAA;QAChF,MAAM,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;QACvC,OAAO,IAAI,CAAC,UAAU,CAA0B,CAAA,eAAA,EAAkB,MAAM,EAAE,CAAC,CAAC;IAChF,CAAC;IAEM,UAAU,GAAA;QACb,OAAO,IAAI,CAAC,UAAU,CAAS,uCAAuC,CAAC,CAAC;IAC5E,CAAC;CACJ","ignoreList":[0]}},
    {"offset": {"line": 285, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 291, "column": 0}, "map": {"version":3,"file":"MarketsEndpoints.js","sources":["file:///Users/dezalduasamuel/Desktop/Code/playlist-manager-product/playlist-manager-next/node_modules/.pnpm/%40spotify%2Bweb-api-ts-sdk%401.2.0/node_modules/%40spotify/web-api-ts-sdk/src/endpoints/MarketsEndpoints.ts"],"sourcesContent":["import type { Markets } from '../types.js';\nimport EndpointsBase from './EndpointsBase.js';\n\nexport default class MarketsEndpoints extends EndpointsBase {\n    public getAvailableMarkets() {\n        return this.getRequest<Markets>('markets');\n    }\n}\n"],"names":[],"mappings":";;;AACA,OAAO,aAAa,MAAM,oBAAoB,CAAC;;AAEjC,MAAO,gBAAiB,+RAAQ,UAAa;IAChD,mBAAmB,GAAA;QACtB,OAAO,IAAI,CAAC,UAAU,CAAU,SAAS,CAAC,CAAC;IAC/C,CAAC;CACJ","ignoreList":[0]}},
    {"offset": {"line": 301, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 307, "column": 0}, "map": {"version":3,"file":"PlayerEndpoints.js","sources":["file:///Users/dezalduasamuel/Desktop/Code/playlist-manager-product/playlist-manager-next/node_modules/.pnpm/%40spotify%2Bweb-api-ts-sdk%401.2.0/node_modules/%40spotify/web-api-ts-sdk/src/endpoints/PlayerEndpoints.ts"],"sourcesContent":["import type { Devices, Market, MaxInt, PlaybackState, Queue, RecentlyPlayedTracksPage } from '../types.js';\nimport EndpointsBase from './EndpointsBase.js';\n\ninterface QueryRange {\n    timestamp: number;\n    type: \"before\" | \"after\"\n}\n\nexport default class PlayerEndpoints extends EndpointsBase {\n\n    public getPlaybackState(market?: Market, additional_types?: string) {\n        const params = this.paramsFor({ market, additional_types });\n        return this.getRequest<PlaybackState>(`me/player${params}`);\n    }\n\n    public getAvailableDevices() {\n        return this.getRequest<Devices>('me/player/devices');\n    }\n\n    public getCurrentlyPlayingTrack(market?: Market, additional_types?: string) {\n        const params = this.paramsFor({ market, additional_types });\n        return this.getRequest<PlaybackState>(`me/player/currently-playing${params}`);\n    }\n\n    public getRecentlyPlayedTracks(limit?: MaxInt<50>, queryRange?: QueryRange) {\n        const paramObj: any = { limit };\n\n        if (queryRange) {\n            if (queryRange.type === \"before\") {\n                paramObj.before = queryRange.timestamp\n            } else if (queryRange.type === \"after\") {\n                paramObj.after = queryRange.timestamp\n            }\n        }\n\n        const params = this.paramsFor(paramObj);\n        return this.getRequest<RecentlyPlayedTracksPage>(`me/player/recently-played${params}`);\n    }\n\n    public getUsersQueue() {\n        return this.getRequest<Queue>('me/player/queue');\n    }\n\n    public async transferPlayback(device_ids: string[], play?: boolean) {\n        if (device_ids.length > 1) {\n            throw new Error(\"Although an array is accepted, only a single device_id is currently supported. Supplying more than one will return 400 Bad Request\");\n        }\n        await this.putRequest('me/player', { device_ids, play });\n    }\n\n    public async startResumePlayback(device_id: string, context_uri?: string, uris?: string[], offset?: object, positionMs?: number) {\n        const params = this.paramsFor({ device_id });\n        await this.putRequest(`me/player/play${params}`, { context_uri, uris, offset, positionMs });\n    }\n\n    public async pausePlayback(device_id: string) {\n        const params = this.paramsFor({ device_id });\n        await this.putRequest(`me/player/pause${params}`);\n    }\n\n    public async skipToNext(device_id: string) {\n        const params = this.paramsFor({ device_id });\n        await this.postRequest(`me/player/next${params}`);\n    }\n\n    public async skipToPrevious(device_id: string) {\n        const params = this.paramsFor({ device_id });\n        await this.postRequest(`me/player/previous${params}`);\n    }\n\n    public async seekToPosition(position_ms: number, device_id?: string) {\n        const params = this.paramsFor({ position_ms, device_id });\n        await this.putRequest(`me/player/seek${params}`);\n    }\n\n    public async setRepeatMode(state: 'track' | 'context' | 'off', device_id?: string) {\n        const params = this.paramsFor({ state, device_id });\n        await this.putRequest(`me/player/repeat${params}`);\n    }\n\n    public async setPlaybackVolume(volume_percent: number, device_id?: string) {\n        const params = this.paramsFor({ volume_percent, device_id });\n        await this.putRequest(`me/player/volume${params}`);\n    }\n\n    public async togglePlaybackShuffle(state: boolean, device_id?: string) {\n        const params = this.paramsFor({ state, device_id });\n        await this.putRequest(`me/player/shuffle${params}`);\n    }\n\n    public async addItemToPlaybackQueue(uri: string, device_id?: string) {\n        const params = this.paramsFor({ uri, device_id });\n        await this.postRequest(`me/player/queue${params}`);\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 421, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 427, "column": 0}, "map": {"version":3,"file":"PlaylistsEndpoints.js","sources":["file:///Users/dezalduasamuel/Desktop/Code/playlist-manager-product/playlist-manager-next/node_modules/.pnpm/%40spotify%2Bweb-api-ts-sdk%401.2.0/node_modules/%40spotify/web-api-ts-sdk/src/endpoints/PlaylistsEndpoints.ts"],"sourcesContent":["import type { Market, Playlist, MaxInt, Page, Track, SnapshotReference, Image, PlaylistedTrack, QueryAdditionalTypes, TrackItem } from '../types.js';\nimport EndpointsBase from './EndpointsBase.js';\n\nexport default class PlaylistsEndpoints extends EndpointsBase {\n\n    public getPlaylist<AdditionalTypes extends QueryAdditionalTypes | undefined = undefined>(\n        playlist_id: string, market?: Market, fields?: string, additional_types?: AdditionalTypes\n    ) {\n        // TODO: better support for fields\n        const params = this.paramsFor({ market, fields, additional_types: additional_types?.join(',') });\n        return this.getRequest<Playlist<AdditionalTypes extends undefined ? Track : TrackItem>>(`playlists/${playlist_id}${params}`);\n    }\n\n    public getPlaylistItems<AdditionalTypes extends QueryAdditionalTypes | undefined = undefined>(\n        playlist_id: string, market?: Market, fields?: string, limit?: MaxInt<50>, offset?: number, additional_types?: AdditionalTypes\n    ) {\n        // TODO: better support for fields\n        const params = this.paramsFor({ market, fields, limit, offset, additional_types: additional_types?.join(',') });\n        return this.getRequest<Page<PlaylistedTrack<AdditionalTypes extends undefined ? Track : TrackItem>>>(`playlists/${playlist_id}/tracks${params}`);\n    }\n\n    public async changePlaylistDetails(playlist_id: string, request: ChangePlaylistDetailsRequest) {\n        await this.putRequest(`playlists/${playlist_id}`, request);\n    }\n\n    public movePlaylistItems(playlist_id: string, range_start: number, range_length: number, moveToPosition: number) {\n        return this.updatePlaylistItems(playlist_id, {\n            range_start,\n            range_length,\n            insert_before: moveToPosition\n        });\n    }\n\n    public updatePlaylistItems(playlist_id: string, request: UpdatePlaylistItemsRequest) {\n        return this.putRequest<SnapshotReference>(`playlists/${playlist_id}/tracks`, request);\n    }\n\n    public async addItemsToPlaylist(playlist_id: string, uris?: string[], position?: number) {\n        await this.postRequest(`playlists/${playlist_id}/tracks`, { position, uris: uris });\n    }\n\n    public async removeItemsFromPlaylist(playlist_id: string, request: RemovePlaylistItemsRequest) {\n        await this.deleteRequest(`playlists/${playlist_id}/tracks`, request);\n    }\n\n    public getUsersPlaylists(user_id: string, limit?: MaxInt<50>, offset?: number) {\n        const params = this.paramsFor({ limit, offset });\n        return this.getRequest<Page<Playlist>>(`users/${user_id}/playlists${params}`);\n    }\n\n    public createPlaylist(user_id: string, request: CreatePlaylistRequest) {\n        return this.postRequest<Playlist>(`users/${user_id}/playlists`, request);\n    }\n\n    public getPlaylistCoverImage(playlist_id: string) {\n        return this.getRequest<Image[]>(`playlists/${playlist_id}/images`);\n    }\n\n    public async addCustomPlaylistCoverImage(playlist_id: string, imageData: Buffer | HTMLImageElement | HTMLCanvasElement | string) {\n        let base64EncodedJpeg: string = \"\";\n\n        if (imageData instanceof Buffer) {\n            base64EncodedJpeg = imageData.toString(\"base64\");\n        } else if (imageData instanceof HTMLCanvasElement) {\n            base64EncodedJpeg = imageData.toDataURL(\"image/jpeg\").split(';base64,')[1];\n        } else if (imageData instanceof HTMLImageElement) {\n            const canvas = document.createElement(\"canvas\");\n            canvas.width = imageData.width;\n            canvas.height = imageData.height;\n            const ctx = canvas.getContext(\"2d\");\n            if (!ctx) {\n                throw new Error(\"Could not get canvas context\");\n            }\n            ctx.drawImage(imageData, 0, 0);\n            base64EncodedJpeg = canvas.toDataURL(\"image/jpeg\").split(';base64,')[1];\n        } else if (typeof imageData === \"string\") {\n            base64EncodedJpeg = imageData;\n        } else {\n            throw new Error(\"ImageData must be a Buffer, HTMLImageElement, HTMLCanvasElement, or string containing a base64 encoded jpeg\");\n        }\n\n        await this.addCustomPlaylistCoverImageFromBase64String(playlist_id, base64EncodedJpeg);\n    }\n\n    public async addCustomPlaylistCoverImageFromBase64String(playlist_id: string, base64EncodedJpeg: string) {\n        await this.putRequest(`playlists/${playlist_id}/images`, base64EncodedJpeg, \"image/jpeg\");\n    }\n}\n\ninterface RemovePlaylistItemsRequest {\n    tracks: Array<{ uri: string }>;\n    snapshot_id?: string;\n}\n\ninterface UpdatePlaylistItemsRequest {\n    uris?: string[];\n    range_start?: number;\n    insert_before?: number;\n    range_length?: number;\n    snapshot_id?: string;\n}\n\ninterface ChangePlaylistDetailsRequest {\n    name?: string;\n    public?: boolean;\n    collaborative?: boolean;\n    description?: string;\n}\n\n// TODO: deduplicate this from above\ninterface CreatePlaylistRequest {\n    name: string;\n    public?: boolean;\n    collaborative?: boolean;\n    description?: string;\n}\n"],"names":[],"mappings":";;;AACA,OAAO,aAAa,MAAM,oBAAoB,CAAC;AA4Dd;;AA1DnB,MAAO,kBAAmB,SAAQ,gSAAa;IAElD,WAAW,CACd,WAAmB,EAAE,MAAe,EAAE,MAAe,EAAE,gBAAkC,EAAA;QAEzF,kCAAkC;QAClC,MAAM,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC;YAAE,MAAM;YAAE,MAAM;YAAE,gBAAgB,EAAE,gBAAgB,EAAE,IAAI,CAAC,GAAG,CAAC;QAAA,CAAE,CAAC,CAAC;QACjG,OAAO,IAAI,CAAC,UAAU,CAAkE,CAAA,UAAA,EAAa,WAAW,GAAG,MAAM,EAAE,CAAC,CAAC;IACjI,CAAC;IAEM,gBAAgB,CACnB,WAAmB,EAAE,MAAe,EAAE,MAAe,EAAE,KAAkB,EAAE,MAAe,EAAE,gBAAkC,EAAA;QAE9H,kCAAkC;QAClC,MAAM,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC;YAAE,MAAM;YAAE,MAAM;YAAE,KAAK;YAAE,MAAM;YAAE,gBAAgB,EAAE,gBAAgB,EAAE,IAAI,CAAC,GAAG,CAAC;QAAA,CAAE,CAAC,CAAC;QAChH,OAAO,IAAI,CAAC,UAAU,CAA+E,CAAA,UAAA,EAAa,WAAW,CAAA,OAAA,EAAU,MAAM,EAAE,CAAC,CAAC;IACrJ,CAAC;IAEM,KAAK,CAAC,qBAAqB,CAAC,WAAmB,EAAE,OAAqC,EAAA;QACzF,MAAM,IAAI,CAAC,UAAU,CAAC,CAAA,UAAA,EAAa,WAAW,EAAE,EAAE,OAAO,CAAC,CAAC;IAC/D,CAAC;IAEM,iBAAiB,CAAC,WAAmB,EAAE,WAAmB,EAAE,YAAoB,EAAE,cAAsB,EAAA;QAC3G,OAAO,IAAI,CAAC,mBAAmB,CAAC,WAAW,EAAE;YACzC,WAAW;YACX,YAAY;YACZ,aAAa,EAAE,cAAc;SAChC,CAAC,CAAC;IACP,CAAC;IAEM,mBAAmB,CAAC,WAAmB,EAAE,OAAmC,EAAA;QAC/E,OAAO,IAAI,CAAC,UAAU,CAAoB,CAAA,UAAA,EAAa,WAAW,CAAA,OAAA,CAAS,EAAE,OAAO,CAAC,CAAC;IAC1F,CAAC;IAEM,KAAK,CAAC,kBAAkB,CAAC,WAAmB,EAAE,IAAe,EAAE,QAAiB,EAAA;QACnF,MAAM,IAAI,CAAC,WAAW,CAAC,CAAA,UAAA,EAAa,WAAW,CAAA,OAAA,CAAS,EAAE;YAAE,QAAQ;YAAE,IAAI,EAAE,IAAI;QAAA,CAAE,CAAC,CAAC;IACxF,CAAC;IAEM,KAAK,CAAC,uBAAuB,CAAC,WAAmB,EAAE,OAAmC,EAAA;QACzF,MAAM,IAAI,CAAC,aAAa,CAAC,CAAA,UAAA,EAAa,WAAW,CAAA,OAAA,CAAS,EAAE,OAAO,CAAC,CAAC;IACzE,CAAC;IAEM,iBAAiB,CAAC,OAAe,EAAE,KAAkB,EAAE,MAAe,EAAA;QACzE,MAAM,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC;YAAE,KAAK;YAAE,MAAM;QAAA,CAAE,CAAC,CAAC;QACjD,OAAO,IAAI,CAAC,UAAU,CAAiB,CAAA,MAAA,EAAS,OAAO,CAAA,UAAA,EAAa,MAAM,EAAE,CAAC,CAAC;IAClF,CAAC;IAEM,cAAc,CAAC,OAAe,EAAE,OAA8B,EAAA;QACjE,OAAO,IAAI,CAAC,WAAW,CAAW,CAAA,MAAA,EAAS,OAAO,CAAA,UAAA,CAAY,EAAE,OAAO,CAAC,CAAC;IAC7E,CAAC;IAEM,qBAAqB,CAAC,WAAmB,EAAA;QAC5C,OAAO,IAAI,CAAC,UAAU,CAAU,CAAA,UAAA,EAAa,WAAW,CAAA,OAAA,CAAS,CAAC,CAAC;IACvE,CAAC;IAEM,KAAK,CAAC,2BAA2B,CAAC,WAAmB,EAAE,SAAiE,EAAA;QAC3H,IAAI,iBAAiB,GAAW,EAAE,CAAC;QAEnC,IAAI,SAAS,mTAAkB,EAAE;YAC7B,iBAAiB,GAAG,SAAS,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;SACpD,MAAM,IAAI,SAAS,YAAY,iBAAiB,EAAE;YAC/C,iBAAiB,GAAG,SAAS,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;SAC9E,MAAM,IAAI,SAAS,YAAY,gBAAgB,EAAE;YAC9C,MAAM,MAAM,GAAG,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;YAChD,MAAM,CAAC,KAAK,GAAG,SAAS,CAAC,KAAK,CAAC;YAC/B,MAAM,CAAC,MAAM,GAAG,SAAS,CAAC,MAAM,CAAC;YACjC,MAAM,GAAG,GAAG,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;YACpC,IAAI,CAAC,GAAG,EAAE;gBACN,MAAM,IAAI,KAAK,CAAC,8BAA8B,CAAC,CAAC;aACnD;YACD,GAAG,CAAC,SAAS,CAAC,SAAS,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YAC/B,iBAAiB,GAAG,MAAM,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;SAC3E,MAAM,IAAI,OAAO,SAAS,KAAK,QAAQ,EAAE;YACtC,iBAAiB,GAAG,SAAS,CAAC;SACjC,MAAM;YACH,MAAM,IAAI,KAAK,CAAC,6GAA6G,CAAC,CAAC;SAClI;QAED,MAAM,IAAI,CAAC,2CAA2C,CAAC,WAAW,EAAE,iBAAiB,CAAC,CAAC;IAC3F,CAAC;IAEM,KAAK,CAAC,2CAA2C,CAAC,WAAmB,EAAE,iBAAyB,EAAA;QACnG,MAAM,IAAI,CAAC,UAAU,CAAC,CAAA,UAAA,EAAa,WAAW,CAAA,OAAA,CAAS,EAAE,iBAAiB,EAAE,YAAY,CAAC,CAAC;IAC9F,CAAC;CACJ","ignoreList":[0]}},
    {"offset": {"line": 516, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 522, "column": 0}, "map": {"version":3,"file":"SearchEndpoints.js","sources":["file:///Users/dezalduasamuel/Desktop/Code/playlist-manager-product/playlist-manager-next/node_modules/.pnpm/%40spotify%2Bweb-api-ts-sdk%401.2.0/node_modules/%40spotify/web-api-ts-sdk/src/endpoints/SearchEndpoints.ts"],"sourcesContent":["import type { ItemTypes, Market, MaxInt, SearchResults } from '../types.js';\nimport EndpointsBase from './EndpointsBase.js';\n\nexport interface SearchExecutionFunction {\n    <const T extends readonly ItemTypes[]>(q: string, type: T, market?: Market, limit?: MaxInt<50>, offset?: number, include_external?: string): Promise<SearchResults<T>>;\n}\n\nexport default class SearchEndpoints extends EndpointsBase {\n    public async execute<const T extends readonly ItemTypes[]>(q: string, type: T, market?: Market, limit?: MaxInt<50>, offset?: number, include_external?: string) {\n        const params = this.paramsFor({ q, type, market, limit, offset, include_external });\n        return await this.getRequest<SearchResults<T>>(`search${params}`);\n    }\n}\n"],"names":[],"mappings":";;;AACA,OAAO,aAAa,MAAM,oBAAoB,CAAC;;AAMjC,MAAO,eAAgB,+RAAQ,UAAa;IAC/C,KAAK,CAAC,OAAO,CAAuC,CAAS,EAAE,IAAO,EAAE,MAAe,EAAE,KAAkB,EAAE,MAAe,EAAE,gBAAyB,EAAA;QAC1J,MAAM,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC;YAAE,CAAC;YAAE,IAAI;YAAE,MAAM;YAAE,KAAK;YAAE,MAAM;YAAE,gBAAgB;QAAA,CAAE,CAAC,CAAC;QACpF,OAAO,MAAM,IAAI,CAAC,UAAU,CAAmB,CAAA,MAAA,EAAS,MAAM,EAAE,CAAC,CAAC;IACtE,CAAC;CACJ","ignoreList":[0]}},
    {"offset": {"line": 540, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 546, "column": 0}, "map": {"version":3,"file":"ShowsEndpoints.js","sources":["file:///Users/dezalduasamuel/Desktop/Code/playlist-manager-product/playlist-manager-next/node_modules/.pnpm/%40spotify%2Bweb-api-ts-sdk%401.2.0/node_modules/%40spotify/web-api-ts-sdk/src/endpoints/ShowsEndpoints.ts"],"sourcesContent":["import type { Market, Show, Shows, MaxInt, Page, SimplifiedEpisode } from '../types.js';\nimport EndpointsBase from './EndpointsBase.js';\n\nexport default class ShowsEndpoints extends EndpointsBase {\n\n    public get(id: string, market: Market): Promise<Show>;\n    public get(ids: string[], market: Market): Promise<Show[]>\n    public async get(idOrIds: string | string[], market: Market) {\n        if (typeof idOrIds === 'string') {\n            const params = this.paramsFor({ market })\n            return this.getRequest<Show>(`shows/${idOrIds}${params}`);\n        }\n\n        // TODO: only returns 50, validate here\n        const params = this.paramsFor({ ids: idOrIds, market });\n        const response = await this.getRequest<Shows>(`shows${params}`);\n        return response.shows;\n    }\n\n    public episodes(id: string, market?: Market, limit?: MaxInt<50>, offset?: number) {\n        const params = this.paramsFor({ market, limit, offset })\n        return this.getRequest<Page<SimplifiedEpisode>>(`shows/${id}/episodes${params}`);\n    }\n}\n"],"names":[],"mappings":";;;AACA,OAAO,aAAa,MAAM,oBAAoB,CAAC;;AAEjC,MAAO,cAAe,+RAAQ,UAAa;IAI9C,KAAK,CAAC,GAAG,CAAC,OAA0B,EAAE,MAAc,EAAA;QACvD,IAAI,OAAO,OAAO,KAAK,QAAQ,EAAE;YAC7B,MAAM,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC;gBAAE,MAAM;YAAA,CAAE,CAAC,CAAA;YACzC,OAAO,IAAI,CAAC,UAAU,CAAO,CAAA,MAAA,EAAS,OAAO,GAAG,MAAM,EAAE,CAAC,CAAC;SAC7D;QAED,uCAAuC;QACvC,MAAM,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC;YAAE,GAAG,EAAE,OAAO;YAAE,MAAM;QAAA,CAAE,CAAC,CAAC;QACxD,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,UAAU,CAAQ,CAAA,KAAA,EAAQ,MAAM,EAAE,CAAC,CAAC;QAChE,OAAO,QAAQ,CAAC,KAAK,CAAC;IAC1B,CAAC;IAEM,QAAQ,CAAC,EAAU,EAAE,MAAe,EAAE,KAAkB,EAAE,MAAe,EAAA;QAC5E,MAAM,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC;YAAE,MAAM;YAAE,KAAK;YAAE,MAAM;QAAA,CAAE,CAAC,CAAA;QACxD,OAAO,IAAI,CAAC,UAAU,CAA0B,CAAA,MAAA,EAAS,EAAE,CAAA,SAAA,EAAY,MAAM,EAAE,CAAC,CAAC;IACrF,CAAC;CACJ","ignoreList":[0]}},
    {"offset": {"line": 576, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 582, "column": 0}, "map": {"version":3,"file":"TracksEndpoints.js","sources":["file:///Users/dezalduasamuel/Desktop/Code/playlist-manager-product/playlist-manager-next/node_modules/.pnpm/%40spotify%2Bweb-api-ts-sdk%401.2.0/node_modules/%40spotify/web-api-ts-sdk/src/endpoints/TracksEndpoints.ts"],"sourcesContent":["import type { Market, Track, Tracks, AudioFeatures, AudioFeaturesCollection, AudioAnalysis } from '../types.js';\nimport EndpointsBase from './EndpointsBase.js';\n\nexport default class TracksEndpoints extends EndpointsBase {\n\n    public get(id: string, market?: Market): Promise<Track>\n    public get(ids: string[], market?: Market): Promise<Track[]>\n    public async get(idOrIds: string | string[], market?: Market) {\n        if (typeof idOrIds === 'string') {\n            const params = this.paramsFor({ market });\n            return this.getRequest<Track>(`tracks/${idOrIds}${params}`);\n        }\n\n        const params = this.paramsFor({ ids: idOrIds, market });\n        // TODO: only returns top 20, validate here\n        const response = await this.getRequest<Tracks>(`tracks${params}`);\n        return response.tracks;\n    }\n\n    public audioFeatures(id: string): Promise<AudioFeatures>\n    public audioFeatures(ids: string[]): Promise<AudioFeatures[]>\n    public async audioFeatures(idOrIds: string | string[]) {\n        if (typeof idOrIds === 'string') {\n            return this.getRequest<AudioFeatures>(`audio-features/${idOrIds}`);\n        }\n        const params = this.paramsFor({ ids: idOrIds });\n        const response = await this.getRequest<AudioFeaturesCollection>(`audio-features${params}`);\n        return response.audio_features;\n    }\n\n    public audioAnalysis(id: string) {\n        return this.getRequest<AudioAnalysis>(`audio-analysis/${id}`);\n    }\n\n}\n"],"names":[],"mappings":";;;AACA,OAAO,aAAa,MAAM,oBAAoB,CAAC;;AAEjC,MAAO,eAAgB,+RAAQ,UAAa;IAI/C,KAAK,CAAC,GAAG,CAAC,OAA0B,EAAE,MAAe,EAAA;QACxD,IAAI,OAAO,OAAO,KAAK,QAAQ,EAAE;YAC7B,MAAM,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC;gBAAE,MAAM;YAAA,CAAE,CAAC,CAAC;YAC1C,OAAO,IAAI,CAAC,UAAU,CAAQ,CAAA,OAAA,EAAU,OAAO,GAAG,MAAM,EAAE,CAAC,CAAC;SAC/D;QAED,MAAM,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC;YAAE,GAAG,EAAE,OAAO;YAAE,MAAM;QAAA,CAAE,CAAC,CAAC;QACxD,2CAA2C;QAC3C,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,UAAU,CAAS,CAAA,MAAA,EAAS,MAAM,EAAE,CAAC,CAAC;QAClE,OAAO,QAAQ,CAAC,MAAM,CAAC;IAC3B,CAAC;IAIM,KAAK,CAAC,aAAa,CAAC,OAA0B,EAAA;QACjD,IAAI,OAAO,OAAO,KAAK,QAAQ,EAAE;YAC7B,OAAO,IAAI,CAAC,UAAU,CAAgB,CAAA,eAAA,EAAkB,OAAO,EAAE,CAAC,CAAC;SACtE;QACD,MAAM,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC;YAAE,GAAG,EAAE,OAAO;QAAA,CAAE,CAAC,CAAC;QAChD,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,UAAU,CAA0B,CAAA,cAAA,EAAiB,MAAM,EAAE,CAAC,CAAC;QAC3F,OAAO,QAAQ,CAAC,cAAc,CAAC;IACnC,CAAC;IAEM,aAAa,CAAC,EAAU,EAAA;QAC3B,OAAO,IAAI,CAAC,UAAU,CAAgB,CAAA,eAAA,EAAkB,EAAE,EAAE,CAAC,CAAC;IAClE,CAAC;CAEJ","ignoreList":[0]}},
    {"offset": {"line": 617, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 623, "column": 0}, "map": {"version":3,"file":"IAuthStrategy.js","sources":["file:///Users/dezalduasamuel/Desktop/Code/playlist-manager-product/playlist-manager-next/node_modules/.pnpm/%40spotify%2Bweb-api-ts-sdk%401.2.0/node_modules/%40spotify/web-api-ts-sdk/src/auth/IAuthStrategy.ts"],"sourcesContent":["import type { AccessToken, SdkConfiguration } from \"../types.js\";\n\nexport const emptyAccessToken: AccessToken = { access_token: \"emptyAccessToken\", token_type: \"\", expires_in: 0, refresh_token: \"\", expires: -1 };\nexport function isEmptyAccessToken(value: any): boolean {\n    return value === emptyAccessToken;\n}\n\nexport default interface IAuthStrategy {\n    setConfiguration(configuration: SdkConfiguration): void;\n    getOrCreateAccessToken(): Promise<AccessToken>;\n    getAccessToken(): Promise<AccessToken | null>;\n    removeAccessToken(): void;\n}\n"],"names":[],"mappings":";;;;AAEO,MAAM,gBAAgB,GAAgB;IAAE,YAAY,EAAE,kBAAkB;IAAE,UAAU,EAAE,EAAE;IAAE,UAAU,EAAE,CAAC;IAAE,aAAa,EAAE,EAAE;IAAE,OAAO,EAAE,CAAC,CAAC;AAAA,CAAE,CAAC;AAC3I,SAAU,kBAAkB,CAAC,KAAU;IACzC,OAAO,KAAK,KAAK,gBAAgB,CAAC;AACtC,CAAC","ignoreList":[0]}},
    {"offset": {"line": 637, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 643, "column": 0}, "map": {"version":3,"file":"UsersEndpoints.js","sources":["file:///Users/dezalduasamuel/Desktop/Code/playlist-manager-product/playlist-manager-next/node_modules/.pnpm/%40spotify%2Bweb-api-ts-sdk%401.2.0/node_modules/%40spotify/web-api-ts-sdk/src/endpoints/UsersEndpoints.ts"],"sourcesContent":["import type { User } from '../types.js';\nimport EndpointsBase from './EndpointsBase.js';\n\nexport default class UsersEndpoints extends EndpointsBase {\n\n    public profile(userId: string) {\n        return this.getRequest<User>(`users/${userId}`);\n    }\n}\n"],"names":[],"mappings":";;;AACA,OAAO,aAAa,MAAM,oBAAoB,CAAC;;AAEjC,MAAO,cAAe,+RAAQ,UAAa;IAE9C,OAAO,CAAC,MAAc,EAAA;QACzB,OAAO,IAAI,CAAC,UAAU,CAAO,CAAA,MAAA,EAAS,MAAM,EAAE,CAAC,CAAC;IACpD,CAAC;CACJ","ignoreList":[0]}},
    {"offset": {"line": 653, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 659, "column": 0}, "map": {"version":3,"file":"CurrentUserEndpoints.js","sources":["file:///Users/dezalduasamuel/Desktop/Code/playlist-manager-product/playlist-manager-next/node_modules/.pnpm/%40spotify%2Bweb-api-ts-sdk%401.2.0/node_modules/%40spotify/web-api-ts-sdk/src/endpoints/CurrentUserEndpoints.ts"],"sourcesContent":["import { SpotifyApi } from '../SpotifyApi.js';\nimport type { User, Page, Artist, Track, MaxInt, FollowedArtists, Market, SavedAlbum, SimplifiedAudiobook, SimplifiedPlaylist, SavedEpisode, SavedShow, SavedTrack, UserProfile } from '../types.js';\nimport EndpointsBase from './EndpointsBase.js';\n\nexport default class CurrentUserEndpoints extends EndpointsBase {\n    public albums: CurrentUserAlbumsEndpoints;\n    public audiobooks: CurrentUserAudiobooksEndpoints;\n    public episodes: CurrentUserEpisodesEndpoints;\n    public playlists: CurrentUserPlaylistsEndpoints;\n    public shows: CurrentUserShowsEndpoints;\n    public tracks: CurrentUserTracksEndpoints;\n\n    constructor(api: SpotifyApi) {\n        super(api);\n\n        this.albums = new CurrentUserAlbumsEndpoints(api);\n        this.audiobooks = new CurrentUserAudiobooksEndpoints(api);\n        this.episodes = new CurrentUserEpisodesEndpoints(api);\n        this.playlists = new CurrentUserPlaylistsEndpoints(api);\n        this.shows = new CurrentUserShowsEndpoints(api);\n        this.tracks = new CurrentUserTracksEndpoints(api);\n    }\n\n    public profile() {\n        return this.getRequest<UserProfile>('me');\n    }\n\n    public topItems<T extends \"artists\" | \"tracks\">(type: T, time_range?: 'short_term' | 'medium_term' | 'long_term', limit?: MaxInt<50>, offset?: number) {\n        const params = this.paramsFor({ time_range, limit, offset });\n        return this.getRequest<Page<T extends \"artists\" ? Artist : Track>>(`me/top/${type}${params}`);\n    }\n\n    public followedArtists(after?: string, limit?: MaxInt<50>) {\n        const params = this.paramsFor({ type: \"artist\", after, limit });\n        return this.getRequest<FollowedArtists>(`me/following${params}`);\n    }\n\n    public async followArtistsOrUsers(ids: string[], type: 'artist' | 'user') {\n        const params = this.paramsFor({ type });\n        await this.putRequest(`me/following${params}`, { ids });\n    }\n\n    public async unfollowArtistsOrUsers(ids: string[], type: 'artist' | 'user') {\n        const params = this.paramsFor({ type });\n        await this.deleteRequest(`me/following${params}`, { ids });\n    }\n\n    public followsArtistsOrUsers(ids: string[], type: 'artist' | 'user') {\n        const params = this.paramsFor({ ids, type });\n        return this.getRequest<boolean[]>(`me/following/contains${params}`);\n    }\n}\n\n\nclass CurrentUserAlbumsEndpoints extends EndpointsBase {\n    public savedAlbums(limit?: MaxInt<50>, offset?: number, market?: Market) {\n        const params = this.paramsFor({ limit, offset, market });\n        return this.getRequest<Page<SavedAlbum>>(`me/albums${params}`);\n    }\n\n    public async saveAlbums(ids: string[]) {\n        await this.putRequest('me/albums', ids);\n    }\n\n    public async removeSavedAlbums(ids: string[]) {\n        await this.deleteRequest('me/albums', ids);\n    }\n\n    public hasSavedAlbums(ids: string[]) {\n        const params = this.paramsFor({ ids });\n        return this.getRequest<boolean[]>(`me/albums/contains${params}`);\n    }\n}\n\nclass CurrentUserAudiobooksEndpoints extends EndpointsBase {\n    public savedAudiobooks(limit?: MaxInt<50>, offset?: number) {\n        const params = this.paramsFor({ limit, offset });\n        return this.getRequest<Page<SimplifiedAudiobook>>(`me/audiobooks${params}`);\n    }\n\n    public async saveAudiobooks(ids: string[]) {\n        await this.putRequest('me/audiobooks', ids);\n    }\n\n    public async removeSavedAudiobooks(ids: string[]) {\n        await this.deleteRequest('me/audiobooks', ids);\n    }\n\n    public hasSavedAudiobooks(ids: string[]) {\n        const params = this.paramsFor({ ids });\n        return this.getRequest<boolean[]>(`me/audiobooks/contains${params}`);\n    }\n}\n\nclass CurrentUserEpisodesEndpoints extends EndpointsBase {\n    public savedEpisodes(market?: Market, limit?: MaxInt<50>, offset?: number) {\n        const params = this.paramsFor({ market, limit, offset });\n        return this.getRequest<Page<SavedEpisode>>(`me/episodes${params}`);\n    }\n\n    public async saveEpisodes(ids: string[]) {\n        await this.putRequest(`me/episodes`, ids)\n    }\n\n    public async removeSavedEpisodes(ids: string[]) {\n        await this.deleteRequest(`me/episodes`, ids)\n    }\n\n    public hasSavedEpisodes(ids: string[]) {\n        const params = this.paramsFor({ ids });\n        return this.getRequest<boolean[]>(`me/episodes/contains${params}`);\n    }\n}\n\nclass CurrentUserPlaylistsEndpoints extends EndpointsBase {\n    public playlists(limit?: MaxInt<50>, offset?: number) {\n        const params = this.paramsFor({ limit, offset });\n        return this.getRequest<Page<SimplifiedPlaylist>>(`me/playlists${params}`);\n    }\n\n    public async follow(playlist_id: string) {\n        await this.putRequest(`playlists/${playlist_id}/followers`);\n    }\n\n    public async unfollow(playlist_id: string) {\n        await this.deleteRequest(`playlists/${playlist_id}/followers`);\n    }\n\n    public isFollowing(playlistId: string, ids: string[]) {\n        const params = this.paramsFor({ ids });\n        return this.getRequest<boolean[]>(`playlists/${playlistId}/followers/contains${params}`)\n    }\n}\n\nclass CurrentUserShowsEndpoints extends EndpointsBase {\n    public savedShows(limit?: MaxInt<50>, offset?: number) {\n        const params = this.paramsFor({ limit, offset })\n        return this.getRequest<Page<SavedShow>>(`me/shows${params}`);\n    }\n\n    public saveShows(ids: string[]) {\n        const params = this.paramsFor({ ids });\n        return this.putRequest(`me/shows${params}`);\n    }\n\n    public removeSavedShows(ids: string[], market?: Market) {\n        const params = this.paramsFor({ ids, market });\n        return this.deleteRequest(`me/shows${params}`);\n    }\n\n    public hasSavedShow(ids: string[]) {\n        const params = this.paramsFor({ ids });\n        return this.getRequest<boolean[]>(`me/shows/contains${params}`);\n    }\n}\n\nclass CurrentUserTracksEndpoints extends EndpointsBase {\n    public savedTracks(limit?: MaxInt<50>, offset?: number, market?: Market) {\n        const params = this.paramsFor({ limit, offset, market });\n        return this.getRequest<Page<SavedTrack>>(`me/tracks${params}`);\n    }\n    public async saveTracks(ids: string[]) {\n        await this.putRequest('me/tracks', ids);\n    }\n\n    public async removeSavedTracks(ids: string[]) {\n        await this.deleteRequest('me/tracks', ids);\n    }\n\n    public hasSavedTracks(ids: string[]) {\n        const params = this.paramsFor({ ids });\n        return this.getRequest<boolean[]>(`me/tracks/contains${params}`);\n    }\n}\n\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 859, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 865, "column": 0}, "map": {"version":3,"file":"Crypto.js","sources":["file:///Users/dezalduasamuel/Desktop/Code/playlist-manager-product/playlist-manager-next/node_modules/.pnpm/%40spotify%2Bweb-api-ts-sdk%401.2.0/node_modules/%40spotify/web-api-ts-sdk/src/auth/Crypto.ts"],"sourcesContent":["export class Crypto {\n    public static get current() {\n        return this.hasSubtleCrypto ? window.crypto : this.tryLoadNodeWebCrypto();\n    }\n\n    private static get hasSubtleCrypto() {\n        return typeof window !== 'undefined' && typeof window.crypto !== 'undefined' && typeof window.crypto.subtle !== 'undefined';\n    }\n\n    private static tryLoadNodeWebCrypto() {\n        try {\n            // Deliberately avoid bundling for browsers depending\n            // on node by doing this require during execution.\n            const { webcrypto } = require('crypto');\n            return webcrypto;\n        } catch (e) {\n            throw e;\n        }\n    }\n}\n"],"names":[],"mappings":";;;AAAM,MAAO,MAAM;IACR,MAAM,KAAK,OAAO,GAAA;QACrB,OAAO,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,oBAAoB,EAAE,CAAC;IAC9E,CAAC;IAEO,MAAM,KAAK,eAAe,GAAA;QAC9B,OAAO,OAAO,MAAM,KAAK,WAAW,IAAI,OAAO,MAAM,CAAC,MAAM,KAAK,WAAW,IAAI,OAAO,MAAM,CAAC,MAAM,CAAC,MAAM,KAAK,WAAW,CAAC;IAChI,CAAC;IAEO,MAAM,CAAC,oBAAoB,GAAA;QAC/B,IAAI;YACA,qDAAqD;YACrD,kDAAkD;YAClD,MAAM,EAAE,SAAS,EAAE,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;YACxC,OAAO,SAAS,CAAC;SACpB,CAAC,OAAO,CAAC,EAAE;YACR,MAAM,CAAC,CAAC;SACX;IACL,CAAC;CACJ","ignoreList":[0]}},
    {"offset": {"line": 886, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 892, "column": 0}, "map": {"version":3,"file":"AccessTokenHelpers.js","sources":["file:///Users/dezalduasamuel/Desktop/Code/playlist-manager-product/playlist-manager-next/node_modules/.pnpm/%40spotify%2Bweb-api-ts-sdk%401.2.0/node_modules/%40spotify/web-api-ts-sdk/src/auth/AccessTokenHelpers.ts"],"sourcesContent":["import type { AccessToken, ICachable } from \"../types.js\";\nimport { Crypto } from \"./Crypto.js\";\n\nexport default class AccessTokenHelpers {\n    public static async refreshCachedAccessToken(clientId: string, item: AccessToken) {\n        const updated = await AccessTokenHelpers.refreshToken(clientId, item.refresh_token);\n        return AccessTokenHelpers.toCachable(updated);\n    }\n\n    public static toCachable(item: AccessToken): ICachable & AccessToken {\n        if (item.expires && item.expires === -1) {\n            return item;\n        }\n\n        return { ...item, expires: this.calculateExpiry(item) };\n    }\n\n    public static calculateExpiry(item: AccessToken) {\n        return Date.now() + (item.expires_in * 1000);\n    }\n\n    private static async refreshToken(clientId: string, refreshToken: string): Promise<AccessToken> {\n        const params = new URLSearchParams();\n        params.append(\"client_id\", clientId);\n        params.append(\"grant_type\", \"refresh_token\");\n        params.append(\"refresh_token\", refreshToken);\n\n        const result = await fetch(\"https://accounts.spotify.com/api/token\", {\n            method: \"POST\",\n            headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\n            body: params\n        });\n\n        const text = await result.text();\n\n        if (!result.ok) {\n            throw new Error(`Failed to refresh token: ${result.statusText}, ${text}`);\n        }\n\n        const json: AccessToken = JSON.parse(text);\n        return json;\n    }\n\n    public static generateCodeVerifier(length: number) {\n        let text = '';\n        let possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\n        for (let i = 0; i < length; i++) {\n            text += possible.charAt(Math.floor(Math.random() * possible.length));\n        }\n        return text;\n    }\n\n    public static async generateCodeChallenge(codeVerifier: string) {\n        const data = new TextEncoder().encode(codeVerifier);\n        const digest = await Crypto.current.subtle.digest('SHA-256', data);\n\n        const digestBytes = [...new Uint8Array(digest)];\n        const hasBuffer = typeof Buffer !== 'undefined';\n\n        const digestAsBase64 = hasBuffer\n            ? Buffer.from(digest).toString('base64')\n            : btoa(String.fromCharCode.apply(null, digestBytes));\n\n        return digestAsBase64\n            .replace(/\\+/g, '-')\n            .replace(/\\//g, '_')\n            .replace(/=+$/, '');\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 953, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 959, "column": 0}, "map": {"version":3,"file":"ClientCredentialsStrategy.js","sources":["file:///Users/dezalduasamuel/Desktop/Code/playlist-manager-product/playlist-manager-next/node_modules/.pnpm/%40spotify%2Bweb-api-ts-sdk%401.2.0/node_modules/%40spotify/web-api-ts-sdk/src/auth/ClientCredentialsStrategy.ts"],"sourcesContent":["import type { SdkConfiguration, ICachingStrategy, AccessToken } from \"../types.js\";\nimport AccessTokenHelpers from \"./AccessTokenHelpers.js\";\nimport IAuthStrategy from \"./IAuthStrategy.js\";\n\nexport default class ClientCredentialsStrategy implements IAuthStrategy {\n\n    private static readonly cacheKey = \"spotify-sdk:ClientCredentialsStrategy:token\";\n    private configuration: SdkConfiguration | null = null;\n    private get cache(): ICachingStrategy { return this.configuration!.cachingStrategy; }\n\n    constructor(\n        private clientId: string,\n        private clientSecret: string,\n        private scopes: string[] = []\n    ) {\n    }\n\n    public setConfiguration(configuration: SdkConfiguration): void {\n        this.configuration = configuration;\n    }\n\n    public async getOrCreateAccessToken(): Promise<AccessToken> {\n        const token = await this.cache.getOrCreate<AccessToken>(\n            ClientCredentialsStrategy.cacheKey,\n            async () => {\n                const token = await this.getTokenFromApi();\n                return AccessTokenHelpers.toCachable(token);\n            },\n            async (_) => {\n                const refreshed = await this.getTokenFromApi();\n                return AccessTokenHelpers.toCachable(refreshed);\n            }\n        );\n\n        return token;\n    }\n\n    public async getAccessToken(): Promise<AccessToken | null> {\n        const token = await this.cache.get<AccessToken>(ClientCredentialsStrategy.cacheKey);\n        return token;\n    }\n\n    public removeAccessToken(): void {\n        this.cache.remove(ClientCredentialsStrategy.cacheKey);\n    }\n\n    private async getTokenFromApi(): Promise<AccessToken> {\n        const options = {\n            grant_type: 'client_credentials',\n            scope: this.scopes.join(' ')\n        } as any;\n\n        const bodyAsString = Object.keys(options).map(key => key + '=' + options[key]).join('&');\n        const hasBuffer = typeof Buffer !== 'undefined';\n        const credentials = `${this.clientId}:${this.clientSecret}`;\n\n        const basicAuth = hasBuffer\n            ? Buffer.from(credentials).toString('base64')\n            : btoa(credentials);\n\n        const result = await fetch(\"https://accounts.spotify.com/api/token\", {\n            method: 'POST',\n            headers: {\n                \"Content-Type\": \"application/x-www-form-urlencoded\",\n                \"Authorization\": `Basic ${basicAuth}`\n            },\n            body: bodyAsString\n        });\n\n        if (result.status !== 200) {\n            throw new Error(\"Failed to get access token.\");\n        }\n\n        const json = await result.json();\n        return json;\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 1023, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1029, "column": 0}, "map": {"version":3,"file":"ImplicitGrantStrategy.js","sources":["file:///Users/dezalduasamuel/Desktop/Code/playlist-manager-product/playlist-manager-next/node_modules/.pnpm/%40spotify%2Bweb-api-ts-sdk%401.2.0/node_modules/%40spotify/web-api-ts-sdk/src/auth/ImplicitGrantStrategy.ts"],"sourcesContent":["import type { SdkConfiguration, AccessToken, ICachingStrategy } from \"../types.js\";\nimport AccessTokenHelpers from \"./AccessTokenHelpers.js\";\nimport IAuthStrategy, { emptyAccessToken } from \"./IAuthStrategy.js\";\n\nexport default class ImplicitGrantStrategy implements IAuthStrategy {\n\n    private static readonly cacheKey = \"spotify-sdk:ImplicitGrantStrategy:token\";\n    private configuration: SdkConfiguration | null = null;\n    private get cache(): ICachingStrategy { return this.configuration!.cachingStrategy; }\n\n    constructor(\n        private clientId: string,\n        private redirectUri: string,\n        private scopes: string[]\n    ) {\n    }\n\n    public setConfiguration(configuration: SdkConfiguration): void {\n        this.configuration = configuration;\n    }\n\n    public async getOrCreateAccessToken(): Promise<AccessToken> {\n        const token = await this.cache.getOrCreate<AccessToken>(\n            ImplicitGrantStrategy.cacheKey,\n            async () => {\n                const token = await this.redirectOrVerifyToken();\n                return AccessTokenHelpers.toCachable(token);\n            }, async (expiring) => {\n                return AccessTokenHelpers.refreshCachedAccessToken(this.clientId, expiring);\n            },\n        );\n\n        return token;\n    }\n\n    public async getAccessToken(): Promise<AccessToken | null> {\n        const token = await this.cache.get<AccessToken>(ImplicitGrantStrategy.cacheKey);\n        return token;\n    }\n\n    public removeAccessToken(): void {\n        this.cache.remove(ImplicitGrantStrategy.cacheKey);\n    }\n\n    private async redirectOrVerifyToken(): Promise<AccessToken> {\n        const hashParams = new URLSearchParams(window.location.hash.substring(1));\n        const accessToken = hashParams.get(\"access_token\");\n\n        if (accessToken) {\n            return Promise.resolve({\n                access_token: accessToken,\n                token_type: hashParams.get(\"token_type\") ?? \"\",\n                expires_in: parseInt(hashParams.get(\"expires_in\") ?? \"0\"),\n                refresh_token: hashParams.get(\"refresh_token\") ?? \"\",\n                expires: Number(hashParams.get(\"expires\")) || 0\n            });\n        }\n\n        const scopes = this.scopes ?? [];\n        var scope = scopes.join(' ');\n\n        const params = new URLSearchParams();\n        params.append(\"client_id\", this.clientId);\n        params.append(\"response_type\", \"token\");\n        params.append(\"redirect_uri\", this.redirectUri);\n        params.append(\"scope\", scope);\n\n        const authUrl = 'https://accounts.spotify.com/authorize?' + params.toString();\n\n        this.configuration!.redirectionStrategy.redirect(authUrl);\n        return emptyAccessToken;\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 1093, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1099, "column": 0}, "map": {"version":3,"file":"AuthorizationCodeWithPKCEStrategy.js","sources":["file:///Users/dezalduasamuel/Desktop/Code/playlist-manager-product/playlist-manager-next/node_modules/.pnpm/%40spotify%2Bweb-api-ts-sdk%401.2.0/node_modules/%40spotify/web-api-ts-sdk/src/auth/AuthorizationCodeWithPKCEStrategy.ts"],"sourcesContent":["import type { ICachable, SdkConfiguration, AccessToken, ICachingStrategy } from \"../types.js\";\nimport AccessTokenHelpers from \"./AccessTokenHelpers.js\";\nimport IAuthStrategy, { emptyAccessToken } from \"./IAuthStrategy.js\";\n\ninterface CachedVerifier extends ICachable {\n    verifier: string;\n    expiresOnAccess: boolean;\n}\n\nexport default class AuthorizationCodeWithPKCEStrategy implements IAuthStrategy {\n\n    private static readonly cacheKey = \"spotify-sdk:AuthorizationCodeWithPKCEStrategy:token\";\n    private configuration: SdkConfiguration | null = null;\n    protected get cache(): ICachingStrategy { return this.configuration!.cachingStrategy; }\n\n    constructor(\n        protected clientId: string,\n        protected redirectUri: string,\n        protected scopes: string[]\n    ) {\n    }\n\n    public setConfiguration(configuration: SdkConfiguration): void {\n        this.configuration = configuration;\n    }\n\n    public async getOrCreateAccessToken(): Promise<AccessToken> {\n        const token = await this.cache.getOrCreate<AccessToken>(\n            AuthorizationCodeWithPKCEStrategy.cacheKey,\n            async () => {\n                const token = await this.redirectOrVerifyToken();\n                return AccessTokenHelpers.toCachable(token);\n            }, async (expiring) => {\n                return AccessTokenHelpers.refreshCachedAccessToken(this.clientId, expiring);\n            },\n        );\n\n        return token;\n    }\n\n    public async getAccessToken(): Promise<AccessToken | null> {\n        const token = await this.cache.get<AccessToken>(AuthorizationCodeWithPKCEStrategy.cacheKey);\n        return token;\n    }\n\n    public removeAccessToken(): void {\n        this.cache.remove(AuthorizationCodeWithPKCEStrategy.cacheKey);\n    }\n\n    private async redirectOrVerifyToken(): Promise<AccessToken> {\n        const hashParams = new URLSearchParams(window.location.search);\n        const code = hashParams.get(\"code\");\n\n        if (code) {\n            const token = await this.verifyAndExchangeCode(code);\n            this.removeCodeFromUrl();\n            return token;\n        }\n\n        this.redirectToSpotify();\n        return emptyAccessToken; // Redirected away at this point, just make TypeScript happy :)         \n    }\n\n    private async redirectToSpotify() {\n        const verifier = AccessTokenHelpers.generateCodeVerifier(128);\n        const challenge = await AccessTokenHelpers.generateCodeChallenge(verifier);\n\n        const singleUseVerifier: CachedVerifier = { verifier, expiresOnAccess: true };\n        this.cache.setCacheItem(\"spotify-sdk:verifier\", singleUseVerifier);\n\n        const redirectTarget = await this.generateRedirectUrlForUser(this.scopes, challenge);\n        await this.configuration!.redirectionStrategy.redirect(redirectTarget);\n    }\n\n    private async verifyAndExchangeCode(code: string) {\n        const cachedItem = await this.cache.get<CachedVerifier>(\"spotify-sdk:verifier\");\n        const verifier = cachedItem?.verifier;\n\n        if (!verifier) {\n            throw new Error(\"No verifier found in cache - can't validate query string callback parameters.\");\n        }\n\n        await this.configuration!.redirectionStrategy.onReturnFromRedirect();\n        return await this.exchangeCodeForToken(code, verifier!);\n    }\n\n    private removeCodeFromUrl() {\n        const url = new URL(window.location.href);\n        url.searchParams.delete(\"code\");\n\n        const newUrl = url.search ? url.href : url.href.replace('?', '');\n        window.history.replaceState({}, document.title, newUrl);\n    }\n\n    protected async generateRedirectUrlForUser(scopes: string[], challenge: string) {\n        const scope = scopes.join(' ');\n\n        const params = new URLSearchParams();\n        params.append(\"client_id\", this.clientId);\n        params.append(\"response_type\", \"code\");\n        params.append(\"redirect_uri\", this.redirectUri);\n        params.append(\"scope\", scope);\n        params.append(\"code_challenge_method\", \"S256\");\n        params.append(\"code_challenge\", challenge);\n\n        return `https://accounts.spotify.com/authorize?${params.toString()}`;\n    }\n\n    protected async exchangeCodeForToken(code: string, verifier: string): Promise<AccessToken> {\n        const params = new URLSearchParams();\n        params.append(\"client_id\", this.clientId);\n        params.append(\"grant_type\", \"authorization_code\");\n        params.append(\"code\", code);\n        params.append(\"redirect_uri\", this.redirectUri);\n        params.append(\"code_verifier\", verifier!);\n\n        const result = await fetch(\"https://accounts.spotify.com/api/token\", {\n            method: \"POST\",\n            headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\n            body: params\n        });\n\n        const text = await result.text();\n\n        if (!result.ok) {\n            throw new Error(`Failed to exchange code for token: ${result.statusText}, ${text}`);\n        }\n\n        const json: AccessToken = JSON.parse(text);\n        return json;\n    }\n\n}\n\n"],"names":[],"mappings":";;;AACA,OAAO,kBAAkB,MAAM,yBAAyB,CAAC;AACzD,OAAsB,EAAE,gBAAgB,EAAE,MAAM,oBAAoB,CAAC;;;AAOvD,MAAO,iCAAiC;IAOpC,SAAA;IACA,YAAA;IACA,OAAA;IAPN,MAAM,CAAU,QAAQ,GAAG,qDAAqD,CAAC;IACjF,aAAa,GAA4B,IAAI,CAAC;IACtD,IAAc,KAAK,GAAA;QAAuB,OAAO,IAAI,CAAC,aAAc,CAAC,eAAe,CAAC;IAAC,CAAC;IAEvF,YACc,QAAgB,EAChB,WAAmB,EACnB,MAAgB,CAAA;QAFhB,IAAA,CAAA,QAAQ,GAAR,QAAQ,CAAQ;QAChB,IAAA,CAAA,WAAW,GAAX,WAAW,CAAQ;QACnB,IAAA,CAAA,MAAM,GAAN,MAAM,CAAU;IAE9B,CAAC;IAEM,gBAAgB,CAAC,aAA+B,EAAA;QACnD,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;IACvC,CAAC;IAEM,KAAK,CAAC,sBAAsB,GAAA;QAC/B,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,WAAW,CACtC,iCAAiC,CAAC,QAAQ,EAC1C,KAAK,IAAI,EAAE;YACP,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,qBAAqB,EAAE,CAAC;YACjD,6RAAO,UAAkB,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;QAChD,CAAC,EAAE,KAAK,EAAE,QAAQ,EAAE,EAAE;YAClB,6RAAO,UAAkB,CAAC,wBAAwB,CAAC,IAAI,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;QAChF,CAAC,CACJ,CAAC;QAEF,OAAO,KAAK,CAAC;IACjB,CAAC;IAEM,KAAK,CAAC,cAAc,GAAA;QACvB,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,GAAG,CAAc,iCAAiC,CAAC,QAAQ,CAAC,CAAC;QAC5F,OAAO,KAAK,CAAC;IACjB,CAAC;IAEM,iBAAiB,GAAA;QACpB,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,iCAAiC,CAAC,QAAQ,CAAC,CAAC;IAClE,CAAC;IAEO,KAAK,CAAC,qBAAqB,GAAA;QAC/B,MAAM,UAAU,GAAG,IAAI,eAAe,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QAC/D,MAAM,IAAI,GAAG,UAAU,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QAEpC,IAAI,IAAI,EAAE;YACN,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,CAAC;YACrD,IAAI,CAAC,iBAAiB,EAAE,CAAC;YACzB,OAAO,KAAK,CAAC;SAChB;QAED,IAAI,CAAC,iBAAiB,EAAE,CAAC;QACzB,wRAAO,mBAAgB,CAAC,CAAC,wEAAwE;IACrG,CAAC;IAEO,KAAK,CAAC,iBAAiB,GAAA;QAC3B,MAAM,QAAQ,yRAAG,UAAkB,CAAC,oBAAoB,CAAC,GAAG,CAAC,CAAC;QAC9D,MAAM,SAAS,GAAG,4RAAM,UAAkB,CAAC,qBAAqB,CAAC,QAAQ,CAAC,CAAC;QAE3E,MAAM,iBAAiB,GAAmB;YAAE,QAAQ;YAAE,eAAe,EAAE,IAAI;QAAA,CAAE,CAAC;QAC9E,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,sBAAsB,EAAE,iBAAiB,CAAC,CAAC;QAEnE,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,0BAA0B,CAAC,IAAI,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;QACrF,MAAM,IAAI,CAAC,aAAc,CAAC,mBAAmB,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC;IAC3E,CAAC;IAEO,KAAK,CAAC,qBAAqB,CAAC,IAAY,EAAA;QAC5C,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,GAAG,CAAiB,sBAAsB,CAAC,CAAC;QAChF,MAAM,QAAQ,GAAG,UAAU,EAAE,QAAQ,CAAC;QAEtC,IAAI,CAAC,QAAQ,EAAE;YACX,MAAM,IAAI,KAAK,CAAC,+EAA+E,CAAC,CAAC;SACpG;QAED,MAAM,IAAI,CAAC,aAAc,CAAC,mBAAmB,CAAC,oBAAoB,EAAE,CAAC;QACrE,OAAO,MAAM,IAAI,CAAC,oBAAoB,CAAC,IAAI,EAAE,QAAS,CAAC,CAAC;IAC5D,CAAC;IAEO,iBAAiB,GAAA;QACrB,MAAM,GAAG,GAAG,IAAI,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QAC1C,GAAG,CAAC,YAAY,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QAEhC,MAAM,MAAM,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;QACjE,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,CAAA,CAAE,EAAE,QAAQ,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;IAC5D,CAAC;IAES,KAAK,CAAC,0BAA0B,CAAC,MAAgB,EAAE,SAAiB,EAAA;QAC1E,MAAM,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAE/B,MAAM,MAAM,GAAG,IAAI,eAAe,EAAE,CAAC;QACrC,MAAM,CAAC,MAAM,CAAC,WAAW,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC1C,MAAM,CAAC,MAAM,CAAC,eAAe,EAAE,MAAM,CAAC,CAAC;QACvC,MAAM,CAAC,MAAM,CAAC,cAAc,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;QAChD,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;QAC9B,MAAM,CAAC,MAAM,CAAC,uBAAuB,EAAE,MAAM,CAAC,CAAC;QAC/C,MAAM,CAAC,MAAM,CAAC,gBAAgB,EAAE,SAAS,CAAC,CAAC;QAE3C,OAAO,CAAA,uCAAA,EAA0C,MAAM,CAAC,QAAQ,EAAE,EAAE,CAAC;IACzE,CAAC;IAES,KAAK,CAAC,oBAAoB,CAAC,IAAY,EAAE,QAAgB,EAAA;QAC/D,MAAM,MAAM,GAAG,IAAI,eAAe,EAAE,CAAC;QACrC,MAAM,CAAC,MAAM,CAAC,WAAW,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC1C,MAAM,CAAC,MAAM,CAAC,YAAY,EAAE,oBAAoB,CAAC,CAAC;QAClD,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;QAC5B,MAAM,CAAC,MAAM,CAAC,cAAc,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;QAChD,MAAM,CAAC,MAAM,CAAC,eAAe,EAAE,QAAS,CAAC,CAAC;QAE1C,MAAM,MAAM,GAAG,MAAM,KAAK,CAAC,wCAAwC,EAAE;YACjE,MAAM,EAAE,MAAM;YACd,OAAO,EAAE;gBAAE,cAAc,EAAE,mCAAmC;YAAA,CAAE;YAChE,IAAI,EAAE,MAAM;SACf,CAAC,CAAC;QAEH,MAAM,IAAI,GAAG,MAAM,MAAM,CAAC,IAAI,EAAE,CAAC;QAEjC,IAAI,CAAC,MAAM,CAAC,EAAE,EAAE;YACZ,MAAM,IAAI,KAAK,CAAC,CAAA,mCAAA,EAAsC,MAAM,CAAC,UAAU,CAAA,EAAA,EAAK,IAAI,EAAE,CAAC,CAAC;SACvF;QAED,MAAM,IAAI,GAAgB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QAC3C,OAAO,IAAI,CAAC;IAChB,CAAC","ignoreList":[0]}},
    {"offset": {"line": 1209, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1215, "column": 0}, "map": {"version":3,"file":"DefaultResponseDeserializer.js","sources":["file:///Users/dezalduasamuel/Desktop/Code/playlist-manager-product/playlist-manager-next/node_modules/.pnpm/%40spotify%2Bweb-api-ts-sdk%401.2.0/node_modules/%40spotify/web-api-ts-sdk/src/serialization/DefaultResponseDeserializer.ts"],"sourcesContent":["import type { IResponseDeserializer } from \"../types.js\";\n\nexport default class DefaultResponseDeserializer implements IResponseDeserializer {\n    public async deserialize<TReturnType>(response: Response): Promise<TReturnType> {\n        const text = await response.text();\n\n        if (text.length > 0) {\n            const json = JSON.parse(text);\n            return json as TReturnType;\n        }\n\n        return null as TReturnType;\n    }\n}\n"],"names":[],"mappings":";;;AAEc,MAAO,2BAA2B;IACrC,KAAK,CAAC,WAAW,CAAc,QAAkB,EAAA;QACpD,MAAM,IAAI,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;QAEnC,IAAI,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE;YACjB,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YAC9B,OAAO,IAAmB,CAAC;SAC9B;QAED,OAAO,IAAmB,CAAC;IAC/B,CAAC;CACJ","ignoreList":[0]}},
    {"offset": {"line": 1228, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1234, "column": 0}, "map": {"version":3,"file":"DefaultResponseValidator.js","sources":["file:///Users/dezalduasamuel/Desktop/Code/playlist-manager-product/playlist-manager-next/node_modules/.pnpm/%40spotify%2Bweb-api-ts-sdk%401.2.0/node_modules/%40spotify/web-api-ts-sdk/src/responsevalidation/DefaultResponseValidator.ts"],"sourcesContent":["import type { IValidateResponses } from \"../types.js\";\n\nexport default class DefaultResponseValidator implements IValidateResponses {\n    public async validateResponse(response: Response): Promise<void> {\n\n        switch (response.status) {\n            case 401:\n                throw new Error(\"Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.\");\n            case 403:\n                const body = await response.text();\n                throw new Error(`Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won't help here. Body: ${body}`);\n            case 429:\n                throw new Error(\"The app has exceeded its rate limits.\");\n            default:\n                if (!response.status.toString().startsWith('20')) {\n                    const body = await response.text();\n                    throw new Error(`Unrecognised response code: ${response.status} - ${response.statusText}. Body: ${body}`);\n                }\n        }\n\n    }\n}\n"],"names":[],"mappings":";;;AAEc,MAAO,wBAAwB;IAClC,KAAK,CAAC,gBAAgB,CAAC,QAAkB,EAAA;QAE5C,OAAQ,QAAQ,CAAC,MAAM,EAAE;YACrB,KAAK,GAAG;gBACJ,MAAM,IAAI,KAAK,CAAC,yIAAyI,CAAC,CAAC;YAC/J,KAAK,GAAG;gBACJ,MAAM,IAAI,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;gBACnC,MAAM,IAAI,KAAK,CAAC,CAAA,0IAAA,EAA6I,IAAI,EAAE,CAAC,CAAC;YACzK,KAAK,GAAG;gBACJ,MAAM,IAAI,KAAK,CAAC,uCAAuC,CAAC,CAAC;YAC7D;gBACI,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE;oBAC9C,MAAM,IAAI,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;oBACnC,MAAM,IAAI,KAAK,CAAC,CAAA,4BAAA,EAA+B,QAAQ,CAAC,MAAM,CAAA,GAAA,EAAM,QAAQ,CAAC,UAAU,CAAA,QAAA,EAAW,IAAI,EAAE,CAAC,CAAC;iBAC7G;SACR;IAEL,CAAC;CACJ","ignoreList":[0]}},
    {"offset": {"line": 1255, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1261, "column": 0}, "map": {"version":3,"file":"NoOpErrorHandler.js","sources":["file:///Users/dezalduasamuel/Desktop/Code/playlist-manager-product/playlist-manager-next/node_modules/.pnpm/%40spotify%2Bweb-api-ts-sdk%401.2.0/node_modules/%40spotify/web-api-ts-sdk/src/errorhandling/NoOpErrorHandler.ts"],"sourcesContent":["import type { IHandleErrors } from \"../types.js\";\n\nexport default class NoOpErrorHandler implements IHandleErrors {\n    public async handleErrors(_: any): Promise<boolean> {\n        return false;\n    }\n}\n"],"names":[],"mappings":";;;AAEc,MAAO,gBAAgB;IAC1B,KAAK,CAAC,YAAY,CAAC,CAAM,EAAA;QAC5B,OAAO,KAAK,CAAC;IACjB,CAAC;CACJ","ignoreList":[0]}},
    {"offset": {"line": 1269, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1275, "column": 0}, "map": {"version":3,"file":"DocumentLocationRedirectionStrategy.js","sources":["file:///Users/dezalduasamuel/Desktop/Code/playlist-manager-product/playlist-manager-next/node_modules/.pnpm/%40spotify%2Bweb-api-ts-sdk%401.2.0/node_modules/%40spotify/web-api-ts-sdk/src/redirection/DocumentLocationRedirectionStrategy.ts"],"sourcesContent":["import type { IRedirectionStrategy } from \"../types.js\";\n\nexport default class DocumentLocationRedirectionStrategy implements IRedirectionStrategy {\n    public async redirect(targetUrl: string | URL): Promise<void> {\n        document.location = targetUrl.toString();\n    }\n\n    public async onReturnFromRedirect(): Promise<void> {\n    }\n}\n"],"names":[],"mappings":";;;AAEc,MAAO,mCAAmC;IAC7C,KAAK,CAAC,QAAQ,CAAC,SAAuB,EAAA;QACzC,QAAQ,CAAC,QAAQ,GAAG,SAAS,CAAC,QAAQ,EAAE,CAAC;IAC7C,CAAC;IAEM,KAAK,CAAC,oBAAoB,GAAA,CACjC,CAAC;CACJ","ignoreList":[0]}},
    {"offset": {"line": 1284, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1290, "column": 0}, "map": {"version":3,"file":"GenericCache.js","sources":["file:///Users/dezalduasamuel/Desktop/Code/playlist-manager-product/playlist-manager-next/node_modules/.pnpm/%40spotify%2Bweb-api-ts-sdk%401.2.0/node_modules/%40spotify/web-api-ts-sdk/src/caching/GenericCache.ts"],"sourcesContent":["import { isEmptyAccessToken } from \"../auth/IAuthStrategy.js\";\nimport { ICachingStrategy, ICachable } from \"../types.js\";\nimport { ICacheStore } from \"./ICacheStore.js\";\n\nexport default class GenericCache implements ICachingStrategy {\n    constructor(\n        private storage: ICacheStore,\n        private updateFunctions: Map<string, (item: any) => Promise<ICachable>> = new Map(),\n        private autoRenewInterval: number = 0,\n        private autoRenewWindow: number = 2 * 60 * 1000 // Two minutes\n    ) {\n        if (this.autoRenewInterval > 0) {\n            setInterval(() => this.autoRenewRenewableItems(), this.autoRenewInterval);\n        }\n    }\n\n    public async getOrCreate<T>(\n        cacheKey: string,\n        createFunction: () => Promise<T & ICachable & object>,\n        updateFunction?: (item: T) => Promise<T & ICachable & object>\n    ): Promise<T & ICachable> {\n        if (updateFunction) {\n            this.updateFunctions.set(cacheKey, updateFunction);\n        }\n\n        const item = await this.get<T>(cacheKey);\n        if (item) {\n            return item;\n        }\n\n        const newCacheItem = await createFunction();\n        if (!newCacheItem) {\n            throw new Error(\"Could not create cache item\");\n        }\n\n        if (!isEmptyAccessToken(newCacheItem)) {\n            this.setCacheItem(cacheKey, newCacheItem);\n        }\n\n        return newCacheItem;\n    }\n\n    public async get<T>(cacheKey: string): Promise<T & ICachable | null> {\n        let asString = this.storage.get(cacheKey);\n        let cachedItem: T & ICachable = asString ? JSON.parse(asString) : null;\n\n        if (this.itemDueToExpire(cachedItem) && this.updateFunctions.has(cacheKey)) {\n            const updateFunction = this.updateFunctions.get(cacheKey);\n            await this.tryUpdateItem(cacheKey, cachedItem, updateFunction!);\n\n            // Ensure updated item is returned\n            asString = this.storage.get(cacheKey);\n            cachedItem = asString ? JSON.parse(asString) : null;\n        }\n\n        if (!cachedItem) {\n            return null;\n        }\n\n        if (cachedItem.expires && (cachedItem.expires === -1 || cachedItem.expires <= Date.now())) {\n            this.remove(cacheKey);\n            return null;\n        }\n\n        if (cachedItem.expiresOnAccess && cachedItem.expiresOnAccess === true) {\n            this.remove(cacheKey);\n            return cachedItem;\n        }\n\n        return cachedItem;\n    }\n\n    public set(cacheKey: string, value: object, expiresIn: number): void {\n        const expires = Date.now() + expiresIn;\n        const cacheItem: ICachable = { ...value, expires };\n        this.setCacheItem(cacheKey, cacheItem);\n    }\n\n    public setCacheItem(cacheKey: string, cacheItem: ICachable): void {\n        const asString = JSON.stringify(cacheItem);\n        this.storage.set(cacheKey, asString);\n    }\n\n    public remove(cacheKey: string): void {\n        this.storage.remove(cacheKey);\n    }\n\n    private itemDueToExpire(item: ICachable): boolean {\n        if (!item) {\n            return false;\n        }\n\n        if (!item.expires) {\n            return false;\n        }\n\n        return item.expires - Date.now() < (this.autoRenewWindow);\n    }\n\n    private async autoRenewRenewableItems() {\n        this.updateFunctions.forEach(async (updateFunction, key) => {\n            const cachedItem = await this.get(key);\n            if (!cachedItem) {\n                return;\n            }\n\n            if (updateFunction && this.itemDueToExpire(cachedItem)) {\n                await this.tryUpdateItem(key, cachedItem, updateFunction);\n            }\n        });\n    }\n\n    private async tryUpdateItem(key: string, cachedItem: ICachable, updateFunction: (item: ICachable) => Promise<ICachable>) {\n        try {\n            const updated = await updateFunction(cachedItem);\n            if (updated) {\n                this.setCacheItem(key, updated);\n            }\n        } catch (e) {\n            console.error(e);\n        }\n    }\n\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 1396, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1402, "column": 0}, "map": {"version":3,"file":"LocalStorageCachingStrategy.js","sources":["file:///Users/dezalduasamuel/Desktop/Code/playlist-manager-product/playlist-manager-next/node_modules/.pnpm/%40spotify%2Bweb-api-ts-sdk%401.2.0/node_modules/%40spotify/web-api-ts-sdk/src/caching/LocalStorageCachingStrategy.ts"],"sourcesContent":["import GenericCache from \"./GenericCache.js\";\nimport type { ICacheStore } from \"./ICacheStore.js\";\n\nexport default class LocalStorageCachingStrategy extends GenericCache {\n    constructor() {\n        super(new LocalStorageCacheStore());\n    }\n}\n\nclass LocalStorageCacheStore implements ICacheStore {\n    public get(key: string): string | null {\n        return localStorage.getItem(key);\n    }\n\n    public set(key: string, value: string): void {\n        localStorage.setItem(key, value);\n    }\n\n    public remove(key: string): void {\n        localStorage.removeItem(key);\n    }\n}\n"],"names":[],"mappings":";;;AAAA,OAAO,YAAY,MAAM,mBAAmB,CAAC;;AAG/B,MAAO,2BAA4B,4RAAQ,UAAY;IACjE,aAAA;QACI,KAAK,CAAC,IAAI,sBAAsB,EAAE,CAAC,CAAC;IACxC,CAAC;CACJ;AAED,MAAM,sBAAsB;IACjB,GAAG,CAAC,GAAW,EAAA;QAClB,OAAO,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;IACrC,CAAC;IAEM,GAAG,CAAC,GAAW,EAAE,KAAa,EAAA;QACjC,YAAY,CAAC,OAAO,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;IACrC,CAAC;IAEM,MAAM,CAAC,GAAW,EAAA;QACrB,YAAY,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;IACjC,CAAC;CACJ","ignoreList":[0]}},
    {"offset": {"line": 1423, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1429, "column": 0}, "map": {"version":3,"file":"InMemoryCachingStrategy.js","sources":["file:///Users/dezalduasamuel/Desktop/Code/playlist-manager-product/playlist-manager-next/node_modules/.pnpm/%40spotify%2Bweb-api-ts-sdk%401.2.0/node_modules/%40spotify/web-api-ts-sdk/src/caching/InMemoryCachingStrategy.ts"],"sourcesContent":["import GenericCache from \"./GenericCache.js\";\nimport type { ICacheStore } from \"./ICacheStore.js\";\n\nexport default class InMemoryCachingStrategy extends GenericCache {\n    constructor() {\n        super(new DictionaryCacheStore());\n    }\n}\n\nclass DictionaryCacheStore implements ICacheStore {\n    private cache = new Map<string, string>();\n\n    public get(key: string): string | null {\n        return this.cache.get(key) ?? null;\n    }\n\n    public set(key: string, value: string): void {\n        this.cache.set(key, value);\n    }\n\n    public remove(key: string): void {\n        this.cache.delete(key);\n    }\n}\n"],"names":[],"mappings":";;;AAAA,OAAO,YAAY,MAAM,mBAAmB,CAAC;;AAG/B,MAAO,uBAAwB,4RAAQ,UAAY;IAC7D,aAAA;QACI,KAAK,CAAC,IAAI,oBAAoB,EAAE,CAAC,CAAC;IACtC,CAAC;CACJ;AAED,MAAM,oBAAoB;IACd,KAAK,GAAG,IAAI,GAAG,EAAkB,CAAC;IAEnC,GAAG,CAAC,GAAW,EAAA;QAClB,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC;IACvC,CAAC;IAEM,GAAG,CAAC,GAAW,EAAE,KAAa,EAAA;QACjC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;IAC/B,CAAC;IAEM,MAAM,CAAC,GAAW,EAAA;QACrB,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;IAC3B,CAAC;CACJ","ignoreList":[0]}},
    {"offset": {"line": 1451, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1457, "column": 0}, "map": {"version":3,"file":"ProvidedAccessTokenStrategy.js","sources":["file:///Users/dezalduasamuel/Desktop/Code/playlist-manager-product/playlist-manager-next/node_modules/.pnpm/%40spotify%2Bweb-api-ts-sdk%401.2.0/node_modules/%40spotify/web-api-ts-sdk/src/auth/ProvidedAccessTokenStrategy.ts"],"sourcesContent":["import { AccessToken, SdkConfiguration } from \"../types.js\";\nimport AccessTokenHelpers from \"./AccessTokenHelpers.js\";\nimport IAuthStrategy from \"./IAuthStrategy.js\";\n\n/**\n * This strategy is used when you already have an access token and want to use it.\n * The authentication strategy will automatically renew the token when it expires.\n * Designed to allow a browser-based-app to post the access token to the server and use it from there.\n * @constructor\n * @param {string} clientId - Spotify application client id.\n * @param {string} accessToken - The access token returned from a client side Authorization Code with PKCE flow.\n */\nexport default class ProvidedAccessTokenStrategy implements IAuthStrategy {\n    private refreshTokenAction: (clientId: string, token: AccessToken) => Promise<AccessToken>;\n\n    constructor(\n        protected clientId: string,\n        protected accessToken: AccessToken,\n        refreshTokenAction?: (clientId: string, token: AccessToken) => Promise<AccessToken>\n    ) {\n        this.refreshTokenAction = refreshTokenAction || AccessTokenHelpers.refreshCachedAccessToken;\n\n        // If the raw token from the jwt response is provided here\n        // Calculate an absolute `expiry` value.\n        // Caveat: If this token isn't fresh, this value will be off.\n        // It's the responsibility of the calling code to either set a valid\n        // expires property, or ensure expires_in accounts for any lag between\n        // issuing and passing here.\n\n        if (!this.accessToken.expires) {\n            this.accessToken.expires = AccessTokenHelpers.calculateExpiry(this.accessToken);\n        }\n    }\n\n    public setConfiguration(_: SdkConfiguration): void {\n    }\n\n    public async getOrCreateAccessToken(): Promise<AccessToken> {\n        if (this.accessToken.expires && this.accessToken.expires <= Date.now()) {\n            const refreshed = await this.refreshTokenAction(this.clientId, this.accessToken);\n            this.accessToken = refreshed;\n        }\n\n        return this.accessToken;\n    }\n\n    public async getAccessToken(): Promise<AccessToken | null> {\n        return this.accessToken;\n    }\n\n    public removeAccessToken(): void {\n        this.accessToken = {\n            access_token: \"\",\n            token_type: \"\",\n            expires_in: 0,\n            refresh_token: \"\",\n            expires: 0\n        };\n    }\n}\n"],"names":[],"mappings":";;;AACA,OAAO,kBAAkB,MAAM,yBAAyB,CAAC;;AAW3C,MAAO,2BAA2B;IAI9B,SAAA;IACA,YAAA;IAJN,kBAAkB,CAAiE;IAE3F,YACc,QAAgB,EAChB,WAAwB,EAClC,kBAAmF,CAAA;QAFzE,IAAA,CAAA,QAAQ,GAAR,QAAQ,CAAQ;QAChB,IAAA,CAAA,WAAW,GAAX,WAAW,CAAa;QAGlC,IAAI,CAAC,kBAAkB,GAAG,kBAAkB,0RAAI,UAAkB,CAAC,wBAAwB,CAAC;QAE5F,0DAA0D;QAC1D,wCAAwC;QACxC,6DAA6D;QAC7D,oEAAoE;QACpE,sEAAsE;QACtE,4BAA4B;QAE5B,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE;YAC3B,IAAI,CAAC,WAAW,CAAC,OAAO,yRAAG,UAAkB,CAAC,eAAe,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;SACnF;IACL,CAAC;IAEM,gBAAgB,CAAC,CAAmB,EAAA,CAC3C,CAAC;IAEM,KAAK,CAAC,sBAAsB,GAAA;QAC/B,IAAI,IAAI,CAAC,WAAW,CAAC,OAAO,IAAI,IAAI,CAAC,WAAW,CAAC,OAAO,IAAI,IAAI,CAAC,GAAG,EAAE,EAAE;YACpE,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;YACjF,IAAI,CAAC,WAAW,GAAG,SAAS,CAAC;SAChC;QAED,OAAO,IAAI,CAAC,WAAW,CAAC;IAC5B,CAAC;IAEM,KAAK,CAAC,cAAc,GAAA;QACvB,OAAO,IAAI,CAAC,WAAW,CAAC;IAC5B,CAAC;IAEM,iBAAiB,GAAA;QACpB,IAAI,CAAC,WAAW,GAAG;YACf,YAAY,EAAE,EAAE;YAChB,UAAU,EAAE,EAAE;YACd,UAAU,EAAE,CAAC;YACb,aAAa,EAAE,EAAE;YACjB,OAAO,EAAE,CAAC;SACb,CAAC;IACN,CAAC;CACJ","ignoreList":[0]}},
    {"offset": {"line": 1501, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1507, "column": 0}, "map": {"version":3,"file":"SpotifyApi.js","sources":["file:///Users/dezalduasamuel/Desktop/Code/playlist-manager-product/playlist-manager-next/node_modules/.pnpm/%40spotify%2Bweb-api-ts-sdk%401.2.0/node_modules/%40spotify/web-api-ts-sdk/src/SpotifyApi.ts"],"sourcesContent":["import AlbumsEndpoints from \"./endpoints/AlbumsEndpoints.js\";\nimport ArtistsEndpoints from \"./endpoints/ArtistsEndpoints.js\";\nimport AudiobooksEndpoints from \"./endpoints/AudiobooksEndpoints.js\";\nimport BrowseEndpoints from \"./endpoints/BrowseEndpoints.js\";\nimport ChaptersEndpoints from \"./endpoints/ChaptersEndpoints.js\";\nimport EpisodesEndpoints from \"./endpoints/EpisodesEndpoints.js\";\nimport RecommendationsEndpoints from \"./endpoints/RecommendationsEndpoints.js\";\nimport MarketsEndpoints from \"./endpoints/MarketsEndpoints.js\";\nimport PlayerEndpoints from \"./endpoints/PlayerEndpoints.js\";\nimport PlaylistsEndpoints from \"./endpoints/PlaylistsEndpoints.js\";\nimport SearchEndpoints, { SearchExecutionFunction } from \"./endpoints/SearchEndpoints.js\";\nimport ShowsEndpoints from \"./endpoints/ShowsEndpoints.js\";\nimport TracksEndpoints from \"./endpoints/TracksEndpoints.js\";\nimport IAuthStrategy, { isEmptyAccessToken } from \"./auth/IAuthStrategy.js\";\nimport UsersEndpoints from \"./endpoints/UsersEndpoints.js\";\nimport CurrentUserEndpoints from \"./endpoints/CurrentUserEndpoints.js\";\nimport ClientCredentialsStrategy from \"./auth/ClientCredentialsStrategy.js\";\nimport ImplicitGrantStrategy from \"./auth/ImplicitGrantStrategy.js\";\nimport AuthorizationCodeWithPKCEStrategy from \"./auth/AuthorizationCodeWithPKCEStrategy.js\";\nimport DefaultResponseDeserializer from \"./serialization/DefaultResponseDeserializer.js\";\nimport DefaultResponseValidator from \"./responsevalidation/DefaultResponseValidator.js\";\nimport NoOpErrorHandler from \"./errorhandling/NoOpErrorHandler.js\";\nimport DocumentLocationRedirectionStrategy from \"./redirection/DocumentLocationRedirectionStrategy.js\";\nimport LocalStorageCachingStrategy from \"./caching/LocalStorageCachingStrategy.js\";\nimport InMemoryCachingStrategy from \"./caching/InMemoryCachingStrategy.js\";\nimport ProvidedAccessTokenStrategy from \"./auth/ProvidedAccessTokenStrategy.js\";\nimport type { AccessToken, SdkConfiguration, SdkOptions, AuthenticationResponse } from \"./types.js\";\n\nexport class SpotifyApi {\n    private sdkConfig: SdkConfiguration;\n    private static rootUrl: string = \"https://api.spotify.com/v1/\";\n\n    private authenticationStrategy: IAuthStrategy;\n\n    public albums: AlbumsEndpoints;\n    public artists: ArtistsEndpoints;\n    public audiobooks: AudiobooksEndpoints;\n    public browse: BrowseEndpoints;\n    public chapters: ChaptersEndpoints;\n    public episodes: EpisodesEndpoints;\n    public recommendations: RecommendationsEndpoints;\n    public markets: MarketsEndpoints;\n    public player: PlayerEndpoints;\n    public playlists: PlaylistsEndpoints;\n    public shows: ShowsEndpoints;\n    public tracks: TracksEndpoints;\n    public users: UsersEndpoints;\n    public search: SearchExecutionFunction;\n\n    public currentUser: CurrentUserEndpoints;\n\n    public constructor(authentication: IAuthStrategy, config?: SdkOptions) {\n        this.sdkConfig = this.initializeSdk(config);\n\n        this.albums = new AlbumsEndpoints(this);\n        this.artists = new ArtistsEndpoints(this);\n        this.audiobooks = new AudiobooksEndpoints(this);\n        this.browse = new BrowseEndpoints(this);\n        this.chapters = new ChaptersEndpoints(this);\n        this.episodes = new EpisodesEndpoints(this);\n        this.recommendations = new RecommendationsEndpoints(this);\n        this.markets = new MarketsEndpoints(this);\n        this.player = new PlayerEndpoints(this);\n        this.playlists = new PlaylistsEndpoints(this);\n        this.shows = new ShowsEndpoints(this);\n        this.tracks = new TracksEndpoints(this);\n        this.users = new UsersEndpoints(this);\n        this.currentUser = new CurrentUserEndpoints(this);\n\n        const search = new SearchEndpoints(this);\n        this.search = search.execute.bind(search);\n\n        this.authenticationStrategy = authentication;\n        this.authenticationStrategy.setConfiguration(this.sdkConfig);\n    }\n\n    public async makeRequest<TReturnType>(method: \"GET\" | \"POST\" | \"PUT\" | \"DELETE\", url: string, body: any = undefined, contentType: string | undefined = undefined): Promise<TReturnType> {\n        try {\n            const accessToken = await this.authenticationStrategy.getOrCreateAccessToken();\n            if (isEmptyAccessToken(accessToken)) {\n                console.warn(\"No access token found, authenticating now.\");\n                return null as TReturnType;\n            }\n\n            const token = accessToken?.access_token;\n\n            const fullUrl = SpotifyApi.rootUrl + url;\n            const opts: RequestInit = {\n                method: method,\n                headers: {\n                    Authorization: `Bearer ${token}`,\n                    \"Content-Type\": contentType ?? \"application/json\"\n                },\n                body: body ? typeof body === \"string\" ? body : JSON.stringify(body) : undefined\n            };\n\n            this.sdkConfig.beforeRequest(fullUrl, opts);\n            const result = await this.sdkConfig.fetch(fullUrl, opts);\n            this.sdkConfig.afterRequest(fullUrl, opts, result);\n\n            if (result.status === 204) {\n                return null as TReturnType;\n            }\n\n            await this.sdkConfig.responseValidator.validateResponse(result);\n            return this.sdkConfig.deserializer.deserialize<TReturnType>(result);\n        } catch (error) {\n            const handled = await this.sdkConfig.errorHandler.handleErrors(error);\n            if (!handled) {\n                throw error;\n            }\n            return null as TReturnType;\n        }\n    }\n\n    private initializeSdk(config: SdkOptions | undefined): SdkConfiguration {\n        const isBrowser = typeof window !== 'undefined';\n\n        const defaultConfig: SdkConfiguration = {\n            fetch: (req: RequestInfo | URL, init: RequestInit | undefined) => fetch(req, init),\n            beforeRequest: (_: string, __: RequestInit) => { },\n            afterRequest: (_: string, __: RequestInit, ___: Response) => { },\n            deserializer: new DefaultResponseDeserializer(),\n            responseValidator: new DefaultResponseValidator(),\n            errorHandler: new NoOpErrorHandler(),\n            redirectionStrategy: new DocumentLocationRedirectionStrategy(),\n            cachingStrategy: isBrowser\n                ? new LocalStorageCachingStrategy()\n                : new InMemoryCachingStrategy()\n        };\n\n        return { ...defaultConfig, ...config };\n    }\n\n    public switchAuthenticationStrategy(authentication: IAuthStrategy) {\n        this.authenticationStrategy = authentication;\n        this.authenticationStrategy.setConfiguration(this.sdkConfig);\n        this.authenticationStrategy.getOrCreateAccessToken(); // trigger any redirects \n    }\n\n    /**\n     * Use this when you're running in a browser and you want to control when first authentication+redirect happens.\n    */\n    public async authenticate(): Promise<AuthenticationResponse> {\n        const response = await this.authenticationStrategy.getOrCreateAccessToken(); // trigger any redirects\n\n        return {\n            authenticated: response.expires! > Date.now() && !isEmptyAccessToken(response),\n            accessToken: response\n        };\n    }\n\n    /**\n     * @returns the current access token. null implies the SpotifyApi is not yet authenticated.\n     */\n    public async getAccessToken(): Promise<AccessToken | null> {\n        return this.authenticationStrategy.getAccessToken();\n    }\n\n    /**\n     * Removes the access token if it exists.\n     */\n    public logOut(): void {\n        this.authenticationStrategy.removeAccessToken();\n    }\n\n    public static withUserAuthorization(clientId: string, redirectUri: string, scopes: string[] = [], config?: SdkOptions): SpotifyApi {\n        const strategy = new AuthorizationCodeWithPKCEStrategy(clientId, redirectUri, scopes);\n        return new SpotifyApi(strategy, config);\n    }\n\n    public static withClientCredentials(clientId: string, clientSecret: string, scopes: string[] = [], config?: SdkOptions): SpotifyApi {\n        const strategy = new ClientCredentialsStrategy(clientId, clientSecret, scopes);\n        return new SpotifyApi(strategy, config);\n    }\n\n    public static withImplicitGrant(clientId: string, redirectUri: string, scopes: string[] = [], config?: SdkOptions): SpotifyApi {\n        const strategy = new ImplicitGrantStrategy(clientId, redirectUri, scopes);\n        return new SpotifyApi(strategy, config);\n    }\n\n    /**\n     * Use this when you're running in a Node environment, and accepting the access token from a client-side `performUserAuthorization` call.\n     * You can also use this method if you already have an access token and don't want to use the built-in authentication strategies.\n     */\n    public static withAccessToken(clientId: string, token: AccessToken, config?: SdkOptions): SpotifyApi {\n        const strategy = new ProvidedAccessTokenStrategy(clientId, token);\n        return new SpotifyApi(strategy, config);\n    }\n\n    /**\n     * Use this when you're running in the browser, and want to perform the user authorization flow to post back to your server with the access token.\n     * @param clientId Your Spotify client ID\n     * @param redirectUri The URI to redirect to after the user has authorized your app\n     * @param scopes The scopes to request\n     * @param postbackUrl The URL to post the access token to\n     * @param config Optional configuration\n     */\n    public static async performUserAuthorization(clientId: string, redirectUri: string, scopes: string[], postbackUrl: string, config?: SdkOptions): Promise<AuthenticationResponse>;\n\n    /**\n     * Use this when you're running in the browser, and want to perform the user authorization flow to post back to your server with the access token.\n     * This overload is provided for you to perform the postback yourself, if you want to do something other than a simple HTTP POST to a URL - for example, if you want to use a WebSocket, or provide custom authentication.\n     * @param clientId Your Spotify client ID\n     * @param redirectUri The URI to redirect to after the user has authorized your app\n     * @param scopes The scopes to request\n     * @param onAuthorization A function to call with the access token where YOU perform the server-side postback\n     * @param config Optional configuration\n     */\n    public static async performUserAuthorization(clientId: string, redirectUri: string, scopes: string[], onAuthorization: (token: AccessToken) => Promise<void>, config?: SdkOptions): Promise<AuthenticationResponse>;\n\n    public static async performUserAuthorization(clientId: string, redirectUri: string, scopes: string[], onAuthorizationOrUrl: ((token: AccessToken) => Promise<void>) | string, config?: SdkOptions): Promise<AuthenticationResponse> {\n        const strategy = new AuthorizationCodeWithPKCEStrategy(clientId, redirectUri, scopes);\n        const client = new SpotifyApi(strategy, config);\n        const accessToken = await client.authenticationStrategy.getOrCreateAccessToken();\n\n        if (!isEmptyAccessToken(accessToken)) {\n            if (typeof onAuthorizationOrUrl === \"string\") {\n                console.log(\"Posting access token to postback URL.\");\n                await fetch(onAuthorizationOrUrl, {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    },\n                    body: JSON.stringify(accessToken)\n                });\n            } else {\n                await onAuthorizationOrUrl(accessToken);\n            }\n        }\n\n        return {\n            authenticated: accessToken.expires! > Date.now() && !isEmptyAccessToken(accessToken),\n            accessToken\n        };\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 1719, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1725, "column": 0}, "map": {"version":3,"file":"ConsoleLoggingErrorHandler.js","sources":["file:///Users/dezalduasamuel/Desktop/Code/playlist-manager-product/playlist-manager-next/node_modules/.pnpm/%40spotify%2Bweb-api-ts-sdk%401.2.0/node_modules/%40spotify/web-api-ts-sdk/src/errorhandling/ConsoleLoggingErrorHandler.ts"],"sourcesContent":["import type { IHandleErrors } from \"../types.js\";\n\nexport default class ConsoleLoggingErrorHandler implements IHandleErrors {\n    public async handleErrors(error: any): Promise<boolean> {\n        console.log(error);\n        return false;\n    }\n}\n"],"names":[],"mappings":";;;AAEc,MAAO,0BAA0B;IACpC,KAAK,CAAC,YAAY,CAAC,KAAU,EAAA;QAChC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACnB,OAAO,KAAK,CAAC;IACjB,CAAC;CACJ","ignoreList":[0]}},
    {"offset": {"line": 1734, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1740, "column": 0}, "map": {"version":3,"file":"Scopes.js","sources":["file:///Users/dezalduasamuel/Desktop/Code/playlist-manager-product/playlist-manager-next/node_modules/.pnpm/%40spotify%2Bweb-api-ts-sdk%401.2.0/node_modules/%40spotify/web-api-ts-sdk/src/Scopes.ts"],"sourcesContent":["export class Scopes {\n\n    public static get playlist() {\n        return [\n            ...Scopes.playlistRead,\n            ...Scopes.playlistModify\n        ];\n    }\n\n    public static get playlistRead() {\n        return [\n            \"playlist-read-private\",\n            \"playlist-read-collaborative\",\n        ];\n    }\n\n    public static get playlistModify() {\n        return [\n            \"playlist-modify-public\",\n            \"playlist-modify-private\",\n            \"ugc-image-upload\"\n        ];\n    }\n\n    public static get userDetails() {\n        return [\n            \"user-read-private\",\n            \"user-read-email\",\n        ];\n    }\n\n    public static get userLibrary() {\n        return [\n            ...Scopes.userLibraryRead,\n            ...Scopes.userLibraryModify\n        ];\n    }\n\n    public static get userLibraryRead() {\n        return [\n            \"user-library-read\",\n        ];\n    }\n\n    public static get userLibraryModify() {\n        return [\n            \"user-library-modify\",\n        ];\n    }\n\n    public static get userRecents() {\n        return [\n            \"user-top-read\",\n            \"user-read-recently-played\",\n        ];\n    }\n\n    public static get userFollow() {\n        return [\n            ...Scopes.userFollowRead,\n            ...Scopes.userFollowModify\n        ];\n    }\n\n    public static get userFollowRead() {\n        return [\n            \"user-follow-read\",\n        ];\n    }\n\n    public static get userFollowModify() {\n        return [\n            \"user-follow-modify\",\n        ];\n    }\n\n    public static get userPlayback() {\n        return [\n            ...Scopes.userPlaybackRead,\n            ...Scopes.userPlaybackModify\n        ];\n    }\n\n    public static get userPlaybackRead() {\n        return [\n            \"user-read-playback-position\",\n            \"user-read-playback-state\",\n            \"user-read-currently-playing\",\n        ];\n    }\n\n    public static get userPlaybackModify() {\n        return [\n            \"user-modify-playback-state\",\n            \"app-remote-control\",\n            \"streaming\"\n        ];\n    }\n\n    public static get all() {\n        return [\n            ...Scopes.userDetails,\n            ...Scopes.playlist,\n            ...Scopes.userLibrary,\n            ...Scopes.userRecents,\n            ...Scopes.userFollow,\n            ...Scopes.userPlayback,\n        ];\n    }\n}"],"names":[],"mappings":";;;AAAM,MAAO,MAAM;IAER,MAAM,KAAK,QAAQ,GAAA;QACtB,OAAO;eACA,MAAM,CAAC,YAAY;eACnB,MAAM,CAAC,cAAc;SAC3B,CAAC;IACN,CAAC;IAEM,MAAM,KAAK,YAAY,GAAA;QAC1B,OAAO;YACH,uBAAuB;YACvB,6BAA6B;SAChC,CAAC;IACN,CAAC;IAEM,MAAM,KAAK,cAAc,GAAA;QAC5B,OAAO;YACH,wBAAwB;YACxB,yBAAyB;YACzB,kBAAkB;SACrB,CAAC;IACN,CAAC;IAEM,MAAM,KAAK,WAAW,GAAA;QACzB,OAAO;YACH,mBAAmB;YACnB,iBAAiB;SACpB,CAAC;IACN,CAAC;IAEM,MAAM,KAAK,WAAW,GAAA;QACzB,OAAO;eACA,MAAM,CAAC,eAAe;eACtB,MAAM,CAAC,iBAAiB;SAC9B,CAAC;IACN,CAAC;IAEM,MAAM,KAAK,eAAe,GAAA;QAC7B,OAAO;YACH,mBAAmB;SACtB,CAAC;IACN,CAAC;IAEM,MAAM,KAAK,iBAAiB,GAAA;QAC/B,OAAO;YACH,qBAAqB;SACxB,CAAC;IACN,CAAC;IAEM,MAAM,KAAK,WAAW,GAAA;QACzB,OAAO;YACH,eAAe;YACf,2BAA2B;SAC9B,CAAC;IACN,CAAC;IAEM,MAAM,KAAK,UAAU,GAAA;QACxB,OAAO;eACA,MAAM,CAAC,cAAc;eACrB,MAAM,CAAC,gBAAgB;SAC7B,CAAC;IACN,CAAC;IAEM,MAAM,KAAK,cAAc,GAAA;QAC5B,OAAO;YACH,kBAAkB;SACrB,CAAC;IACN,CAAC;IAEM,MAAM,KAAK,gBAAgB,GAAA;QAC9B,OAAO;YACH,oBAAoB;SACvB,CAAC;IACN,CAAC;IAEM,MAAM,KAAK,YAAY,GAAA;QAC1B,OAAO;eACA,MAAM,CAAC,gBAAgB;eACvB,MAAM,CAAC,kBAAkB;SAC/B,CAAC;IACN,CAAC;IAEM,MAAM,KAAK,gBAAgB,GAAA;QAC9B,OAAO;YACH,6BAA6B;YAC7B,0BAA0B;YAC1B,6BAA6B;SAChC,CAAC;IACN,CAAC;IAEM,MAAM,KAAK,kBAAkB,GAAA;QAChC,OAAO;YACH,4BAA4B;YAC5B,oBAAoB;YACpB,WAAW;SACd,CAAC;IACN,CAAC;IAEM,MAAM,KAAK,GAAG,GAAA;QACjB,OAAO;eACA,MAAM,CAAC,WAAW;eAClB,MAAM,CAAC,QAAQ;eACf,MAAM,CAAC,WAAW;eAClB,MAAM,CAAC,WAAW;eAClB,MAAM,CAAC,UAAU;eACjB,MAAM,CAAC,YAAY;SACzB,CAAC;IACN,CAAC;CACJ","ignoreList":[0]}},
    {"offset": {"line": 1838, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1844, "column": 0}, "map": {"version":3,"file":"index.js","sources":["file:///Users/dezalduasamuel/Desktop/Code/playlist-manager-product/playlist-manager-next/node_modules/.pnpm/%40spotify%2Bweb-api-ts-sdk%401.2.0/node_modules/%40spotify/web-api-ts-sdk/src/index.ts"],"sourcesContent":["import { SpotifyApi } from \"./SpotifyApi.js\";\nimport AuthorizationCodeWithPKCEStrategy from \"./auth/AuthorizationCodeWithPKCEStrategy.js\";\nimport ClientCredentialsStrategy from \"./auth/ClientCredentialsStrategy.js\";\nimport IAuthStrategy from \"./auth/IAuthStrategy.js\";\nimport InMemoryCachingStrategy from \"./caching/InMemoryCachingStrategy.js\";\nimport LocalStorageCachingStrategy from \"./caching/LocalStorageCachingStrategy.js\";\nimport { ICacheStore } from \"./caching/ICacheStore.js\";\nimport GenericCache from \"./caching/GenericCache.js\";\nimport ConsoleLoggingErrorHandler from \"./errorhandling/ConsoleLoggingErrorHandler.js\";\nimport NoOpErrorHandler from \"./errorhandling/NoOpErrorHandler.js\";\nimport DocumentLocationRedirectionStrategy from \"./redirection/DocumentLocationRedirectionStrategy.js\";\nimport DefaultResponseValidator from \"./responsevalidation/DefaultResponseValidator.js\";\nimport DefaultResponseDeserializer from \"./serialization/DefaultResponseDeserializer.js\";\nimport { Scopes } from \"./Scopes.js\";\nimport { emptyAccessToken } from \"./auth/IAuthStrategy.js\";\n\nexport {\n    SpotifyApi,\n    AuthorizationCodeWithPKCEStrategy,\n    ClientCredentialsStrategy,\n    InMemoryCachingStrategy,\n    LocalStorageCachingStrategy,\n    GenericCache,\n    ConsoleLoggingErrorHandler,\n    NoOpErrorHandler,\n    DocumentLocationRedirectionStrategy,\n    DefaultResponseValidator,\n    DefaultResponseDeserializer,\n    Scopes,\n    emptyAccessToken\n}\n\nexport type * from \"./types.js\";\n\nexport type {\n    IAuthStrategy,\n    ICacheStore,\n}\n"],"names":[],"mappings":"","ignoreList":[0]}},
    {"offset": {"line": 1860, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1886, "column": 0}, "map": {"version":3,"sources":["file:///Users/dezalduasamuel/Desktop/Code/playlist-manager-product/playlist-manager-next/node_modules/.pnpm/safe-buffer%405.2.1/node_modules/safe-buffer/index.js"],"sourcesContent":["/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */\n/* eslint-disable node/no-deprecated-api */\nvar buffer = require('buffer')\nvar Buffer = buffer.Buffer\n\n// alternative to using Object.keys for old browsers\nfunction copyProps (src, dst) {\n  for (var key in src) {\n    dst[key] = src[key]\n  }\n}\nif (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {\n  module.exports = buffer\n} else {\n  // Copy properties from require('buffer')\n  copyProps(buffer, exports)\n  exports.Buffer = SafeBuffer\n}\n\nfunction SafeBuffer (arg, encodingOrOffset, length) {\n  return Buffer(arg, encodingOrOffset, length)\n}\n\nSafeBuffer.prototype = Object.create(Buffer.prototype)\n\n// Copy static methods from Buffer\ncopyProps(Buffer, SafeBuffer)\n\nSafeBuffer.from = function (arg, encodingOrOffset, length) {\n  if (typeof arg === 'number') {\n    throw new TypeError('Argument must not be a number')\n  }\n  return Buffer(arg, encodingOrOffset, length)\n}\n\nSafeBuffer.alloc = function (size, fill, encoding) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  var buf = Buffer(size)\n  if (fill !== undefined) {\n    if (typeof encoding === 'string') {\n      buf.fill(fill, encoding)\n    } else {\n      buf.fill(fill)\n    }\n  } else {\n    buf.fill(0)\n  }\n  return buf\n}\n\nSafeBuffer.allocUnsafe = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return Buffer(size)\n}\n\nSafeBuffer.allocUnsafeSlow = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return buffer.SlowBuffer(size)\n}\n"],"names":[],"mappings":"AAAA,kFAAkF,GAClF,yCAAyC,GACzC,IAAI;AACJ,IAAI,SAAS,OAAO,MAAM;AAE1B,oDAAoD;AACpD,SAAS,UAAW,GAAG,EAAE,GAAG;IAC1B,IAAK,IAAI,OAAO,IAAK;QACnB,GAAG,CAAC,IAAI,GAAG,GAAG,CAAC,IAAI;IACrB;AACF;AACA,IAAI,OAAO,IAAI,IAAI,OAAO,KAAK,IAAI,OAAO,WAAW,IAAI,OAAO,eAAe,EAAE;IAC/E,OAAO,OAAO,GAAG;AACnB,OAAO;IACL,yCAAyC;IACzC,UAAU,QAAQ;IAClB,QAAQ,MAAM,GAAG;AACnB;AAEA,SAAS,WAAY,GAAG,EAAE,gBAAgB,EAAE,MAAM;IAChD,OAAO,OAAO,KAAK,kBAAkB;AACvC;AAEA,WAAW,SAAS,GAAG,OAAO,MAAM,CAAC,OAAO,SAAS;AAErD,kCAAkC;AAClC,UAAU,QAAQ;AAElB,WAAW,IAAI,GAAG,SAAU,GAAG,EAAE,gBAAgB,EAAE,MAAM;IACvD,IAAI,OAAO,QAAQ,UAAU;QAC3B,MAAM,IAAI,UAAU;IACtB;IACA,OAAO,OAAO,KAAK,kBAAkB;AACvC;AAEA,WAAW,KAAK,GAAG,SAAU,IAAI,EAAE,IAAI,EAAE,QAAQ;IAC/C,IAAI,OAAO,SAAS,UAAU;QAC5B,MAAM,IAAI,UAAU;IACtB;IACA,IAAI,MAAM,OAAO;IACjB,IAAI,SAAS,WAAW;QACtB,IAAI,OAAO,aAAa,UAAU;YAChC,IAAI,IAAI,CAAC,MAAM;QACjB,OAAO;YACL,IAAI,IAAI,CAAC;QACX;IACF,OAAO;QACL,IAAI,IAAI,CAAC;IACX;IACA,OAAO;AACT;AAEA,WAAW,WAAW,GAAG,SAAU,IAAI;IACrC,IAAI,OAAO,SAAS,UAAU;QAC5B,MAAM,IAAI,UAAU;IACtB;IACA,OAAO,OAAO;AAChB;AAEA,WAAW,eAAe,GAAG,SAAU,IAAI;IACzC,IAAI,OAAO,SAAS,UAAU;QAC5B,MAAM,IAAI,UAAU;IACtB;IACA,OAAO,OAAO,UAAU,CAAC;AAC3B","ignoreList":[0]}},
    {"offset": {"line": 1941, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1946, "column": 0}, "map": {"version":3,"sources":["file:///Users/dezalduasamuel/Desktop/Code/playlist-manager-product/playlist-manager-next/node_modules/.pnpm/string_decoder%401.3.0/node_modules/string_decoder/lib/string_decoder.js"],"sourcesContent":["// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\n/*<replacement>*/\n\nvar Buffer = require('safe-buffer').Buffer;\n/*</replacement>*/\n\nvar isEncoding = Buffer.isEncoding || function (encoding) {\n  encoding = '' + encoding;\n  switch (encoding && encoding.toLowerCase()) {\n    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':\n      return true;\n    default:\n      return false;\n  }\n};\n\nfunction _normalizeEncoding(enc) {\n  if (!enc) return 'utf8';\n  var retried;\n  while (true) {\n    switch (enc) {\n      case 'utf8':\n      case 'utf-8':\n        return 'utf8';\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return 'utf16le';\n      case 'latin1':\n      case 'binary':\n        return 'latin1';\n      case 'base64':\n      case 'ascii':\n      case 'hex':\n        return enc;\n      default:\n        if (retried) return; // undefined\n        enc = ('' + enc).toLowerCase();\n        retried = true;\n    }\n  }\n};\n\n// Do not cache `Buffer.isEncoding` when checking encoding names as some\n// modules monkey-patch it to support additional encodings\nfunction normalizeEncoding(enc) {\n  var nenc = _normalizeEncoding(enc);\n  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);\n  return nenc || enc;\n}\n\n// StringDecoder provides an interface for efficiently splitting a series of\n// buffers into a series of JS strings without breaking apart multi-byte\n// characters.\nexports.StringDecoder = StringDecoder;\nfunction StringDecoder(encoding) {\n  this.encoding = normalizeEncoding(encoding);\n  var nb;\n  switch (this.encoding) {\n    case 'utf16le':\n      this.text = utf16Text;\n      this.end = utf16End;\n      nb = 4;\n      break;\n    case 'utf8':\n      this.fillLast = utf8FillLast;\n      nb = 4;\n      break;\n    case 'base64':\n      this.text = base64Text;\n      this.end = base64End;\n      nb = 3;\n      break;\n    default:\n      this.write = simpleWrite;\n      this.end = simpleEnd;\n      return;\n  }\n  this.lastNeed = 0;\n  this.lastTotal = 0;\n  this.lastChar = Buffer.allocUnsafe(nb);\n}\n\nStringDecoder.prototype.write = function (buf) {\n  if (buf.length === 0) return '';\n  var r;\n  var i;\n  if (this.lastNeed) {\n    r = this.fillLast(buf);\n    if (r === undefined) return '';\n    i = this.lastNeed;\n    this.lastNeed = 0;\n  } else {\n    i = 0;\n  }\n  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);\n  return r || '';\n};\n\nStringDecoder.prototype.end = utf8End;\n\n// Returns only complete characters in a Buffer\nStringDecoder.prototype.text = utf8Text;\n\n// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer\nStringDecoder.prototype.fillLast = function (buf) {\n  if (this.lastNeed <= buf.length) {\n    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);\n    return this.lastChar.toString(this.encoding, 0, this.lastTotal);\n  }\n  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);\n  this.lastNeed -= buf.length;\n};\n\n// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a\n// continuation byte. If an invalid byte is detected, -2 is returned.\nfunction utf8CheckByte(byte) {\n  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;\n  return byte >> 6 === 0x02 ? -1 : -2;\n}\n\n// Checks at most 3 bytes at the end of a Buffer in order to detect an\n// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)\n// needed to complete the UTF-8 character (if applicable) are returned.\nfunction utf8CheckIncomplete(self, buf, i) {\n  var j = buf.length - 1;\n  if (j < i) return 0;\n  var nb = utf8CheckByte(buf[j]);\n  if (nb >= 0) {\n    if (nb > 0) self.lastNeed = nb - 1;\n    return nb;\n  }\n  if (--j < i || nb === -2) return 0;\n  nb = utf8CheckByte(buf[j]);\n  if (nb >= 0) {\n    if (nb > 0) self.lastNeed = nb - 2;\n    return nb;\n  }\n  if (--j < i || nb === -2) return 0;\n  nb = utf8CheckByte(buf[j]);\n  if (nb >= 0) {\n    if (nb > 0) {\n      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;\n    }\n    return nb;\n  }\n  return 0;\n}\n\n// Validates as many continuation bytes for a multi-byte UTF-8 character as\n// needed or are available. If we see a non-continuation byte where we expect\n// one, we \"replace\" the validated continuation bytes we've seen so far with\n// a single UTF-8 replacement character ('\\ufffd'), to match v8's UTF-8 decoding\n// behavior. The continuation byte check is included three times in the case\n// where all of the continuation bytes for a character exist in the same buffer.\n// It is also done this way as a slight performance increase instead of using a\n// loop.\nfunction utf8CheckExtraBytes(self, buf, p) {\n  if ((buf[0] & 0xC0) !== 0x80) {\n    self.lastNeed = 0;\n    return '\\ufffd';\n  }\n  if (self.lastNeed > 1 && buf.length > 1) {\n    if ((buf[1] & 0xC0) !== 0x80) {\n      self.lastNeed = 1;\n      return '\\ufffd';\n    }\n    if (self.lastNeed > 2 && buf.length > 2) {\n      if ((buf[2] & 0xC0) !== 0x80) {\n        self.lastNeed = 2;\n        return '\\ufffd';\n      }\n    }\n  }\n}\n\n// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.\nfunction utf8FillLast(buf) {\n  var p = this.lastTotal - this.lastNeed;\n  var r = utf8CheckExtraBytes(this, buf, p);\n  if (r !== undefined) return r;\n  if (this.lastNeed <= buf.length) {\n    buf.copy(this.lastChar, p, 0, this.lastNeed);\n    return this.lastChar.toString(this.encoding, 0, this.lastTotal);\n  }\n  buf.copy(this.lastChar, p, 0, buf.length);\n  this.lastNeed -= buf.length;\n}\n\n// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a\n// partial character, the character's bytes are buffered until the required\n// number of bytes are available.\nfunction utf8Text(buf, i) {\n  var total = utf8CheckIncomplete(this, buf, i);\n  if (!this.lastNeed) return buf.toString('utf8', i);\n  this.lastTotal = total;\n  var end = buf.length - (total - this.lastNeed);\n  buf.copy(this.lastChar, 0, end);\n  return buf.toString('utf8', i, end);\n}\n\n// For UTF-8, a replacement character is added when ending on a partial\n// character.\nfunction utf8End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) return r + '\\ufffd';\n  return r;\n}\n\n// UTF-16LE typically needs two bytes per character, but even if we have an even\n// number of bytes available, we need to check if we end on a leading/high\n// surrogate. In that case, we need to wait for the next two bytes in order to\n// decode the last character properly.\nfunction utf16Text(buf, i) {\n  if ((buf.length - i) % 2 === 0) {\n    var r = buf.toString('utf16le', i);\n    if (r) {\n      var c = r.charCodeAt(r.length - 1);\n      if (c >= 0xD800 && c <= 0xDBFF) {\n        this.lastNeed = 2;\n        this.lastTotal = 4;\n        this.lastChar[0] = buf[buf.length - 2];\n        this.lastChar[1] = buf[buf.length - 1];\n        return r.slice(0, -1);\n      }\n    }\n    return r;\n  }\n  this.lastNeed = 1;\n  this.lastTotal = 2;\n  this.lastChar[0] = buf[buf.length - 1];\n  return buf.toString('utf16le', i, buf.length - 1);\n}\n\n// For UTF-16LE we do not explicitly append special replacement characters if we\n// end on a partial character, we simply let v8 handle that.\nfunction utf16End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) {\n    var end = this.lastTotal - this.lastNeed;\n    return r + this.lastChar.toString('utf16le', 0, end);\n  }\n  return r;\n}\n\nfunction base64Text(buf, i) {\n  var n = (buf.length - i) % 3;\n  if (n === 0) return buf.toString('base64', i);\n  this.lastNeed = 3 - n;\n  this.lastTotal = 3;\n  if (n === 1) {\n    this.lastChar[0] = buf[buf.length - 1];\n  } else {\n    this.lastChar[0] = buf[buf.length - 2];\n    this.lastChar[1] = buf[buf.length - 1];\n  }\n  return buf.toString('base64', i, buf.length - n);\n}\n\nfunction base64End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);\n  return r;\n}\n\n// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)\nfunction simpleWrite(buf) {\n  return buf.toString(this.encoding);\n}\n\nfunction simpleEnd(buf) {\n  return buf && buf.length ? this.write(buf) : '';\n}"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 2232, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2238, "column": 0}, "map": {"version":3,"file":"pocketbase.es.mjs","sources":["file:///Users/dezalduasamuel/Desktop/Code/playlist-manager-product/playlist-manager-next/node_modules/.pnpm/pocketbase%400.25.1/node_modules/pocketbase/src/ClientResponseError.ts","file:///Users/dezalduasamuel/Desktop/Code/playlist-manager-product/playlist-manager-next/node_modules/.pnpm/pocketbase%400.25.1/node_modules/pocketbase/src/tools/cookie.ts","file:///Users/dezalduasamuel/Desktop/Code/playlist-manager-product/playlist-manager-next/node_modules/.pnpm/pocketbase%400.25.1/node_modules/pocketbase/src/tools/jwt.ts","file:///Users/dezalduasamuel/Desktop/Code/playlist-manager-product/playlist-manager-next/node_modules/.pnpm/pocketbase%400.25.1/node_modules/pocketbase/src/stores/BaseAuthStore.ts","file:///Users/dezalduasamuel/Desktop/Code/playlist-manager-product/playlist-manager-next/node_modules/.pnpm/pocketbase%400.25.1/node_modules/pocketbase/src/stores/LocalAuthStore.ts","file:///Users/dezalduasamuel/Desktop/Code/playlist-manager-product/playlist-manager-next/node_modules/.pnpm/pocketbase%400.25.1/node_modules/pocketbase/src/services/BaseService.ts","file:///Users/dezalduasamuel/Desktop/Code/playlist-manager-product/playlist-manager-next/node_modules/.pnpm/pocketbase%400.25.1/node_modules/pocketbase/src/services/SettingsService.ts","file:///Users/dezalduasamuel/Desktop/Code/playlist-manager-product/playlist-manager-next/node_modules/.pnpm/pocketbase%400.25.1/node_modules/pocketbase/src/tools/options.ts","file:///Users/dezalduasamuel/Desktop/Code/playlist-manager-product/playlist-manager-next/node_modules/.pnpm/pocketbase%400.25.1/node_modules/pocketbase/src/services/RealtimeService.ts","file:///Users/dezalduasamuel/Desktop/Code/playlist-manager-product/playlist-manager-next/node_modules/.pnpm/pocketbase%400.25.1/node_modules/pocketbase/src/services/CrudService.ts","file:///Users/dezalduasamuel/Desktop/Code/playlist-manager-product/playlist-manager-next/node_modules/.pnpm/pocketbase%400.25.1/node_modules/pocketbase/src/tools/legacy.ts","file:///Users/dezalduasamuel/Desktop/Code/playlist-manager-product/playlist-manager-next/node_modules/.pnpm/pocketbase%400.25.1/node_modules/pocketbase/src/tools/refresh.ts","file:///Users/dezalduasamuel/Desktop/Code/playlist-manager-product/playlist-manager-next/node_modules/.pnpm/pocketbase%400.25.1/node_modules/pocketbase/src/services/RecordService.ts","file:///Users/dezalduasamuel/Desktop/Code/playlist-manager-product/playlist-manager-next/node_modules/.pnpm/pocketbase%400.25.1/node_modules/pocketbase/src/services/CollectionService.ts","file:///Users/dezalduasamuel/Desktop/Code/playlist-manager-product/playlist-manager-next/node_modules/.pnpm/pocketbase%400.25.1/node_modules/pocketbase/src/services/LogService.ts","file:///Users/dezalduasamuel/Desktop/Code/playlist-manager-product/playlist-manager-next/node_modules/.pnpm/pocketbase%400.25.1/node_modules/pocketbase/src/services/HealthService.ts","file:///Users/dezalduasamuel/Desktop/Code/playlist-manager-product/playlist-manager-next/node_modules/.pnpm/pocketbase%400.25.1/node_modules/pocketbase/src/services/FileService.ts","file:///Users/dezalduasamuel/Desktop/Code/playlist-manager-product/playlist-manager-next/node_modules/.pnpm/pocketbase%400.25.1/node_modules/pocketbase/src/services/BackupService.ts","file:///Users/dezalduasamuel/Desktop/Code/playlist-manager-product/playlist-manager-next/node_modules/.pnpm/pocketbase%400.25.1/node_modules/pocketbase/src/services/CronService.ts","file:///Users/dezalduasamuel/Desktop/Code/playlist-manager-product/playlist-manager-next/node_modules/.pnpm/pocketbase%400.25.1/node_modules/pocketbase/src/tools/formdata.ts","file:///Users/dezalduasamuel/Desktop/Code/playlist-manager-product/playlist-manager-next/node_modules/.pnpm/pocketbase%400.25.1/node_modules/pocketbase/src/services/BatchService.ts","file:///Users/dezalduasamuel/Desktop/Code/playlist-manager-product/playlist-manager-next/node_modules/.pnpm/pocketbase%400.25.1/node_modules/pocketbase/src/Client.ts","file:///Users/dezalduasamuel/Desktop/Code/playlist-manager-product/playlist-manager-next/node_modules/.pnpm/pocketbase%400.25.1/node_modules/pocketbase/src/stores/AsyncAuthStore.ts"],"sourcesContent":["/**\n * ClientResponseError is a custom Error class that is intended to wrap\n * and normalize any error thrown by `Client.send()`.\n */\nexport class ClientResponseError extends Error {\n    url: string = \"\";\n    status: number = 0;\n    response: { [key: string]: any } = {};\n    isAbort: boolean = false;\n    originalError: any = null;\n\n    constructor(errData?: any) {\n        super(\"ClientResponseError\");\n\n        // Set the prototype explicitly.\n        // https://github.com/Microsoft/TypeScript-wiki/blob/main/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n        Object.setPrototypeOf(this, ClientResponseError.prototype);\n\n        if (errData !== null && typeof errData === \"object\") {\n            this.url = typeof errData.url === \"string\" ? errData.url : \"\";\n            this.status = typeof errData.status === \"number\" ? errData.status : 0;\n            this.isAbort = !!errData.isAbort;\n            this.originalError = errData.originalError;\n\n            if (errData.response !== null && typeof errData.response === \"object\") {\n                this.response = errData.response;\n            } else if (errData.data !== null && typeof errData.data === \"object\") {\n                this.response = errData.data;\n            } else {\n                this.response = {};\n            }\n        }\n\n        if (!this.originalError && !(errData instanceof ClientResponseError)) {\n            this.originalError = errData;\n        }\n\n        if (typeof DOMException !== \"undefined\" && errData instanceof DOMException) {\n            this.isAbort = true;\n        }\n\n        this.name = \"ClientResponseError \" + this.status;\n        this.message = this.response?.message;\n        if (!this.message) {\n            if (this.isAbort) {\n                this.message =\n                    \"The request was autocancelled. You can find more info in https://github.com/pocketbase/js-sdk#auto-cancellation.\";\n            } else if (this.originalError?.cause?.message?.includes(\"ECONNREFUSED ::1\")) {\n                this.message =\n                    \"Failed to connect to the PocketBase server. Try changing the SDK URL from localhost to 127.0.0.1 (https://github.com/pocketbase/js-sdk/issues/21).\";\n            } else {\n                this.message = \"Something went wrong while processing your request.\";\n            }\n        }\n    }\n\n    /**\n     * Alias for `this.response` for backward compatibility.\n     */\n    get data() {\n        return this.response;\n    }\n\n    /**\n     * Make a POJO's copy of the current error class instance.\n     * @see https://github.com/vuex-orm/vuex-orm/issues/255\n     */\n    toJSON() {\n        return { ...this };\n    }\n}\n","/**\n * -------------------------------------------------------------------\n * Simple cookie parse and serialize utilities mostly based on the\n * node module https://github.com/jshttp/cookie.\n * -------------------------------------------------------------------\n */\n\n/**\n * RegExp to match field-content in RFC 7230 sec 3.2\n *\n * field-content = field-vchar [ 1*( SP / HTAB ) field-vchar ]\n * field-vchar   = VCHAR / obs-text\n * obs-text      = %x80-FF\n */\nconst fieldContentRegExp = /^[\\u0009\\u0020-\\u007e\\u0080-\\u00ff]+$/;\n\nexport interface ParseOptions {\n    decode?: (val: string) => string;\n}\n\n/**\n * Parses the given cookie header string into an object\n * The object has the various cookies as keys(names) => values\n */\nexport function cookieParse(str: string, options?: ParseOptions): { [key: string]: any } {\n    const result: { [key: string]: any } = {};\n\n    if (typeof str !== \"string\") {\n        return result;\n    }\n\n    const opt = Object.assign({}, options || {});\n    const decode = opt.decode || defaultDecode;\n\n    let index = 0;\n    while (index < str.length) {\n        const eqIdx = str.indexOf(\"=\", index);\n\n        // no more cookie pairs\n        if (eqIdx === -1) {\n            break;\n        }\n\n        let endIdx = str.indexOf(\";\", index);\n\n        if (endIdx === -1) {\n            endIdx = str.length;\n        } else if (endIdx < eqIdx) {\n            // backtrack on prior semicolon\n            index = str.lastIndexOf(\";\", eqIdx - 1) + 1;\n            continue;\n        }\n\n        const key = str.slice(index, eqIdx).trim();\n\n        // only assign once\n        if (undefined === result[key]) {\n            let val = str.slice(eqIdx + 1, endIdx).trim();\n\n            // quoted values\n            if (val.charCodeAt(0) === 0x22) {\n                val = val.slice(1, -1);\n            }\n\n            try {\n                result[key] = decode(val);\n            } catch (_) {\n                result[key] = val; // no decoding\n            }\n        }\n\n        index = endIdx + 1;\n    }\n\n    return result;\n}\n\nexport interface SerializeOptions {\n    encode?: (val: string | number | boolean) => string;\n    maxAge?: number;\n    domain?: string;\n    path?: string;\n    expires?: Date;\n    httpOnly?: boolean;\n    secure?: boolean;\n    priority?: string;\n    sameSite?: boolean | string;\n}\n\n/**\n * Serialize data into a cookie header.\n *\n * Serialize the a name value pair into a cookie string suitable for\n * http headers. An optional options object specified cookie parameters.\n *\n * ```js\n * cookieSerialize('foo', 'bar', { httpOnly: true }) // \"foo=bar; httpOnly\"\n * ```\n */\nexport function cookieSerialize(\n    name: string,\n    val: string,\n    options?: SerializeOptions,\n): string {\n    const opt = Object.assign({}, options || {});\n    const encode = opt.encode || defaultEncode;\n\n    if (!fieldContentRegExp.test(name)) {\n        throw new TypeError(\"argument name is invalid\");\n    }\n\n    const value = encode(val);\n\n    if (value && !fieldContentRegExp.test(value)) {\n        throw new TypeError(\"argument val is invalid\");\n    }\n\n    let result = name + \"=\" + value;\n\n    if (opt.maxAge != null) {\n        const maxAge = opt.maxAge - 0;\n\n        if (isNaN(maxAge) || !isFinite(maxAge)) {\n            throw new TypeError(\"option maxAge is invalid\");\n        }\n\n        result += \"; Max-Age=\" + Math.floor(maxAge);\n    }\n\n    if (opt.domain) {\n        if (!fieldContentRegExp.test(opt.domain)) {\n            throw new TypeError(\"option domain is invalid\");\n        }\n\n        result += \"; Domain=\" + opt.domain;\n    }\n\n    if (opt.path) {\n        if (!fieldContentRegExp.test(opt.path)) {\n            throw new TypeError(\"option path is invalid\");\n        }\n\n        result += \"; Path=\" + opt.path;\n    }\n\n    if (opt.expires) {\n        if (!isDate(opt.expires) || isNaN(opt.expires.valueOf())) {\n            throw new TypeError(\"option expires is invalid\");\n        }\n\n        result += \"; Expires=\" + opt.expires.toUTCString();\n    }\n\n    if (opt.httpOnly) {\n        result += \"; HttpOnly\";\n    }\n\n    if (opt.secure) {\n        result += \"; Secure\";\n    }\n\n    if (opt.priority) {\n        const priority =\n            typeof opt.priority === \"string\" ? opt.priority.toLowerCase() : opt.priority;\n\n        switch (priority) {\n            case \"low\":\n                result += \"; Priority=Low\";\n                break;\n            case \"medium\":\n                result += \"; Priority=Medium\";\n                break;\n            case \"high\":\n                result += \"; Priority=High\";\n                break;\n            default:\n                throw new TypeError(\"option priority is invalid\");\n        }\n    }\n\n    if (opt.sameSite) {\n        const sameSite =\n            typeof opt.sameSite === \"string\" ? opt.sameSite.toLowerCase() : opt.sameSite;\n\n        switch (sameSite) {\n            case true:\n                result += \"; SameSite=Strict\";\n                break;\n            case \"lax\":\n                result += \"; SameSite=Lax\";\n                break;\n            case \"strict\":\n                result += \"; SameSite=Strict\";\n                break;\n            case \"none\":\n                result += \"; SameSite=None\";\n                break;\n            default:\n                throw new TypeError(\"option sameSite is invalid\");\n        }\n    }\n\n    return result;\n}\n\n/**\n * Default URL-decode string value function.\n * Optimized to skip native call when no `%`.\n */\nfunction defaultDecode(val: string): string {\n    return val.indexOf(\"%\") !== -1 ? decodeURIComponent(val) : val;\n}\n\n/**\n * Default URL-encode value function.\n */\nfunction defaultEncode(val: string | number | boolean): string {\n    return encodeURIComponent(val);\n}\n\n/**\n * Determines if value is a Date.\n */\nfunction isDate(val: any): boolean {\n    return Object.prototype.toString.call(val) === \"[object Date]\" || val instanceof Date;\n}\n","// @todo remove after https://github.com/reactwg/react-native-releases/issues/287\nconst isReactNative =\n    (typeof navigator !== \"undefined\" && navigator.product === \"ReactNative\") ||\n    (typeof global !== \"undefined\" && (global as any).HermesInternal);\n\nlet atobPolyfill: Function;\nif (typeof atob === \"function\" && !isReactNative) {\n    atobPolyfill = atob;\n} else {\n    /**\n     * The code was extracted from:\n     * https://github.com/davidchambers/Base64.js\n     */\n    atobPolyfill = (input: any) => {\n        const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n\n        let str = String(input).replace(/=+$/, \"\");\n        if (str.length % 4 == 1) {\n            throw new Error(\n                \"'atob' failed: The string to be decoded is not correctly encoded.\",\n            );\n        }\n\n        for (\n            // initialize result and counters\n            var bc = 0, bs, buffer, idx = 0, output = \"\";\n            // get next character\n            (buffer = str.charAt(idx++));\n            // character found in table? initialize bit storage and add its ascii value;\n            ~buffer &&\n            ((bs = bc % 4 ? (bs as any) * 64 + buffer : buffer),\n            // and if not first of each 4 characters,\n            // convert the first 8 bits to one ascii character\n            bc++ % 4)\n                ? (output += String.fromCharCode(255 & (bs >> ((-2 * bc) & 6))))\n                : 0\n        ) {\n            // try to find character in table (0-63, not found => -1)\n            buffer = chars.indexOf(buffer);\n        }\n\n        return output;\n    };\n}\n\n/**\n * Returns JWT token's payload data.\n */\nexport function getTokenPayload(token: string): { [key: string]: any } {\n    if (token) {\n        try {\n            const encodedPayload = decodeURIComponent(\n                atobPolyfill(token.split(\".\")[1])\n                    .split(\"\")\n                    .map(function (c: string) {\n                        return \"%\" + (\"00\" + c.charCodeAt(0).toString(16)).slice(-2);\n                    })\n                    .join(\"\"),\n            );\n\n            return JSON.parse(encodedPayload) || {};\n        } catch (e) {}\n    }\n\n    return {};\n}\n\n/**\n * Checks whether a JWT token is expired or not.\n * Tokens without `exp` payload key are considered valid.\n * Tokens with empty payload (eg. invalid token strings) are considered expired.\n *\n * @param token The token to check.\n * @param [expirationThreshold] Time in seconds that will be subtracted from the token `exp` property.\n */\nexport function isTokenExpired(token: string, expirationThreshold = 0): boolean {\n    let payload = getTokenPayload(token);\n\n    if (\n        Object.keys(payload).length > 0 &&\n        (!payload.exp || payload.exp - expirationThreshold > Date.now() / 1000)\n    ) {\n        return false;\n    }\n\n    return true;\n}\n","import { cookieParse, cookieSerialize, SerializeOptions } from \"@/tools/cookie\";\nimport { isTokenExpired, getTokenPayload } from \"@/tools/jwt\";\nimport { RecordModel } from \"@/tools/dtos\";\n\nexport type AuthRecord = RecordModel | null;\n\nexport type AuthModel = AuthRecord; // for backward compatibility\n\nexport type OnStoreChangeFunc = (token: string, record: AuthRecord) => void;\n\nconst defaultCookieKey = \"pb_auth\";\n\n/**\n * Base AuthStore class that stores the auth state in runtime memory (aka. only for the duration of the store instane).\n *\n * Usually you wouldn't use it directly and instead use the builtin LocalAuthStore, AsyncAuthStore\n * or extend it with your own custom implementation.\n */\nexport class BaseAuthStore {\n    protected baseToken: string = \"\";\n    protected baseModel: AuthRecord = null;\n\n    private _onChangeCallbacks: Array<OnStoreChangeFunc> = [];\n\n    /**\n     * Retrieves the stored token (if any).\n     */\n    get token(): string {\n        return this.baseToken;\n    }\n\n    /**\n     * Retrieves the stored model data (if any).\n     */\n    get record(): AuthRecord {\n        return this.baseModel;\n    }\n\n    /**\n     * @deprecated use `record` instead.\n     */\n    get model(): AuthRecord {\n        return this.baseModel;\n    }\n\n    /**\n     * Loosely checks if the store has valid token (aka. existing and unexpired exp claim).\n     */\n    get isValid(): boolean {\n        return !isTokenExpired(this.token);\n    }\n\n    /**\n     * Loosely checks whether the currently loaded store state is for superuser.\n     *\n     * Alternatively you can also compare directly `pb.authStore.record?.collectionName`.\n     */\n    get isSuperuser(): boolean {\n        let payload = getTokenPayload(this.token);\n\n        return (\n            payload.type == \"auth\" &&\n            (this.record?.collectionName == \"_superusers\" ||\n                // fallback in case the record field is not populated and assuming\n                // that the collection crc32 checksum id wasn't manually changed\n                (!this.record?.collectionName &&\n                    payload.collectionId == \"pbc_3142635823\"))\n        );\n    }\n\n    /**\n     * @deprecated use `isSuperuser` instead or simply check the record.collectionName property.\n     */\n    get isAdmin(): boolean {\n        console.warn(\n            \"Please replace pb.authStore.isAdmin with pb.authStore.isSuperuser OR simply check the value of pb.authStore.record?.collectionName\",\n        );\n        return this.isSuperuser;\n    }\n\n    /**\n     * @deprecated use `!isSuperuser` instead or simply check the record.collectionName property.\n     */\n    get isAuthRecord(): boolean {\n        console.warn(\n            \"Please replace pb.authStore.isAuthRecord with !pb.authStore.isSuperuser OR simply check the value of pb.authStore.record?.collectionName\",\n        );\n        return getTokenPayload(this.token).type == \"auth\" && !this.isSuperuser;\n    }\n\n    /**\n     * Saves the provided new token and model data in the auth store.\n     */\n    save(token: string, record?: AuthRecord): void {\n        this.baseToken = token || \"\";\n        this.baseModel = record || null;\n\n        this.triggerChange();\n    }\n\n    /**\n     * Removes the stored token and model data form the auth store.\n     */\n    clear(): void {\n        this.baseToken = \"\";\n        this.baseModel = null;\n        this.triggerChange();\n    }\n\n    /**\n     * Parses the provided cookie string and updates the store state\n     * with the cookie's token and model data.\n     *\n     * NB! This function doesn't validate the token or its data.\n     * Usually this isn't a concern if you are interacting only with the\n     * PocketBase API because it has the proper server-side security checks in place,\n     * but if you are using the store `isValid` state for permission controls\n     * in a node server (eg. SSR), then it is recommended to call `authRefresh()`\n     * after loading the cookie to ensure an up-to-date token and model state.\n     * For example:\n     *\n     * ```js\n     * pb.authStore.loadFromCookie(\"cookie string...\");\n     *\n     * try {\n     *     // get an up-to-date auth store state by veryfing and refreshing the loaded auth model (if any)\n     *     pb.authStore.isValid && await pb.collection('users').authRefresh();\n     * } catch (_) {\n     *     // clear the auth store on failed refresh\n     *     pb.authStore.clear();\n     * }\n     * ```\n     */\n    loadFromCookie(cookie: string, key = defaultCookieKey): void {\n        const rawData = cookieParse(cookie || \"\")[key] || \"\";\n\n        let data: { [key: string]: any } = {};\n        try {\n            data = JSON.parse(rawData);\n            // normalize\n            if (typeof data === null || typeof data !== \"object\" || Array.isArray(data)) {\n                data = {};\n            }\n        } catch (_) {}\n\n        this.save(data.token || \"\", data.record || data.model || null);\n    }\n\n    /**\n     * Exports the current store state as cookie string.\n     *\n     * By default the following optional attributes are added:\n     * - Secure\n     * - HttpOnly\n     * - SameSite=Strict\n     * - Path=/\n     * - Expires={the token expiration date}\n     *\n     * NB! If the generated cookie exceeds 4096 bytes, this method will\n     * strip the model data to the bare minimum to try to fit within the\n     * recommended size in https://www.rfc-editor.org/rfc/rfc6265#section-6.1.\n     */\n    exportToCookie(options?: SerializeOptions, key = defaultCookieKey): string {\n        const defaultOptions: SerializeOptions = {\n            secure: true,\n            sameSite: true,\n            httpOnly: true,\n            path: \"/\",\n        };\n\n        // extract the token expiration date\n        const payload = getTokenPayload(this.token);\n        if (payload?.exp) {\n            defaultOptions.expires = new Date(payload.exp * 1000);\n        } else {\n            defaultOptions.expires = new Date(\"1970-01-01\");\n        }\n\n        // merge with the user defined options\n        options = Object.assign({}, defaultOptions, options);\n\n        const rawData = {\n            token: this.token,\n            record: this.record ? JSON.parse(JSON.stringify(this.record)) : null,\n        };\n\n        let result = cookieSerialize(key, JSON.stringify(rawData), options);\n\n        const resultLength =\n            typeof Blob !== \"undefined\" ? new Blob([result]).size : result.length;\n\n        // strip down the model data to the bare minimum\n        if (rawData.record && resultLength > 4096) {\n            rawData.record = { id: rawData.record?.id, email: rawData.record?.email };\n            const extraProps = [\"collectionId\", \"collectionName\", \"verified\"];\n            for (const prop in this.record) {\n                if (extraProps.includes(prop)) {\n                    rawData.record[prop] = this.record[prop];\n                }\n            }\n            result = cookieSerialize(key, JSON.stringify(rawData), options);\n        }\n\n        return result;\n    }\n\n    /**\n     * Register a callback function that will be called on store change.\n     *\n     * You can set the `fireImmediately` argument to true in order to invoke\n     * the provided callback right after registration.\n     *\n     * Returns a removal function that you could call to \"unsubscribe\" from the changes.\n     */\n    onChange(callback: OnStoreChangeFunc, fireImmediately = false): () => void {\n        this._onChangeCallbacks.push(callback);\n\n        if (fireImmediately) {\n            callback(this.token, this.record);\n        }\n\n        return () => {\n            for (let i = this._onChangeCallbacks.length - 1; i >= 0; i--) {\n                if (this._onChangeCallbacks[i] == callback) {\n                    delete this._onChangeCallbacks[i]; // removes the function reference\n                    this._onChangeCallbacks.splice(i, 1); // reindex the array\n                    return;\n                }\n            }\n        };\n    }\n\n    protected triggerChange(): void {\n        for (const callback of this._onChangeCallbacks) {\n            callback && callback(this.token, this.record);\n        }\n    }\n}\n","import { BaseAuthStore, AuthRecord } from \"@/stores/BaseAuthStore\";\n\n/**\n * The default token store for browsers with auto fallback\n * to runtime/memory if local storage is undefined (e.g. in node env).\n */\nexport class LocalAuthStore extends BaseAuthStore {\n    private storageFallback: { [key: string]: any } = {};\n    private storageKey: string;\n\n    constructor(storageKey = \"pocketbase_auth\") {\n        super();\n\n        this.storageKey = storageKey;\n\n        this._bindStorageEvent();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    get token(): string {\n        const data = this._storageGet(this.storageKey) || {};\n\n        return data.token || \"\";\n    }\n\n    /**\n     * @inheritdoc\n     */\n    get record(): AuthRecord {\n        const data = this._storageGet(this.storageKey) || {};\n\n        return data.record || data.model || null;\n    }\n\n    /**\n     * @deprecated use `record` instead.\n     */\n    get model(): AuthRecord {\n        return this.record;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    save(token: string, record?: AuthRecord) {\n        this._storageSet(this.storageKey, {\n            token: token,\n            record: record,\n        });\n\n        super.save(token, record);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    clear() {\n        this._storageRemove(this.storageKey);\n\n        super.clear();\n    }\n\n    // ---------------------------------------------------------------\n    // Internal helpers:\n    // ---------------------------------------------------------------\n\n    /**\n     * Retrieves `key` from the browser's local storage\n     * (or runtime/memory if local storage is undefined).\n     */\n    private _storageGet(key: string): any {\n        if (typeof window !== \"undefined\" && window?.localStorage) {\n            const rawValue = window.localStorage.getItem(key) || \"\";\n            try {\n                return JSON.parse(rawValue);\n            } catch (e) {\n                // not a json\n                return rawValue;\n            }\n        }\n\n        // fallback\n        return this.storageFallback[key];\n    }\n\n    /**\n     * Stores a new data in the browser's local storage\n     * (or runtime/memory if local storage is undefined).\n     */\n    private _storageSet(key: string, value: any) {\n        if (typeof window !== \"undefined\" && window?.localStorage) {\n            // store in local storage\n            let normalizedVal = value;\n            if (typeof value !== \"string\") {\n                normalizedVal = JSON.stringify(value);\n            }\n            window.localStorage.setItem(key, normalizedVal);\n        } else {\n            // store in fallback\n            this.storageFallback[key] = value;\n        }\n    }\n\n    /**\n     * Removes `key` from the browser's local storage and the runtime/memory.\n     */\n    private _storageRemove(key: string) {\n        // delete from local storage\n        if (typeof window !== \"undefined\" && window?.localStorage) {\n            window.localStorage?.removeItem(key);\n        }\n\n        // delete from fallback\n        delete this.storageFallback[key];\n    }\n\n    /**\n     * Updates the current store state on localStorage change.\n     */\n    private _bindStorageEvent() {\n        if (\n            typeof window === \"undefined\" ||\n            !window?.localStorage ||\n            !window.addEventListener\n        ) {\n            return;\n        }\n\n        window.addEventListener(\"storage\", (e) => {\n            if (e.key != this.storageKey) {\n                return;\n            }\n\n            const data = this._storageGet(this.storageKey) || {};\n\n            super.save(data.token || \"\", data.record || data.model || null);\n        });\n    }\n}\n","import Client from \"@/Client\";\n\n/**\n * BaseService class that should be inherited from all API services.\n */\nexport abstract class BaseService {\n    readonly client: Client;\n\n    constructor(client: Client) {\n        this.client = client;\n    }\n}\n","import { BaseService } from \"@/services/BaseService\";\nimport { CommonOptions } from \"@/tools/options\";\n\ninterface appleClientSecret {\n    secret: string;\n}\n\nexport class SettingsService extends BaseService {\n    /**\n     * Fetch all available app settings.\n     *\n     * @throws {ClientResponseError}\n     */\n    async getAll(options?: CommonOptions): Promise<{ [key: string]: any }> {\n        options = Object.assign(\n            {\n                method: \"GET\",\n            },\n            options,\n        );\n\n        return this.client.send(\"/api/settings\", options);\n    }\n\n    /**\n     * Bulk updates app settings.\n     *\n     * @throws {ClientResponseError}\n     */\n    async update(\n        bodyParams?: { [key: string]: any } | FormData,\n        options?: CommonOptions,\n    ): Promise<{ [key: string]: any }> {\n        options = Object.assign(\n            {\n                method: \"PATCH\",\n                body: bodyParams,\n            },\n            options,\n        );\n\n        return this.client.send(\"/api/settings\", options);\n    }\n\n    /**\n     * Performs a S3 filesystem connection test.\n     *\n     * The currently supported `filesystem` are \"storage\" and \"backups\".\n     *\n     * @throws {ClientResponseError}\n     */\n    async testS3(\n        filesystem: string = \"storage\",\n        options?: CommonOptions,\n    ): Promise<boolean> {\n        options = Object.assign(\n            {\n                method: \"POST\",\n                body: {\n                    filesystem: filesystem,\n                },\n            },\n            options,\n        );\n\n        return this.client.send(\"/api/settings/test/s3\", options).then(() => true);\n    }\n\n    /**\n     * Sends a test email.\n     *\n     * The possible `emailTemplate` values are:\n     * - verification\n     * - password-reset\n     * - email-change\n     *\n     * @throws {ClientResponseError}\n     */\n    async testEmail(\n        collectionIdOrName: string,\n        toEmail: string,\n        emailTemplate: string,\n        options?: CommonOptions,\n    ): Promise<boolean> {\n        options = Object.assign(\n            {\n                method: \"POST\",\n                body: {\n                    email: toEmail,\n                    template: emailTemplate,\n                    collection: collectionIdOrName,\n                },\n            },\n            options,\n        );\n\n        return this.client.send(\"/api/settings/test/email\", options).then(() => true);\n    }\n\n    /**\n     * Generates a new Apple OAuth2 client secret.\n     *\n     * @throws {ClientResponseError}\n     */\n    async generateAppleClientSecret(\n        clientId: string,\n        teamId: string,\n        keyId: string,\n        privateKey: string,\n        duration: number,\n        options?: CommonOptions,\n    ): Promise<appleClientSecret> {\n        options = Object.assign(\n            {\n                method: \"POST\",\n                body: {\n                    clientId,\n                    teamId,\n                    keyId,\n                    privateKey,\n                    duration,\n                },\n            },\n            options,\n        );\n\n        return this.client.send(\"/api/settings/apple/generate-client-secret\", options);\n    }\n}\n","export interface SendOptions extends RequestInit {\n    // for backward compatibility and to minimize the verbosity,\n    // any top-level field that doesn't exist in RequestInit or the\n    // fields below will be treated as query parameter.\n    [key: string]: any;\n\n    /**\n     * Optional custom fetch function to use for sending the request.\n     */\n    fetch?: (url: RequestInfo | URL, config?: RequestInit) => Promise<Response>;\n\n    /**\n     * Custom headers to send with the requests.\n     */\n    headers?: { [key: string]: string };\n\n    /**\n     * The body of the request (serialized automatically for json requests).\n     */\n    body?: any;\n\n    /**\n     * Query parameters that will be appended to the request url.\n     */\n    query?: { [key: string]: any };\n\n    /**\n     * @deprecated use `query` instead\n     *\n     * for backward-compatibility `params` values are merged with `query`,\n     * but this option may get removed in the final v1 release\n     */\n    params?: { [key: string]: any };\n\n    /**\n     * The request identifier that can be used to cancel pending requests.\n     */\n    requestKey?: string | null;\n\n    /**\n     * @deprecated use `requestKey:string` instead\n     */\n    $cancelKey?: string;\n\n    /**\n     * @deprecated use `requestKey:null` instead\n     */\n    $autoCancel?: boolean;\n}\n\nexport interface CommonOptions extends SendOptions {\n    fields?: string;\n}\n\nexport interface ListOptions extends CommonOptions {\n    page?: number;\n    perPage?: number;\n    sort?: string;\n    filter?: string;\n    skipTotal?: boolean;\n}\n\nexport interface FullListOptions extends ListOptions {\n    batch?: number;\n}\n\nexport interface RecordOptions extends CommonOptions {\n    expand?: string;\n}\n\nexport interface RecordListOptions extends ListOptions, RecordOptions {}\n\nexport interface RecordFullListOptions extends FullListOptions, RecordOptions {}\n\nexport interface RecordSubscribeOptions extends SendOptions {\n    fields?: string;\n    filter?: string;\n    expand?: string;\n}\n\nexport interface LogStatsOptions extends CommonOptions {\n    filter?: string;\n}\n\nexport interface FileOptions extends CommonOptions {\n    thumb?: string;\n    download?: boolean;\n}\n\nexport interface AuthOptions extends CommonOptions {\n    /**\n     * If autoRefreshThreshold is set it will take care to auto refresh\n     * when necessary the auth data before each request to ensure that\n     * the auth state is always valid.\n     *\n     * The value must be in seconds, aka. the amount of seconds\n     * that will be subtracted from the current token `exp` claim in order\n     * to determine whether it is going to expire within the specified time threshold.\n     *\n     * For example, if you want to auto refresh the token if it is\n     * going to expire in the next 30mins (or already has expired),\n     * it can be set to `1800`\n     */\n    autoRefreshThreshold?: number;\n}\n\n// -------------------------------------------------------------------\n\n// list of known SendOptions keys (everything else is treated as query param)\nconst knownSendOptionsKeys = [\n    \"requestKey\",\n    \"$cancelKey\",\n    \"$autoCancel\",\n    \"fetch\",\n    \"headers\",\n    \"body\",\n    \"query\",\n    \"params\",\n    // ---,\n    \"cache\",\n    \"credentials\",\n    \"headers\",\n    \"integrity\",\n    \"keepalive\",\n    \"method\",\n    \"mode\",\n    \"redirect\",\n    \"referrer\",\n    \"referrerPolicy\",\n    \"signal\",\n    \"window\",\n];\n\n// modifies in place the provided options by moving unknown send options as query parameters.\nexport function normalizeUnknownQueryParams(options?: SendOptions): void {\n    if (!options) {\n        return;\n    }\n\n    options.query = options.query || {};\n    for (let key in options) {\n        if (knownSendOptionsKeys.includes(key)) {\n            continue;\n        }\n\n        options.query[key] = options[key];\n        delete options[key];\n    }\n}\n\nexport function serializeQueryParams(params: { [key: string]: any }): string {\n    const result: Array<string> = [];\n\n    for (const key in params) {\n        if (params[key] === null || typeof params[key] === \"undefined\") {\n            // skip null or undefined query params\n            continue;\n        }\n\n        const value = params[key];\n        const encodedKey = encodeURIComponent(key);\n\n        if (Array.isArray(value)) {\n            // repeat array params\n            for (const v of value) {\n                result.push(encodedKey + \"=\" + encodeURIComponent(v));\n            }\n        } else if (value instanceof Date) {\n            result.push(encodedKey + \"=\" + encodeURIComponent(value.toISOString()));\n        } else if (typeof value !== null && typeof value === \"object\") {\n            result.push(encodedKey + \"=\" + encodeURIComponent(JSON.stringify(value)));\n        } else {\n            result.push(encodedKey + \"=\" + encodeURIComponent(value));\n        }\n    }\n\n    return result.join(\"&\");\n}\n","import { ClientResponseError } from \"@/ClientResponseError\";\nimport { BaseService } from \"@/services/BaseService\";\nimport { SendOptions, normalizeUnknownQueryParams } from \"@/tools/options\";\n\ninterface promiseCallbacks {\n    resolve: Function;\n    reject: Function;\n}\n\ntype Subscriptions = { [key: string]: Array<EventListener> };\n\nexport type UnsubscribeFunc = () => Promise<void>;\n\nexport class RealtimeService extends BaseService {\n    clientId: string = \"\";\n\n    private eventSource: EventSource | null = null;\n    private subscriptions: Subscriptions = {};\n    private lastSentSubscriptions: Array<string> = [];\n    private connectTimeoutId: any;\n    private maxConnectTimeout: number = 15000;\n    private reconnectTimeoutId: any;\n    private reconnectAttempts: number = 0;\n    private maxReconnectAttempts: number = Infinity;\n    private predefinedReconnectIntervals: Array<number> = [\n        200, 300, 500, 1000, 1200, 1500, 2000,\n    ];\n    private pendingConnects: Array<promiseCallbacks> = [];\n\n    /**\n     * Returns whether the realtime connection has been established.\n     */\n    get isConnected(): boolean {\n        return !!this.eventSource && !!this.clientId && !this.pendingConnects.length;\n    }\n\n    /**\n     * An optional hook that is invoked when the realtime client disconnects\n     * either when unsubscribing from all subscriptions or when the\n     * connection was interrupted or closed by the server.\n     *\n     * The received argument could be used to determine whether the disconnect\n     * is a result from unsubscribing (`activeSubscriptions.length == 0`)\n     * or because of network/server error (`activeSubscriptions.length > 0`).\n     *\n     * If you want to listen for the opposite, aka. when the client connection is established,\n     * subscribe to the `PB_CONNECT` event.\n     */\n    onDisconnect?: (activeSubscriptions: Array<string>) => void;\n\n    /**\n     * Register the subscription listener.\n     *\n     * You can subscribe multiple times to the same topic.\n     *\n     * If the SSE connection is not started yet,\n     * this method will also initialize it.\n     */\n    async subscribe(\n        topic: string,\n        callback: (data: any) => void,\n        options?: SendOptions,\n    ): Promise<UnsubscribeFunc> {\n        if (!topic) {\n            throw new Error(\"topic must be set.\");\n        }\n\n        let key = topic;\n\n        // serialize and append the topic options (if any)\n        if (options) {\n            options = Object.assign({}, options); // shallow copy\n            normalizeUnknownQueryParams(options);\n            const serialized =\n                \"options=\" +\n                encodeURIComponent(\n                    JSON.stringify({ query: options.query, headers: options.headers }),\n                );\n            key += (key.includes(\"?\") ? \"&\" : \"?\") + serialized;\n        }\n\n        const listener = function (e: Event) {\n            const msgEvent = e as MessageEvent;\n\n            let data;\n            try {\n                data = JSON.parse(msgEvent?.data);\n            } catch {}\n\n            callback(data || {});\n        };\n\n        // store the listener\n        if (!this.subscriptions[key]) {\n            this.subscriptions[key] = [];\n        }\n        this.subscriptions[key].push(listener);\n\n        if (!this.isConnected) {\n            // initialize sse connection\n            await this.connect();\n        } else if (this.subscriptions[key].length === 1) {\n            // send the updated subscriptions (if it is the first for the key)\n            await this.submitSubscriptions();\n        } else {\n            // only register the listener\n            this.eventSource?.addEventListener(key, listener);\n        }\n\n        return async (): Promise<void> => {\n            return this.unsubscribeByTopicAndListener(topic, listener);\n        };\n    }\n\n    /**\n     * Unsubscribe from all subscription listeners with the specified topic.\n     *\n     * If `topic` is not provided, then this method will unsubscribe\n     * from all active subscriptions.\n     *\n     * This method is no-op if there are no active subscriptions.\n     *\n     * The related sse connection will be autoclosed if after the\n     * unsubscribe operation there are no active subscriptions left.\n     */\n    async unsubscribe(topic?: string): Promise<void> {\n        let needToSubmit = false;\n\n        if (!topic) {\n            // remove all subscriptions\n            this.subscriptions = {};\n        } else {\n            // remove all listeners related to the topic\n            const subs = this.getSubscriptionsByTopic(topic);\n            for (let key in subs) {\n                if (!this.hasSubscriptionListeners(key)) {\n                    continue; // already unsubscribed\n                }\n\n                for (let listener of this.subscriptions[key]) {\n                    this.eventSource?.removeEventListener(key, listener);\n                }\n                delete this.subscriptions[key];\n\n                // mark for subscriptions change submit if there are no other listeners\n                if (!needToSubmit) {\n                    needToSubmit = true;\n                }\n            }\n        }\n\n        if (!this.hasSubscriptionListeners()) {\n            // no other active subscriptions -> close the sse connection\n            this.disconnect();\n        } else if (needToSubmit) {\n            await this.submitSubscriptions();\n        }\n    }\n\n    /**\n     * Unsubscribe from all subscription listeners starting with the specified topic prefix.\n     *\n     * This method is no-op if there are no active subscriptions with the specified topic prefix.\n     *\n     * The related sse connection will be autoclosed if after the\n     * unsubscribe operation there are no active subscriptions left.\n     */\n    async unsubscribeByPrefix(keyPrefix: string): Promise<void> {\n        let hasAtleastOneTopic = false;\n        for (let key in this.subscriptions) {\n            // \"?\" so that it can be used as end delimiter for the prefix\n            if (!(key + \"?\").startsWith(keyPrefix)) {\n                continue;\n            }\n\n            hasAtleastOneTopic = true;\n            for (let listener of this.subscriptions[key]) {\n                this.eventSource?.removeEventListener(key, listener);\n            }\n            delete this.subscriptions[key];\n        }\n\n        if (!hasAtleastOneTopic) {\n            return; // nothing to unsubscribe from\n        }\n\n        if (this.hasSubscriptionListeners()) {\n            // submit the deleted subscriptions\n            await this.submitSubscriptions();\n        } else {\n            // no other active subscriptions -> close the sse connection\n            this.disconnect();\n        }\n    }\n\n    /**\n     * Unsubscribe from all subscriptions matching the specified topic and listener function.\n     *\n     * This method is no-op if there are no active subscription with\n     * the specified topic and listener.\n     *\n     * The related sse connection will be autoclosed if after the\n     * unsubscribe operation there are no active subscriptions left.\n     */\n    async unsubscribeByTopicAndListener(\n        topic: string,\n        listener: EventListener,\n    ): Promise<void> {\n        let needToSubmit = false;\n\n        const subs = this.getSubscriptionsByTopic(topic);\n        for (let key in subs) {\n            if (\n                !Array.isArray(this.subscriptions[key]) ||\n                !this.subscriptions[key].length\n            ) {\n                continue; // already unsubscribed\n            }\n\n            let exist = false;\n            for (let i = this.subscriptions[key].length - 1; i >= 0; i--) {\n                if (this.subscriptions[key][i] !== listener) {\n                    continue;\n                }\n\n                exist = true; // has at least one matching listener\n                delete this.subscriptions[key][i]; // removes the function reference\n                this.subscriptions[key].splice(i, 1); // reindex the array\n                this.eventSource?.removeEventListener(key, listener);\n            }\n            if (!exist) {\n                continue;\n            }\n\n            // remove the key from the subscriptions list if there are no other listeners\n            if (!this.subscriptions[key].length) {\n                delete this.subscriptions[key];\n            }\n\n            // mark for subscriptions change submit if there are no other listeners\n            if (!needToSubmit && !this.hasSubscriptionListeners(key)) {\n                needToSubmit = true;\n            }\n        }\n\n        if (!this.hasSubscriptionListeners()) {\n            // no other active subscriptions -> close the sse connection\n            this.disconnect();\n        } else if (needToSubmit) {\n            await this.submitSubscriptions();\n        }\n    }\n\n    private hasSubscriptionListeners(keyToCheck?: string): boolean {\n        this.subscriptions = this.subscriptions || {};\n\n        // check the specified key\n        if (keyToCheck) {\n            return !!this.subscriptions[keyToCheck]?.length;\n        }\n\n        // check for at least one non-empty subscription\n        for (let key in this.subscriptions) {\n            if (!!this.subscriptions[key]?.length) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    private async submitSubscriptions(): Promise<void> {\n        if (!this.clientId) {\n            return; // no client/subscriber\n        }\n\n        // optimistic update\n        this.addAllSubscriptionListeners();\n\n        this.lastSentSubscriptions = this.getNonEmptySubscriptionKeys();\n\n        return this.client\n            .send(\"/api/realtime\", {\n                method: \"POST\",\n                body: {\n                    clientId: this.clientId,\n                    subscriptions: this.lastSentSubscriptions,\n                },\n                requestKey: this.getSubscriptionsCancelKey(),\n            })\n            .catch((err) => {\n                if (err?.isAbort) {\n                    return; // silently ignore aborted pending requests\n                }\n                throw err;\n            });\n    }\n\n    private getSubscriptionsCancelKey(): string {\n        return \"realtime_\" + this.clientId;\n    }\n\n    private getSubscriptionsByTopic(topic: string): Subscriptions {\n        const result: Subscriptions = {};\n\n        // \"?\" so that it can be used as end delimiter for the topic\n        topic = topic.includes(\"?\") ? topic : topic + \"?\";\n\n        for (let key in this.subscriptions) {\n            if ((key + \"?\").startsWith(topic)) {\n                result[key] = this.subscriptions[key];\n            }\n        }\n\n        return result;\n    }\n\n    private getNonEmptySubscriptionKeys(): Array<string> {\n        const result: Array<string> = [];\n\n        for (let key in this.subscriptions) {\n            if (this.subscriptions[key].length) {\n                result.push(key);\n            }\n        }\n\n        return result;\n    }\n\n    private addAllSubscriptionListeners(): void {\n        if (!this.eventSource) {\n            return;\n        }\n\n        this.removeAllSubscriptionListeners();\n\n        for (let key in this.subscriptions) {\n            for (let listener of this.subscriptions[key]) {\n                this.eventSource.addEventListener(key, listener);\n            }\n        }\n    }\n\n    private removeAllSubscriptionListeners(): void {\n        if (!this.eventSource) {\n            return;\n        }\n\n        for (let key in this.subscriptions) {\n            for (let listener of this.subscriptions[key]) {\n                this.eventSource.removeEventListener(key, listener);\n            }\n        }\n    }\n\n    private async connect(): Promise<void> {\n        if (this.reconnectAttempts > 0) {\n            // immediately resolve the promise to avoid indefinitely\n            // blocking the client during reconnection\n            return;\n        }\n\n        return new Promise((resolve, reject) => {\n            this.pendingConnects.push({ resolve, reject });\n\n            if (this.pendingConnects.length > 1) {\n                // all promises will be resolved once the connection is established\n                return;\n            }\n\n            this.initConnect();\n        });\n    }\n\n    private initConnect() {\n        this.disconnect(true);\n\n        // wait up to 15s for connect\n        clearTimeout(this.connectTimeoutId);\n        this.connectTimeoutId = setTimeout(() => {\n            this.connectErrorHandler(new Error(\"EventSource connect took too long.\"));\n        }, this.maxConnectTimeout);\n\n        this.eventSource = new EventSource(this.client.buildURL(\"/api/realtime\"));\n\n        this.eventSource.onerror = (_) => {\n            this.connectErrorHandler(\n                new Error(\"Failed to establish realtime connection.\"),\n            );\n        };\n\n        this.eventSource.addEventListener(\"PB_CONNECT\", (e) => {\n            const msgEvent = e as MessageEvent;\n            this.clientId = msgEvent?.lastEventId;\n\n            this.submitSubscriptions()\n                .then(async () => {\n                    let retries = 3;\n                    while (this.hasUnsentSubscriptions() && retries > 0) {\n                        retries--;\n                        // resubscribe to ensure that the latest topics are submitted\n                        //\n                        // This is needed because missed topics could happen on reconnect\n                        // if after the pending sent `submitSubscriptions()` call another `subscribe()`\n                        // was made before the submit was able to complete.\n                        await this.submitSubscriptions();\n                    }\n                })\n                .then(() => {\n                    for (let p of this.pendingConnects) {\n                        p.resolve();\n                    }\n\n                    // reset connect meta\n                    this.pendingConnects = [];\n                    this.reconnectAttempts = 0;\n                    clearTimeout(this.reconnectTimeoutId);\n                    clearTimeout(this.connectTimeoutId);\n\n                    // propagate the PB_CONNECT event\n                    const connectSubs = this.getSubscriptionsByTopic(\"PB_CONNECT\");\n                    for (let key in connectSubs) {\n                        for (let listener of connectSubs[key]) {\n                            listener(e);\n                        }\n                    }\n                })\n                .catch((err) => {\n                    this.clientId = \"\";\n                    this.connectErrorHandler(err);\n                });\n        });\n    }\n\n    private hasUnsentSubscriptions(): boolean {\n        const latestTopics = this.getNonEmptySubscriptionKeys();\n        if (latestTopics.length != this.lastSentSubscriptions.length) {\n            return true;\n        }\n\n        for (const t of latestTopics) {\n            if (!this.lastSentSubscriptions.includes(t)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    private connectErrorHandler(err: any) {\n        clearTimeout(this.connectTimeoutId);\n        clearTimeout(this.reconnectTimeoutId);\n\n        if (\n            // wasn't previously connected -> direct reject\n            (!this.clientId && !this.reconnectAttempts) ||\n            // was previously connected but the max reconnection limit has been reached\n            this.reconnectAttempts > this.maxReconnectAttempts\n        ) {\n            for (let p of this.pendingConnects) {\n                p.reject(new ClientResponseError(err));\n            }\n            this.pendingConnects = [];\n            this.disconnect();\n            return;\n        }\n\n        // otherwise -> reconnect in the background\n        this.disconnect(true);\n        const timeout =\n            this.predefinedReconnectIntervals[this.reconnectAttempts] ||\n            this.predefinedReconnectIntervals[\n                this.predefinedReconnectIntervals.length - 1\n            ];\n        this.reconnectAttempts++;\n        this.reconnectTimeoutId = setTimeout(() => {\n            this.initConnect();\n        }, timeout);\n    }\n\n    private disconnect(fromReconnect = false): void {\n        if (this.clientId && this.onDisconnect) {\n            this.onDisconnect(Object.keys(this.subscriptions));\n        }\n\n        clearTimeout(this.connectTimeoutId);\n        clearTimeout(this.reconnectTimeoutId);\n        this.removeAllSubscriptionListeners();\n        this.client.cancelRequest(this.getSubscriptionsCancelKey());\n        this.eventSource?.close();\n        this.eventSource = null;\n        this.clientId = \"\";\n\n        if (!fromReconnect) {\n            this.reconnectAttempts = 0;\n\n            // resolve any remaining connect promises\n            //\n            // this is done to avoid unnecessary throwing errors in case\n            // unsubscribe is called before the pending connect promises complete\n            // (see https://github.com/pocketbase/pocketbase/discussions/2897#discussioncomment-6423818)\n            for (let p of this.pendingConnects) {\n                p.resolve();\n            }\n            this.pendingConnects = [];\n        }\n    }\n}\n","import { BaseService } from \"@/services/BaseService\";\nimport { ClientResponseError } from \"@/ClientResponseError\";\nimport { ListResult } from \"@/tools/dtos\";\nimport { CommonOptions, ListOptions, FullListOptions } from \"@/tools/options\";\n\nexport abstract class CrudService<M> extends BaseService {\n    /**\n     * Base path for the crud actions (without trailing slash, eg. '/admins').\n     */\n    abstract get baseCrudPath(): string;\n\n    /**\n     * Response data decoder.\n     */\n    decode<T = M>(data: { [key: string]: any }): T {\n        return data as T;\n    }\n\n    /**\n     * Returns a promise with all list items batch fetched at once\n     * (by default 500 items per request; to change it set the `batch` query param).\n     *\n     * You can use the generic T to supply a wrapper type of the crud model.\n     *\n     * @throws {ClientResponseError}\n     */\n    async getFullList<T = M>(options?: FullListOptions): Promise<Array<T>>;\n\n    /**\n     * Legacy version of getFullList with explicitly specified batch size.\n     */\n    async getFullList<T = M>(batch?: number, options?: ListOptions): Promise<Array<T>>;\n\n    async getFullList<T = M>(\n        batchOrqueryParams?: number | FullListOptions,\n        options?: ListOptions,\n    ): Promise<Array<T>> {\n        if (typeof batchOrqueryParams == \"number\") {\n            return this._getFullList<T>(batchOrqueryParams, options);\n        }\n\n        options = Object.assign({}, batchOrqueryParams, options);\n\n        let batch = 500;\n        if (options.batch) {\n            batch = options.batch;\n            delete options.batch;\n        }\n\n        return this._getFullList<T>(batch, options);\n    }\n\n    /**\n     * Returns paginated items list.\n     *\n     * You can use the generic T to supply a wrapper type of the crud model.\n     *\n     * @throws {ClientResponseError}\n     */\n    async getList<T = M>(\n        page = 1,\n        perPage = 30,\n        options?: ListOptions,\n    ): Promise<ListResult<T>> {\n        options = Object.assign(\n            {\n                method: \"GET\",\n            },\n            options,\n        );\n\n        options.query = Object.assign(\n            {\n                page: page,\n                perPage: perPage,\n            },\n            options.query,\n        );\n\n        return this.client.send(this.baseCrudPath, options).then((responseData: any) => {\n            responseData.items =\n                responseData.items?.map((item: any) => {\n                    return this.decode<T>(item);\n                }) || [];\n\n            return responseData;\n        });\n    }\n\n    /**\n     * Returns the first found item by the specified filter.\n     *\n     * Internally it calls `getList(1, 1, { filter, skipTotal })` and\n     * returns the first found item.\n     *\n     * You can use the generic T to supply a wrapper type of the crud model.\n     *\n     * For consistency with `getOne`, this method will throw a 404\n     * ClientResponseError if no item was found.\n     *\n     * @throws {ClientResponseError}\n     */\n    async getFirstListItem<T = M>(filter: string, options?: CommonOptions): Promise<T> {\n        options = Object.assign(\n            {\n                requestKey: \"one_by_filter_\" + this.baseCrudPath + \"_\" + filter,\n            },\n            options,\n        );\n\n        options.query = Object.assign(\n            {\n                filter: filter,\n                skipTotal: 1,\n            },\n            options.query,\n        );\n\n        return this.getList<T>(1, 1, options).then((result) => {\n            if (!result?.items?.length) {\n                throw new ClientResponseError({\n                    status: 404,\n                    response: {\n                        code: 404,\n                        message: \"The requested resource wasn't found.\",\n                        data: {},\n                    },\n                });\n            }\n\n            return result.items[0];\n        });\n    }\n\n    /**\n     * Returns single item by its id.\n     *\n     * You can use the generic T to supply a wrapper type of the crud model.\n     *\n     * If `id` is empty it will throw a 404 error.\n     *\n     * @throws {ClientResponseError}\n     */\n    async getOne<T = M>(id: string, options?: CommonOptions): Promise<T> {\n        if (!id) {\n            throw new ClientResponseError({\n                url: this.client.buildURL(this.baseCrudPath + \"/\"),\n                status: 404,\n                response: {\n                    code: 404,\n                    message: \"Missing required record id.\",\n                    data: {},\n                },\n            });\n        }\n\n        options = Object.assign(\n            {\n                method: \"GET\",\n            },\n            options,\n        );\n\n        return this.client\n            .send(this.baseCrudPath + \"/\" + encodeURIComponent(id), options)\n            .then((responseData: any) => this.decode<T>(responseData));\n    }\n\n    /**\n     * Creates a new item.\n     *\n     * You can use the generic T to supply a wrapper type of the crud model.\n     *\n     * @throws {ClientResponseError}\n     */\n    async create<T = M>(\n        bodyParams?: { [key: string]: any } | FormData,\n        options?: CommonOptions,\n    ): Promise<T> {\n        options = Object.assign(\n            {\n                method: \"POST\",\n                body: bodyParams,\n            },\n            options,\n        );\n\n        return this.client\n            .send(this.baseCrudPath, options)\n            .then((responseData: any) => this.decode<T>(responseData));\n    }\n\n    /**\n     * Updates an existing item by its id.\n     *\n     * You can use the generic T to supply a wrapper type of the crud model.\n     *\n     * @throws {ClientResponseError}\n     */\n    async update<T = M>(\n        id: string,\n        bodyParams?: { [key: string]: any } | FormData,\n        options?: CommonOptions,\n    ): Promise<T> {\n        options = Object.assign(\n            {\n                method: \"PATCH\",\n                body: bodyParams,\n            },\n            options,\n        );\n\n        return this.client\n            .send(this.baseCrudPath + \"/\" + encodeURIComponent(id), options)\n            .then((responseData: any) => this.decode<T>(responseData));\n    }\n\n    /**\n     * Deletes an existing item by its id.\n     *\n     * @throws {ClientResponseError}\n     */\n    async delete(id: string, options?: CommonOptions): Promise<boolean> {\n        options = Object.assign(\n            {\n                method: \"DELETE\",\n            },\n            options,\n        );\n\n        return this.client\n            .send(this.baseCrudPath + \"/\" + encodeURIComponent(id), options)\n            .then(() => true);\n    }\n\n    /**\n     * Returns a promise with all list items batch fetched at once.\n     */\n    protected _getFullList<T = M>(\n        batchSize = 500,\n        options?: ListOptions,\n    ): Promise<Array<T>> {\n        options = options || {};\n        options.query = Object.assign(\n            {\n                skipTotal: 1,\n            },\n            options.query,\n        );\n\n        let result: Array<T> = [];\n\n        let request = async (page: number): Promise<Array<any>> => {\n            return this.getList(page, batchSize || 500, options).then((list) => {\n                const castedList = list as any as ListResult<T>;\n                const items = castedList.items;\n\n                result = result.concat(items);\n\n                if (items.length == list.perPage) {\n                    return request(page + 1);\n                }\n\n                return result;\n            });\n        };\n\n        return request(1);\n    }\n}\n","import { SendOptions } from \"@/tools/options\";\n\nexport function normalizeLegacyOptionsArgs(\n    legacyWarn: string,\n    baseOptions: SendOptions,\n    bodyOrOptions?: any,\n    query?: any,\n): SendOptions {\n    const hasBodyOrOptions = typeof bodyOrOptions !== \"undefined\";\n    const hasQuery = typeof query !== \"undefined\";\n\n    if (!hasQuery && !hasBodyOrOptions) {\n        return baseOptions;\n    }\n\n    if (hasQuery) {\n        console.warn(legacyWarn);\n        baseOptions.body = Object.assign({}, baseOptions.body, bodyOrOptions);\n        baseOptions.query = Object.assign({}, baseOptions.query, query);\n\n        return baseOptions;\n    }\n\n    return Object.assign(baseOptions, bodyOrOptions);\n}\n","import Client from \"@/Client\";\nimport { isTokenExpired } from \"@/tools/jwt\";\n\n// reset previous auto refresh registrations\nexport function resetAutoRefresh(client: Client) {\n    (client as any)._resetAutoRefresh?.();\n}\n\nexport function registerAutoRefresh(\n    client: Client,\n    threshold: number,\n    refreshFunc: () => Promise<any>,\n    reauthenticateFunc: () => Promise<any>,\n) {\n    resetAutoRefresh(client);\n\n    const oldBeforeSend = client.beforeSend;\n    const oldModel = client.authStore.record;\n\n    // unset the auto refresh in case the auth store was cleared\n    // OR a new model was authenticated\n    const unsubStoreChange = client.authStore.onChange((newToken, model) => {\n        if (\n            !newToken ||\n            model?.id != oldModel?.id ||\n            ((model?.collectionId || oldModel?.collectionId) &&\n                model?.collectionId != oldModel?.collectionId)\n        ) {\n            resetAutoRefresh(client);\n        }\n    });\n\n    // initialize a reset function and attach it dynamically to the client\n    (client as any)._resetAutoRefresh = function () {\n        unsubStoreChange();\n        client.beforeSend = oldBeforeSend;\n        delete (client as any)._resetAutoRefresh;\n    };\n\n    client.beforeSend = async (url, sendOptions) => {\n        const oldToken = client.authStore.token;\n\n        if (sendOptions.query?.autoRefresh) {\n            return oldBeforeSend ? oldBeforeSend(url, sendOptions) : { url, sendOptions };\n        }\n\n        let isValid = client.authStore.isValid;\n        if (\n            // is loosely valid\n            isValid &&\n            // but it is going to expire in the next \"threshold\" seconds\n            isTokenExpired(client.authStore.token, threshold)\n        ) {\n            try {\n                await refreshFunc();\n            } catch (_) {\n                isValid = false;\n            }\n        }\n\n        // still invalid -> reauthenticate\n        if (!isValid) {\n            await reauthenticateFunc();\n        }\n\n        // the request wasn't sent with a custom token\n        const headers = sendOptions.headers || {};\n        for (let key in headers) {\n            if (\n                key.toLowerCase() == \"authorization\" &&\n                // the request wasn't sent with a custom token\n                oldToken == headers[key] &&\n                client.authStore.token\n            ) {\n                // set the latest store token\n                headers[key] = client.authStore.token;\n                break;\n            }\n        }\n        sendOptions.headers = headers;\n\n        return oldBeforeSend ? oldBeforeSend(url, sendOptions) : { url, sendOptions };\n    };\n}\n","import Client from \"@/Client\";\nimport { ClientResponseError } from \"@/ClientResponseError\";\nimport { RealtimeService, UnsubscribeFunc } from \"@/services/RealtimeService\";\nimport { BaseAuthStore } from \"@/stores/BaseAuthStore\";\nimport { CrudService } from \"@/services/CrudService\";\nimport { ListResult, RecordModel } from \"@/tools/dtos\";\nimport { normalizeLegacyOptionsArgs } from \"@/tools/legacy\";\nimport {\n    CommonOptions,\n    RecordFullListOptions,\n    RecordListOptions,\n    RecordOptions,\n    SendOptions,\n    RecordSubscribeOptions,\n} from \"@/tools/options\";\nimport { getTokenPayload } from \"@/tools/jwt\";\nimport { registerAutoRefresh, resetAutoRefresh } from \"@/tools/refresh\";\n\nexport interface RecordAuthResponse<T = RecordModel> {\n    /**\n     * The signed PocketBase auth record.\n     */\n    record: T;\n\n    /**\n     * The PocketBase record auth token.\n     *\n     * If you are looking for the OAuth2 access and refresh tokens\n     * they are available under the `meta.accessToken` and `meta.refreshToken` props.\n     */\n    token: string;\n\n    /**\n     * Auth meta data usually filled when OAuth2 is used.\n     */\n    meta?: { [key: string]: any };\n}\n\nexport interface AuthProviderInfo {\n    name: string;\n    displayName: string;\n    state: string;\n    authURL: string;\n    codeVerifier: string;\n    codeChallenge: string;\n    codeChallengeMethod: string;\n}\n\nexport interface AuthMethodsList {\n    mfa: {\n        enabled: boolean;\n        duration: number;\n    };\n    otp: {\n        enabled: boolean;\n        duration: number;\n    };\n    password: {\n        enabled: boolean;\n        identityFields: Array<string>;\n    };\n    oauth2: {\n        enabled: boolean;\n        providers: Array<AuthProviderInfo>;\n    };\n}\n\nexport interface RecordSubscription<T = RecordModel> {\n    action: string; // eg. create, update, delete\n    record: T;\n}\n\nexport type OAuth2UrlCallback = (url: string) => void | Promise<void>;\n\nexport interface OAuth2AuthConfig extends SendOptions {\n    // the name of the OAuth2 provider (eg. \"google\")\n    provider: string;\n\n    // custom scopes to overwrite the default ones\n    scopes?: Array<string>;\n\n    // optional record create data\n    createData?: { [key: string]: any };\n\n    // optional callback that is triggered after the OAuth2 sign-in/sign-up url generation\n    urlCallback?: OAuth2UrlCallback;\n\n    // optional query params to send with the PocketBase auth request (eg. fields, expand, etc.)\n    query?: RecordOptions;\n}\n\nexport interface OTPResponse {\n    otpId: string;\n}\n\nexport class RecordService<M = RecordModel> extends CrudService<M> {\n    readonly collectionIdOrName: string;\n\n    constructor(client: Client, collectionIdOrName: string) {\n        super(client);\n\n        this.collectionIdOrName = collectionIdOrName;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    get baseCrudPath(): string {\n        return this.baseCollectionPath + \"/records\";\n    }\n\n    /**\n     * Returns the current collection service base path.\n     */\n    get baseCollectionPath(): string {\n        return \"/api/collections/\" + encodeURIComponent(this.collectionIdOrName);\n    }\n\n    /**\n     * Returns whether the current service collection is superusers.\n     */\n    get isSuperusers(): boolean {\n        return (\n            this.collectionIdOrName == \"_superusers\" ||\n            this.collectionIdOrName == \"_pbc_2773867675\"\n        );\n    }\n\n    // ---------------------------------------------------------------\n    // Realtime handlers\n    // ---------------------------------------------------------------\n\n    /**\n     * Subscribe to realtime changes to the specified topic (\"*\" or record id).\n     *\n     * If `topic` is the wildcard \"*\", then this method will subscribe to\n     * any record changes in the collection.\n     *\n     * If `topic` is a record id, then this method will subscribe only\n     * to changes of the specified record id.\n     *\n     * It's OK to subscribe multiple times to the same topic.\n     * You can use the returned `UnsubscribeFunc` to remove only a single subscription.\n     * Or use `unsubscribe(topic)` if you want to remove all subscriptions attached to the topic.\n     */\n    async subscribe<T = M>(\n        topic: string,\n        callback: (data: RecordSubscription<T>) => void,\n        options?: RecordSubscribeOptions,\n    ): Promise<UnsubscribeFunc> {\n        if (!topic) {\n            throw new Error(\"Missing topic.\");\n        }\n\n        if (!callback) {\n            throw new Error(\"Missing subscription callback.\");\n        }\n\n        return this.client.realtime.subscribe(\n            this.collectionIdOrName + \"/\" + topic,\n            callback,\n            options,\n        );\n    }\n\n    /**\n     * Unsubscribe from all subscriptions of the specified topic\n     * (\"*\" or record id).\n     *\n     * If `topic` is not set, then this method will unsubscribe from\n     * all subscriptions associated to the current collection.\n     */\n    async unsubscribe(topic?: string): Promise<void> {\n        // unsubscribe from the specified topic\n        if (topic) {\n            return this.client.realtime.unsubscribe(\n                this.collectionIdOrName + \"/\" + topic,\n            );\n        }\n\n        // unsubscribe from everything related to the collection\n        return this.client.realtime.unsubscribeByPrefix(this.collectionIdOrName);\n    }\n\n    // ---------------------------------------------------------------\n    // Crud handers\n    // ---------------------------------------------------------------\n    /**\n     * @inheritdoc\n     */\n    async getFullList<T = M>(options?: RecordFullListOptions): Promise<Array<T>>;\n\n    /**\n     * @inheritdoc\n     */\n    async getFullList<T = M>(\n        batch?: number,\n        options?: RecordListOptions,\n    ): Promise<Array<T>>;\n\n    /**\n     * @inheritdoc\n     */\n    async getFullList<T = M>(\n        batchOrOptions?: number | RecordFullListOptions,\n        options?: RecordListOptions,\n    ): Promise<Array<T>> {\n        if (typeof batchOrOptions == \"number\") {\n            return super.getFullList<T>(batchOrOptions, options);\n        }\n\n        const params = Object.assign({}, batchOrOptions, options);\n\n        return super.getFullList<T>(params);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async getList<T = M>(\n        page = 1,\n        perPage = 30,\n        options?: RecordListOptions,\n    ): Promise<ListResult<T>> {\n        return super.getList<T>(page, perPage, options);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async getFirstListItem<T = M>(\n        filter: string,\n        options?: RecordListOptions,\n    ): Promise<T> {\n        return super.getFirstListItem<T>(filter, options);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async getOne<T = M>(id: string, options?: RecordOptions): Promise<T> {\n        return super.getOne<T>(id, options);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async create<T = M>(\n        bodyParams?: { [key: string]: any } | FormData,\n        options?: RecordOptions,\n    ): Promise<T> {\n        return super.create<T>(bodyParams, options);\n    }\n\n    /**\n     * @inheritdoc\n     *\n     * If the current `client.authStore.record` matches with the updated id, then\n     * on success the `client.authStore.record` will be updated with the new response record fields.\n     */\n    async update<T = M>(\n        id: string,\n        bodyParams?: { [key: string]: any } | FormData,\n        options?: RecordOptions,\n    ): Promise<T> {\n        return super.update<RecordModel>(id, bodyParams, options).then((item) => {\n            if (\n                // is record auth\n                this.client.authStore.record?.id === item?.id &&\n                (this.client.authStore.record?.collectionId === this.collectionIdOrName ||\n                    this.client.authStore.record?.collectionName ===\n                        this.collectionIdOrName)\n            ) {\n                let authExpand = Object.assign({}, this.client.authStore.record.expand);\n                let authRecord = Object.assign({}, this.client.authStore.record, item);\n                if (authExpand) {\n                    // for now \"merge\" only top-level expand\n                    authRecord.expand = Object.assign(authExpand, item.expand);\n                }\n\n                this.client.authStore.save(this.client.authStore.token, authRecord);\n            }\n\n            return item as any as T;\n        });\n    }\n\n    /**\n     * @inheritdoc\n     *\n     * If the current `client.authStore.record` matches with the deleted id,\n     * then on success the `client.authStore` will be cleared.\n     */\n    async delete(id: string, options?: CommonOptions): Promise<boolean> {\n        return super.delete(id, options).then((success) => {\n            if (\n                success &&\n                // is record auth\n                this.client.authStore.record?.id === id &&\n                (this.client.authStore.record?.collectionId === this.collectionIdOrName ||\n                    this.client.authStore.record?.collectionName ===\n                        this.collectionIdOrName)\n            ) {\n                this.client.authStore.clear();\n            }\n\n            return success;\n        });\n    }\n\n    // ---------------------------------------------------------------\n    // Auth handlers\n    // ---------------------------------------------------------------\n\n    /**\n     * Prepare successful collection authorization response.\n     */\n    protected authResponse<T = M>(responseData: any): RecordAuthResponse<T> {\n        const record = this.decode(responseData?.record || {});\n\n        this.client.authStore.save(responseData?.token, record as any);\n\n        return Object.assign({}, responseData, {\n            // normalize common fields\n            token: responseData?.token || \"\",\n            record: record as any as T,\n        });\n    }\n\n    /**\n     * Returns all available collection auth methods.\n     *\n     * @throws {ClientResponseError}\n     */\n    async listAuthMethods(options?: CommonOptions): Promise<AuthMethodsList> {\n        options = Object.assign(\n            {\n                method: \"GET\",\n                // @todo remove after deleting the pre v0.23 API response fields\n                fields: \"mfa,otp,password,oauth2\",\n            },\n            options,\n        );\n\n        return this.client.send(this.baseCollectionPath + \"/auth-methods\", options);\n    }\n\n    /**\n     * Authenticate a single auth collection record via its username/email and password.\n     *\n     * On success, this method also automatically updates\n     * the client's AuthStore data and returns:\n     * - the authentication token\n     * - the authenticated record model\n     *\n     * @throws {ClientResponseError}\n     */\n    async authWithPassword<T = M>(\n        usernameOrEmail: string,\n        password: string,\n        options?: RecordOptions,\n    ): Promise<RecordAuthResponse<T>> {\n        options = Object.assign(\n            {\n                method: \"POST\",\n                body: {\n                    identity: usernameOrEmail,\n                    password: password,\n                },\n            },\n            options,\n        );\n\n        // note: consider to deprecate\n        let autoRefreshThreshold;\n        if (this.isSuperusers) {\n            autoRefreshThreshold = options.autoRefreshThreshold;\n            delete options.autoRefreshThreshold;\n            if (!options.autoRefresh) {\n                resetAutoRefresh(this.client);\n            }\n        }\n\n        let authData = await this.client.send(\n            this.baseCollectionPath + \"/auth-with-password\",\n            options,\n        );\n\n        authData = this.authResponse<T>(authData);\n\n        if (autoRefreshThreshold && this.isSuperusers) {\n            registerAutoRefresh(\n                this.client,\n                autoRefreshThreshold,\n                () => this.authRefresh({ autoRefresh: true }),\n                () =>\n                    this.authWithPassword<T>(\n                        usernameOrEmail,\n                        password,\n                        Object.assign({ autoRefresh: true }, options),\n                    ),\n            );\n        }\n\n        return authData;\n    }\n\n    /**\n     * Authenticate a single auth collection record with OAuth2 code.\n     *\n     * If you don't have an OAuth2 code you may also want to check `authWithOAuth2` method.\n     *\n     * On success, this method also automatically updates\n     * the client's AuthStore data and returns:\n     * - the authentication token\n     * - the authenticated record model\n     * - the OAuth2 account data (eg. name, email, avatar, etc.)\n     *\n     * @throws {ClientResponseError}\n     */\n    async authWithOAuth2Code<T = M>(\n        provider: string,\n        code: string,\n        codeVerifier: string,\n        redirectURL: string,\n        createData?: { [key: string]: any },\n        options?: RecordOptions,\n    ): Promise<RecordAuthResponse<T>>;\n\n    /**\n     * @deprecated\n     * Consider using authWithOAuth2Code(provider, code, codeVerifier, redirectURL, createdData, options?).\n     */\n    async authWithOAuth2Code<T = M>(\n        provider: string,\n        code: string,\n        codeVerifier: string,\n        redirectURL: string,\n        createData?: { [key: string]: any },\n        body?: any,\n        query?: any,\n    ): Promise<RecordAuthResponse<T>>;\n\n    async authWithOAuth2Code<T = M>(\n        provider: string,\n        code: string,\n        codeVerifier: string,\n        redirectURL: string,\n        createData?: { [key: string]: any },\n        bodyOrOptions?: any,\n        query?: any,\n    ): Promise<RecordAuthResponse<T>> {\n        let options: any = {\n            method: \"POST\",\n            body: {\n                provider: provider,\n                code: code,\n                codeVerifier: codeVerifier,\n                redirectURL: redirectURL,\n                createData: createData,\n            },\n        };\n\n        options = normalizeLegacyOptionsArgs(\n            \"This form of authWithOAuth2Code(provider, code, codeVerifier, redirectURL, createData?, body?, query?) is deprecated. Consider replacing it with authWithOAuth2Code(provider, code, codeVerifier, redirectURL, createData?, options?).\",\n            options,\n            bodyOrOptions,\n            query,\n        );\n\n        return this.client\n            .send(this.baseCollectionPath + \"/auth-with-oauth2\", options)\n            .then((data) => this.authResponse<T>(data));\n    }\n\n    /**\n     * @deprecated This form of authWithOAuth2 is deprecated.\n     *\n     * Please use `authWithOAuth2Code()` OR its simplified realtime version\n     * as shown in https://pocketbase.io/docs/authentication/#oauth2-integration.\n     */\n    async authWithOAuth2<T = M>(\n        provider: string,\n        code: string,\n        codeVerifier: string,\n        redirectURL: string,\n        createData?: { [key: string]: any },\n        bodyParams?: { [key: string]: any },\n        queryParams?: RecordOptions,\n    ): Promise<RecordAuthResponse<T>>;\n\n    /**\n     * Authenticate a single auth collection record with OAuth2\n     * **without custom redirects, deeplinks or even page reload**.\n     *\n     * This method initializes a one-off realtime subscription and will\n     * open a popup window with the OAuth2 vendor page to authenticate.\n     * Once the external OAuth2 sign-in/sign-up flow is completed, the popup\n     * window will be automatically closed and the OAuth2 data sent back\n     * to the user through the previously established realtime connection.\n     *\n     * You can specify an optional `urlCallback` prop to customize\n     * the default url `window.open` behavior.\n     *\n     * On success, this method also automatically updates\n     * the client's AuthStore data and returns:\n     * - the authentication token\n     * - the authenticated record model\n     * - the OAuth2 account data (eg. name, email, avatar, etc.)\n     *\n     * Example:\n     *\n     * ```js\n     * const authData = await pb.collection(\"users\").authWithOAuth2({\n     *     provider: \"google\",\n     * })\n     * ```\n     *\n     * Note1: When creating the OAuth2 app in the provider dashboard\n     * you have to configure `https://yourdomain.com/api/oauth2-redirect`\n     * as redirect URL.\n     *\n     * Note2: Safari may block the default `urlCallback` popup because\n     * it doesn't allow `window.open` calls as part of an `async` click functions.\n     * To workaround this you can either change your click handler to not be marked as `async`\n     * OR manually call `window.open` before your `async` function and use the\n     * window reference in your own custom `urlCallback` (see https://github.com/pocketbase/pocketbase/discussions/2429#discussioncomment-5943061).\n     * For example:\n     * ```js\n     * <button id=\"btn\">Login with Gitlab</button>\n     * ...\n     * document.getElementById(\"btn\").addEventListener(\"click\", () => {\n     *     pb.collection(\"users\").authWithOAuth2({\n     *         provider: \"gitlab\",\n     *     }).then((authData) => {\n     *         console.log(authData)\n     *     }).catch((err) => {\n     *         console.log(err, err.originalError);\n     *     });\n     * })\n     * ```\n     *\n     * @throws {ClientResponseError}\n     */\n    async authWithOAuth2<T = M>(\n        options: OAuth2AuthConfig,\n    ): Promise<RecordAuthResponse<T>>;\n\n    authWithOAuth2<T = M>(...args: any): Promise<RecordAuthResponse<T>> {\n        // fallback to legacy format\n        if (args.length > 1 || typeof args?.[0] === \"string\") {\n            console.warn(\n                \"PocketBase: This form of authWithOAuth2() is deprecated and may get removed in the future. Please replace with authWithOAuth2Code() OR use the authWithOAuth2() realtime form as shown in https://pocketbase.io/docs/authentication/#oauth2-integration.\",\n            );\n            return this.authWithOAuth2Code<T>(\n                args?.[0] || \"\",\n                args?.[1] || \"\",\n                args?.[2] || \"\",\n                args?.[3] || \"\",\n                args?.[4] || {},\n                args?.[5] || {},\n                args?.[6] || {},\n            );\n        }\n\n        const config = args?.[0] || {};\n\n        // open a new popup window in case config.urlCallback is not set\n        //\n        // note: it is opened before any async calls due to Safari restrictions\n        // (see https://github.com/pocketbase/pocketbase/discussions/2429#discussioncomment-5943061)\n        let eagerDefaultPopup: Window | null = null;\n        if (!config.urlCallback) {\n            eagerDefaultPopup = openBrowserPopup(undefined);\n        }\n\n        // initialize a one-off realtime service\n        const realtime = new RealtimeService(this.client);\n\n        function cleanup() {\n            eagerDefaultPopup?.close();\n            realtime.unsubscribe();\n        }\n\n        const requestKeyOptions: SendOptions = {};\n        const requestKey = config.requestKey;\n        if (requestKey) {\n            requestKeyOptions.requestKey = requestKey;\n        }\n\n        return this.listAuthMethods(requestKeyOptions)\n            .then((authMethods) => {\n                const provider = authMethods.oauth2.providers.find(\n                    (p) => p.name === config.provider,\n                );\n                if (!provider) {\n                    throw new ClientResponseError(\n                        new Error(`Missing or invalid provider \"${config.provider}\".`),\n                    );\n                }\n\n                const redirectURL = this.client.buildURL(\"/api/oauth2-redirect\");\n\n                // find the AbortController associated with the current request key (if any)\n                const cancelController = requestKey\n                    ? this.client[\"cancelControllers\"]?.[requestKey]\n                    : undefined;\n                if (cancelController) {\n                    cancelController.signal.onabort = () => {\n                        cleanup();\n                    };\n                }\n\n                return new Promise(async (resolve, reject) => {\n                    try {\n                        await realtime.subscribe(\"@oauth2\", async (e) => {\n                            const oldState = realtime.clientId;\n\n                            try {\n                                if (!e.state || oldState !== e.state) {\n                                    throw new Error(\"State parameters don't match.\");\n                                }\n\n                                if (e.error || !e.code) {\n                                    throw new Error(\n                                        \"OAuth2 redirect error or missing code: \" +\n                                            e.error,\n                                    );\n                                }\n\n                                // clear the non SendOptions props\n                                const options = Object.assign({}, config);\n                                delete options.provider;\n                                delete options.scopes;\n                                delete options.createData;\n                                delete options.urlCallback;\n\n                                // reset the cancelController listener as it will be triggered by the next api call\n                                if (cancelController?.signal?.onabort) {\n                                    cancelController.signal.onabort = null;\n                                }\n\n                                const authData = await this.authWithOAuth2Code<T>(\n                                    provider.name,\n                                    e.code,\n                                    provider.codeVerifier,\n                                    redirectURL,\n                                    config.createData,\n                                    options,\n                                );\n\n                                resolve(authData);\n                            } catch (err) {\n                                reject(new ClientResponseError(err));\n                            }\n\n                            cleanup();\n                        });\n\n                        const replacements: { [key: string]: any } = {\n                            state: realtime.clientId,\n                        };\n                        if (config.scopes?.length) {\n                            replacements[\"scope\"] = config.scopes.join(\" \");\n                        }\n\n                        const url = this._replaceQueryParams(\n                            provider.authURL + redirectURL,\n                            replacements,\n                        );\n\n                        let urlCallback =\n                            config.urlCallback ||\n                            function (url: string) {\n                                if (eagerDefaultPopup) {\n                                    eagerDefaultPopup.location.href = url;\n                                } else {\n                                    // it could have been blocked due to its empty initial url,\n                                    // try again...\n                                    eagerDefaultPopup = openBrowserPopup(url);\n                                }\n                            };\n\n                        await urlCallback(url);\n                    } catch (err) {\n                        cleanup();\n                        reject(new ClientResponseError(err));\n                    }\n                });\n            })\n            .catch((err) => {\n                cleanup();\n                throw err; // rethrow\n            }) as Promise<RecordAuthResponse<T>>;\n    }\n\n    /**\n     * Refreshes the current authenticated record instance and\n     * returns a new token and record data.\n     *\n     * On success this method also automatically updates the client's AuthStore.\n     *\n     * @throws {ClientResponseError}\n     */\n    async authRefresh<T = M>(options?: RecordOptions): Promise<RecordAuthResponse<T>>;\n\n    /**\n     * @deprecated\n     * Consider using authRefresh(options?).\n     */\n    async authRefresh<T = M>(body?: any, query?: any): Promise<RecordAuthResponse<T>>;\n\n    async authRefresh<T = M>(\n        bodyOrOptions?: any,\n        query?: any,\n    ): Promise<RecordAuthResponse<T>> {\n        let options: any = {\n            method: \"POST\",\n        };\n\n        options = normalizeLegacyOptionsArgs(\n            \"This form of authRefresh(body?, query?) is deprecated. Consider replacing it with authRefresh(options?).\",\n            options,\n            bodyOrOptions,\n            query,\n        );\n\n        return this.client\n            .send(this.baseCollectionPath + \"/auth-refresh\", options)\n            .then((data) => this.authResponse<T>(data));\n    }\n\n    /**\n     * Sends auth record password reset request.\n     *\n     * @throws {ClientResponseError}\n     */\n    async requestPasswordReset(email: string, options?: CommonOptions): Promise<boolean>;\n\n    /**\n     * @deprecated\n     * Consider using requestPasswordReset(email, options?).\n     */\n    async requestPasswordReset(email: string, body?: any, query?: any): Promise<boolean>;\n\n    async requestPasswordReset(\n        email: string,\n        bodyOrOptions?: any,\n        query?: any,\n    ): Promise<boolean> {\n        let options: any = {\n            method: \"POST\",\n            body: {\n                email: email,\n            },\n        };\n\n        options = normalizeLegacyOptionsArgs(\n            \"This form of requestPasswordReset(email, body?, query?) is deprecated. Consider replacing it with requestPasswordReset(email, options?).\",\n            options,\n            bodyOrOptions,\n            query,\n        );\n\n        return this.client\n            .send(this.baseCollectionPath + \"/request-password-reset\", options)\n            .then(() => true);\n    }\n\n    /**\n     * Confirms auth record password reset request.\n     *\n     * @throws {ClientResponseError}\n     */\n    async confirmPasswordReset(\n        passwordResetToken: string,\n        password: string,\n        passwordConfirm: string,\n        options?: CommonOptions,\n    ): Promise<boolean>;\n\n    /**\n     * @deprecated\n     * Consider using confirmPasswordReset(passwordResetToken, password, passwordConfirm, options?).\n     */\n    async confirmPasswordReset(\n        passwordResetToken: string,\n        password: string,\n        passwordConfirm: string,\n        body?: any,\n        query?: any,\n    ): Promise<boolean>;\n\n    async confirmPasswordReset(\n        passwordResetToken: string,\n        password: string,\n        passwordConfirm: string,\n        bodyOrOptions?: any,\n        query?: any,\n    ): Promise<boolean> {\n        let options: any = {\n            method: \"POST\",\n            body: {\n                token: passwordResetToken,\n                password: password,\n                passwordConfirm: passwordConfirm,\n            },\n        };\n\n        options = normalizeLegacyOptionsArgs(\n            \"This form of confirmPasswordReset(token, password, passwordConfirm, body?, query?) is deprecated. Consider replacing it with confirmPasswordReset(token, password, passwordConfirm, options?).\",\n            options,\n            bodyOrOptions,\n            query,\n        );\n\n        return this.client\n            .send(this.baseCollectionPath + \"/confirm-password-reset\", options)\n            .then(() => true);\n    }\n\n    /**\n     * Sends auth record verification email request.\n     *\n     * @throws {ClientResponseError}\n     */\n    async requestVerification(email: string, options?: CommonOptions): Promise<boolean>;\n\n    /**\n     * @deprecated\n     * Consider using requestVerification(email, options?).\n     */\n    async requestVerification(email: string, body?: any, query?: any): Promise<boolean>;\n\n    async requestVerification(\n        email: string,\n        bodyOrOptions?: any,\n        query?: any,\n    ): Promise<boolean> {\n        let options: any = {\n            method: \"POST\",\n            body: {\n                email: email,\n            },\n        };\n\n        options = normalizeLegacyOptionsArgs(\n            \"This form of requestVerification(email, body?, query?) is deprecated. Consider replacing it with requestVerification(email, options?).\",\n            options,\n            bodyOrOptions,\n            query,\n        );\n\n        return this.client\n            .send(this.baseCollectionPath + \"/request-verification\", options)\n            .then(() => true);\n    }\n\n    /**\n     * Confirms auth record email verification request.\n     *\n     * If the current `client.authStore.record` matches with the auth record from the token,\n     * then on success the `client.authStore.record.verified` will be updated to `true`.\n     *\n     * @throws {ClientResponseError}\n     */\n    async confirmVerification(\n        verificationToken: string,\n        options?: CommonOptions,\n    ): Promise<boolean>;\n\n    /**\n     * @deprecated\n     * Consider using confirmVerification(verificationToken, options?).\n     */\n    async confirmVerification(\n        verificationToken: string,\n        body?: any,\n        query?: any,\n    ): Promise<boolean>;\n\n    async confirmVerification(\n        verificationToken: string,\n        bodyOrOptions?: any,\n        query?: any,\n    ): Promise<boolean> {\n        let options: any = {\n            method: \"POST\",\n            body: {\n                token: verificationToken,\n            },\n        };\n\n        options = normalizeLegacyOptionsArgs(\n            \"This form of confirmVerification(token, body?, query?) is deprecated. Consider replacing it with confirmVerification(token, options?).\",\n            options,\n            bodyOrOptions,\n            query,\n        );\n\n        return this.client\n            .send(this.baseCollectionPath + \"/confirm-verification\", options)\n            .then(() => {\n                // on success manually update the current auth record verified state\n                const payload = getTokenPayload(verificationToken);\n                const model = this.client.authStore.record;\n                if (\n                    model &&\n                    !model.verified &&\n                    model.id === payload.id &&\n                    model.collectionId === payload.collectionId\n                ) {\n                    model.verified = true;\n                    this.client.authStore.save(this.client.authStore.token, model);\n                }\n\n                return true;\n            });\n    }\n\n    /**\n     * Sends an email change request to the authenticated record model.\n     *\n     * @throws {ClientResponseError}\n     */\n    async requestEmailChange(newEmail: string, options?: CommonOptions): Promise<boolean>;\n\n    /**\n     * @deprecated\n     * Consider using requestEmailChange(newEmail, options?).\n     */\n    async requestEmailChange(newEmail: string, body?: any, query?: any): Promise<boolean>;\n\n    async requestEmailChange(\n        newEmail: string,\n        bodyOrOptions?: any,\n        query?: any,\n    ): Promise<boolean> {\n        let options: any = {\n            method: \"POST\",\n            body: {\n                newEmail: newEmail,\n            },\n        };\n\n        options = normalizeLegacyOptionsArgs(\n            \"This form of requestEmailChange(newEmail, body?, query?) is deprecated. Consider replacing it with requestEmailChange(newEmail, options?).\",\n            options,\n            bodyOrOptions,\n            query,\n        );\n\n        return this.client\n            .send(this.baseCollectionPath + \"/request-email-change\", options)\n            .then(() => true);\n    }\n\n    /**\n     * Confirms auth record's new email address.\n     *\n     * If the current `client.authStore.record` matches with the auth record from the token,\n     * then on success the `client.authStore` will be cleared.\n     *\n     * @throws {ClientResponseError}\n     */\n    async confirmEmailChange(\n        emailChangeToken: string,\n        password: string,\n        options?: CommonOptions,\n    ): Promise<boolean>;\n\n    /**\n     * @deprecated\n     * Consider using confirmEmailChange(emailChangeToken, password, options?).\n     */\n    async confirmEmailChange(\n        emailChangeToken: string,\n        password: string,\n        body?: any,\n        query?: any,\n    ): Promise<boolean>;\n\n    async confirmEmailChange(\n        emailChangeToken: string,\n        password: string,\n        bodyOrOptions?: any,\n        query?: any,\n    ): Promise<boolean> {\n        let options: any = {\n            method: \"POST\",\n            body: {\n                token: emailChangeToken,\n                password: password,\n            },\n        };\n\n        options = normalizeLegacyOptionsArgs(\n            \"This form of confirmEmailChange(token, password, body?, query?) is deprecated. Consider replacing it with confirmEmailChange(token, password, options?).\",\n            options,\n            bodyOrOptions,\n            query,\n        );\n\n        return this.client\n            .send(this.baseCollectionPath + \"/confirm-email-change\", options)\n            .then(() => {\n                const payload = getTokenPayload(emailChangeToken);\n                const model = this.client.authStore.record;\n                if (\n                    model &&\n                    model.id === payload.id &&\n                    model.collectionId === payload.collectionId\n                ) {\n                    this.client.authStore.clear();\n                }\n\n                return true;\n            });\n    }\n\n    /**\n     * @deprecated use collection(\"_externalAuths\").*\n     *\n     * Lists all linked external auth providers for the specified auth record.\n     *\n     * @throws {ClientResponseError}\n     */\n    async listExternalAuths(\n        recordId: string,\n        options?: CommonOptions,\n    ): Promise<Array<RecordModel>> {\n        return this.client.collection(\"_externalAuths\").getFullList(\n            Object.assign({}, options, {\n                filter: this.client.filter(\"recordRef = {:id}\", { id: recordId }),\n            }),\n        );\n    }\n\n    /**\n     * @deprecated use collection(\"_externalAuths\").*\n     *\n     * Unlink a single external auth provider from the specified auth record.\n     *\n     * @throws {ClientResponseError}\n     */\n    async unlinkExternalAuth(\n        recordId: string,\n        provider: string,\n        options?: CommonOptions,\n    ): Promise<boolean> {\n        const ea = await this.client.collection(\"_externalAuths\").getFirstListItem(\n            this.client.filter(\"recordRef = {:recordId} && provider = {:provider}\", {\n                recordId,\n                provider,\n            }),\n        );\n\n        return this.client\n            .collection(\"_externalAuths\")\n            .delete(ea.id, options)\n            .then(() => true);\n    }\n\n    /**\n     * Sends auth record OTP to the provided email.\n     *\n     * @throws {ClientResponseError}\n     */\n    async requestOTP(email: string, options?: CommonOptions): Promise<OTPResponse> {\n        options = Object.assign(\n            {\n                method: \"POST\",\n                body: { email: email },\n            },\n            options,\n        );\n\n        return this.client.send(this.baseCollectionPath + \"/request-otp\", options);\n    }\n\n    /**\n     * Authenticate a single auth collection record via OTP.\n     *\n     * On success, this method also automatically updates\n     * the client's AuthStore data and returns:\n     * - the authentication token\n     * - the authenticated record model\n     *\n     * @throws {ClientResponseError}\n     */\n    async authWithOTP<T = M>(\n        otpId: string,\n        password: string,\n        options?: CommonOptions,\n    ): Promise<RecordAuthResponse<T>> {\n        options = Object.assign(\n            {\n                method: \"POST\",\n                body: { otpId, password },\n            },\n            options,\n        );\n\n        return this.client\n            .send(this.baseCollectionPath + \"/auth-with-otp\", options)\n            .then((data) => this.authResponse<T>(data));\n    }\n\n    /**\n     * Impersonate authenticates with the specified recordId and\n     * returns a new client with the received auth token in a memory store.\n     *\n     * If `duration` is 0 the generated auth token will fallback\n     * to the default collection auth token duration.\n     *\n     * This action currently requires superusers privileges.\n     *\n     * @throws {ClientResponseError}\n     */\n    async impersonate(\n        recordId: string,\n        duration: number,\n        options?: CommonOptions,\n    ): Promise<Client> {\n        options = Object.assign(\n            {\n                method: \"POST\",\n                body: { duration: duration },\n            },\n            options,\n        );\n        options.headers = options.headers || {};\n        if (!options.headers.Authorization) {\n            options.headers.Authorization = this.client.authStore.token;\n        }\n\n        // create a new client loaded with the impersonated auth state\n        // ---\n        const client = new Client(\n            this.client.baseURL,\n            new BaseAuthStore(),\n            this.client.lang,\n        );\n\n        const authData = await client.send(\n            this.baseCollectionPath + \"/impersonate/\" + encodeURIComponent(recordId),\n            options,\n        );\n\n        client.authStore.save(authData?.token, this.decode(authData?.record || {}));\n        // ---\n\n        return client;\n    }\n\n    // ---------------------------------------------------------------\n\n    // very rudimentary url query params replacement because at the moment\n    // URL (and URLSearchParams) doesn't seem to be fully supported in React Native\n    //\n    // note: for details behind some of the decode/encode parsing check https://unixpapa.com/js/querystring.html\n    private _replaceQueryParams(\n        url: string,\n        replacements: { [key: string]: any } = {},\n    ): string {\n        let urlPath = url;\n        let query = \"\";\n\n        const queryIndex = url.indexOf(\"?\");\n        if (queryIndex >= 0) {\n            urlPath = url.substring(0, url.indexOf(\"?\"));\n            query = url.substring(url.indexOf(\"?\") + 1);\n        }\n\n        const parsedParams: { [key: string]: string } = {};\n\n        // parse the query parameters\n        const rawParams = query.split(\"&\");\n        for (const param of rawParams) {\n            if (param == \"\") {\n                continue;\n            }\n\n            const pair = param.split(\"=\");\n            parsedParams[decodeURIComponent(pair[0].replace(/\\+/g, \" \"))] =\n                decodeURIComponent((pair[1] || \"\").replace(/\\+/g, \" \"));\n        }\n\n        // apply the replacements\n        for (let key in replacements) {\n            if (!replacements.hasOwnProperty(key)) {\n                continue;\n            }\n\n            if (replacements[key] == null) {\n                delete parsedParams[key];\n            } else {\n                parsedParams[key] = replacements[key];\n            }\n        }\n\n        // construct back the full query string\n        query = \"\";\n        for (let key in parsedParams) {\n            if (!parsedParams.hasOwnProperty(key)) {\n                continue;\n            }\n\n            if (query != \"\") {\n                query += \"&\";\n            }\n\n            query +=\n                encodeURIComponent(key.replace(/%20/g, \"+\")) +\n                \"=\" +\n                encodeURIComponent(parsedParams[key].replace(/%20/g, \"+\"));\n        }\n\n        return query != \"\" ? urlPath + \"?\" + query : urlPath;\n    }\n}\n\nfunction openBrowserPopup(url?: string): Window | null {\n    if (typeof window === \"undefined\" || !window?.open) {\n        throw new ClientResponseError(\n            new Error(\n                `Not in a browser context - please pass a custom urlCallback function.`,\n            ),\n        );\n    }\n\n    let width = 1024;\n    let height = 768;\n\n    let windowWidth = window.innerWidth;\n    let windowHeight = window.innerHeight;\n\n    // normalize window size\n    width = width > windowWidth ? windowWidth : width;\n    height = height > windowHeight ? windowHeight : height;\n\n    let left = windowWidth / 2 - width / 2;\n    let top = windowHeight / 2 - height / 2;\n\n    // note: we don't use the noopener and noreferrer attributes since\n    // for some reason browser blocks such windows then url is undefined/blank\n    return window.open(\n        url,\n        \"popup_window\",\n        \"width=\" +\n            width +\n            \",height=\" +\n            height +\n            \",top=\" +\n            top +\n            \",left=\" +\n            left +\n            \",resizable,menubar=no\",\n    );\n}\n","import { CrudService } from \"@/services/CrudService\";\nimport { CollectionModel } from \"@/tools/dtos\";\nimport { CommonOptions } from \"@/tools/options\";\n\nexport class CollectionService extends CrudService<CollectionModel> {\n    /**\n     * @inheritdoc\n     */\n    get baseCrudPath(): string {\n        return \"/api/collections\";\n    }\n\n    /**\n     * Imports the provided collections.\n     *\n     * If `deleteMissing` is `true`, all local collections and their fields,\n     * that are not present in the imported configuration, WILL BE DELETED\n     * (including their related records data)!\n     *\n     * @throws {ClientResponseError}\n     */\n    async import(\n        collections: Array<CollectionModel>,\n        deleteMissing: boolean = false,\n        options?: CommonOptions,\n    ): Promise<true> {\n        options = Object.assign(\n            {\n                method: \"PUT\",\n                body: {\n                    collections: collections,\n                    deleteMissing: deleteMissing,\n                },\n            },\n            options,\n        );\n\n        return this.client.send(this.baseCrudPath + \"/import\", options).then(() => true);\n    }\n\n    /**\n     * Returns type indexed map with scaffolded collection models\n     * populated with their default field values.\n     *\n     * @throws {ClientResponseError}\n     */\n    async getScaffolds(\n        options?: CommonOptions,\n    ): Promise<{ [key: string]: CollectionModel }> {\n        options = Object.assign(\n            {\n                method: \"GET\",\n            },\n            options,\n        );\n\n        return this.client.send(this.baseCrudPath + \"/meta/scaffolds\", options);\n    }\n\n    /**\n     * Deletes all records associated with the specified collection.\n     *\n     * @throws {ClientResponseError}\n     */\n    async truncate(collectionIdOrName: string, options?: CommonOptions): Promise<true> {\n        options = Object.assign(\n            {\n                method: \"DELETE\",\n            },\n            options,\n        );\n\n        return this.client\n            .send(\n                this.baseCrudPath +\n                    \"/\" +\n                    encodeURIComponent(collectionIdOrName) +\n                    \"/truncate\",\n                options,\n            )\n            .then(() => true);\n    }\n}\n","import { ClientResponseError } from \"@/ClientResponseError\";\nimport { BaseService } from \"@/services/BaseService\";\nimport { ListResult, LogModel } from \"@/tools/dtos\";\nimport { CommonOptions, ListOptions, LogStatsOptions } from \"@/tools/options\";\n\nexport interface HourlyStats {\n    total: number;\n    date: string;\n}\n\nexport class LogService extends BaseService {\n    /**\n     * Returns paginated logs list.\n     *\n     * @throws {ClientResponseError}\n     */\n    async getList(\n        page = 1,\n        perPage = 30,\n        options?: ListOptions,\n    ): Promise<ListResult<LogModel>> {\n        options = Object.assign({ method: \"GET\" }, options);\n\n        options.query = Object.assign(\n            {\n                page: page,\n                perPage: perPage,\n            },\n            options.query,\n        );\n\n        return this.client.send(\"/api/logs\", options);\n    }\n\n    /**\n     * Returns a single log by its id.\n     *\n     * If `id` is empty it will throw a 404 error.\n     *\n     * @throws {ClientResponseError}\n     */\n    async getOne(id: string, options?: CommonOptions): Promise<LogModel> {\n        if (!id) {\n            throw new ClientResponseError({\n                url: this.client.buildURL(\"/api/logs/\"),\n                status: 404,\n                response: {\n                    code: 404,\n                    message: \"Missing required log id.\",\n                    data: {},\n                },\n            });\n        }\n\n        options = Object.assign(\n            {\n                method: \"GET\",\n            },\n            options,\n        );\n\n        return this.client.send(\"/api/logs/\" + encodeURIComponent(id), options);\n    }\n\n    /**\n     * Returns logs statistics.\n     *\n     * @throws {ClientResponseError}\n     */\n    async getStats(options?: LogStatsOptions): Promise<Array<HourlyStats>> {\n        options = Object.assign(\n            {\n                method: \"GET\",\n            },\n            options,\n        );\n\n        return this.client.send(\"/api/logs/stats\", options);\n    }\n}\n","import { BaseService } from \"@/services/BaseService\";\nimport { CommonOptions } from \"@/tools/options\";\n\nexport interface HealthCheckResponse {\n    code: number;\n    message: string;\n    data: { [key: string]: any };\n}\n\nexport class HealthService extends BaseService {\n    /**\n     * Checks the health status of the api.\n     *\n     * @throws {ClientResponseError}\n     */\n    async check(options?: CommonOptions): Promise<HealthCheckResponse> {\n        options = Object.assign(\n            {\n                method: \"GET\",\n            },\n            options,\n        );\n\n        return this.client.send(\"/api/health\", options);\n    }\n}\n","import { BaseService } from \"@/services/BaseService\";\nimport { CommonOptions, FileOptions } from \"@/tools/options\";\n\nexport class FileService extends BaseService {\n    /**\n     * @deprecated Please replace with `pb.files.getURL()`.\n     */\n    getUrl(\n        record: { [key: string]: any },\n        filename: string,\n        queryParams: FileOptions = {},\n    ): string {\n        console.warn(\"Please replace pb.files.getUrl() with pb.files.getURL()\");\n        return this.getURL(record, filename, queryParams);\n    }\n\n    /**\n     * Builds and returns an absolute record file url for the provided filename.\n     */\n    getURL(\n        record: { [key: string]: any },\n        filename: string,\n        queryParams: FileOptions = {},\n    ): string {\n        if (\n            !filename ||\n            !record?.id ||\n            !(record?.collectionId || record?.collectionName)\n        ) {\n            return \"\";\n        }\n\n        const parts = [];\n        parts.push(\"api\");\n        parts.push(\"files\");\n        parts.push(encodeURIComponent(record.collectionId || record.collectionName));\n        parts.push(encodeURIComponent(record.id));\n        parts.push(encodeURIComponent(filename));\n\n        let result = this.client.buildURL(parts.join(\"/\"));\n\n        if (Object.keys(queryParams).length) {\n            // normalize the download query param for consistency with the Dart sdk\n            if (queryParams.download === false) {\n                delete queryParams.download;\n            }\n\n            const params = new URLSearchParams(queryParams);\n\n            result += (result.includes(\"?\") ? \"&\" : \"?\") + params;\n        }\n\n        return result;\n    }\n\n    /**\n     * Requests a new private file access token for the current auth model.\n     *\n     * @throws {ClientResponseError}\n     */\n    async getToken(options?: CommonOptions): Promise<string> {\n        options = Object.assign(\n            {\n                method: \"POST\",\n            },\n            options,\n        );\n\n        return this.client\n            .send(\"/api/files/token\", options)\n            .then((data) => data?.token || \"\");\n    }\n}\n","import { BaseService } from \"@/services/BaseService\";\nimport { CommonOptions } from \"@/tools/options\";\n\nexport interface BackupFileInfo {\n    key: string;\n    size: number;\n    modified: string;\n}\n\nexport class BackupService extends BaseService {\n    /**\n     * Returns list with all available backup files.\n     *\n     * @throws {ClientResponseError}\n     */\n    async getFullList(options?: CommonOptions): Promise<Array<BackupFileInfo>> {\n        options = Object.assign(\n            {\n                method: \"GET\",\n            },\n            options,\n        );\n\n        return this.client.send(\"/api/backups\", options);\n    }\n\n    /**\n     * Initializes a new backup.\n     *\n     * @throws {ClientResponseError}\n     */\n    async create(basename: string, options?: CommonOptions): Promise<boolean> {\n        options = Object.assign(\n            {\n                method: \"POST\",\n                body: {\n                    name: basename,\n                },\n            },\n            options,\n        );\n\n        return this.client.send(\"/api/backups\", options).then(() => true);\n    }\n\n    /**\n     * Uploads an existing backup file.\n     *\n     * Example:\n     *\n     * ```js\n     * await pb.backups.upload({\n     *     file: new Blob([...]),\n     * });\n     * ```\n     *\n     * @throws {ClientResponseError}\n     */\n    async upload(\n        bodyParams: { [key: string]: any } | FormData,\n        options?: CommonOptions,\n    ): Promise<boolean> {\n        options = Object.assign(\n            {\n                method: \"POST\",\n                body: bodyParams,\n            },\n            options,\n        );\n\n        return this.client.send(\"/api/backups/upload\", options).then(() => true);\n    }\n\n    /**\n     * Deletes a single backup file.\n     *\n     * @throws {ClientResponseError}\n     */\n    async delete(key: string, options?: CommonOptions): Promise<boolean> {\n        options = Object.assign(\n            {\n                method: \"DELETE\",\n            },\n            options,\n        );\n\n        return this.client\n            .send(`/api/backups/${encodeURIComponent(key)}`, options)\n            .then(() => true);\n    }\n\n    /**\n     * Initializes an app data restore from an existing backup.\n     *\n     * @throws {ClientResponseError}\n     */\n    async restore(key: string, options?: CommonOptions): Promise<boolean> {\n        options = Object.assign(\n            {\n                method: \"POST\",\n            },\n            options,\n        );\n\n        return this.client\n            .send(`/api/backups/${encodeURIComponent(key)}/restore`, options)\n            .then(() => true);\n    }\n\n    /**\n     * @deprecated Please use `getDownloadURL()`.\n     */\n    getDownloadUrl(token: string, key: string): string {\n        console.warn(\n            \"Please replace pb.backups.getDownloadUrl() with pb.backups.getDownloadURL()\",\n        );\n        return this.getDownloadURL(token, key);\n    }\n\n    /**\n     * Builds a download url for a single existing backup using a\n     * superuser file token and the backup file key.\n     *\n     * The file token can be generated via `pb.files.getToken()`.\n     */\n    getDownloadURL(token: string, key: string): string {\n        return this.client.buildURL(\n            `/api/backups/${encodeURIComponent(key)}?token=${encodeURIComponent(token)}`,\n        );\n    }\n}\n","import { BaseService } from \"@/services/BaseService\";\nimport { CommonOptions } from \"@/tools/options\";\n\nexport interface CronJob {\n    id: string;\n    expression: string;\n}\n\nexport class CronService extends BaseService {\n    /**\n     * Returns list with all registered cron jobs.\n     *\n     * @throws {ClientResponseError}\n     */\n    async getFullList(options?: CommonOptions): Promise<Array<CronJob>> {\n        options = Object.assign(\n            {\n                method: \"GET\",\n            },\n            options,\n        );\n\n        return this.client.send(\"/api/crons\", options);\n    }\n\n    /**\n     * Runs the specified cron job.\n     *\n     * @throws {ClientResponseError}\n     */\n    async run(jobId: string, options?: CommonOptions): Promise<boolean> {\n        options = Object.assign(\n            {\n                method: \"POST\",\n            },\n            options,\n        );\n\n        return this.client\n            .send(`/api/crons/${encodeURIComponent(jobId)}`, options)\n            .then(() => true);\n    }\n}\n","/**\n * Checks if the specified value is a file (aka. File, Blob, RN file object).\n */\nexport function isFile(val: any): boolean {\n    return (\n        (typeof Blob !== \"undefined\" && val instanceof Blob) ||\n        (typeof File !== \"undefined\" && val instanceof File) ||\n        // check for React Native file object format\n        // (see https://github.com/pocketbase/pocketbase/discussions/2002#discussioncomment-5254168)\n        (val !== null &&\n            typeof val === \"object\" &&\n            val.uri &&\n            ((typeof navigator !== \"undefined\" && navigator.product === \"ReactNative\") ||\n                (typeof global !== \"undefined\" && (global as any).HermesInternal)))\n    );\n}\n\n/**\n * Loosely checks if the specified body is a FormData instance.\n */\nexport function isFormData(body: any): boolean {\n    return (\n        body &&\n        // we are checking the constructor name because FormData\n        // is not available natively in some environments and the\n        // polyfill(s) may not be globally accessible\n        (body.constructor.name === \"FormData\" ||\n            // fallback to global FormData instance check\n            // note: this is needed because the constructor.name could be different in case of\n            //       custom global FormData implementation, eg. React Native on Android/iOS\n            (typeof FormData !== \"undefined\" && body instanceof FormData))\n    );\n}\n\n/**\n * Checks if the submitted body object has at least one Blob/File field value.\n */\nexport function hasFileField(body: { [key: string]: any }): boolean {\n    for (const key in body) {\n        const values = Array.isArray(body[key]) ? body[key] : [body[key]];\n        for (const v of values) {\n            if (isFile(v)) {\n                return true;\n            }\n        }\n    }\n\n    return false;\n}\n\n/**\n * Converts analyzes the provided body and converts it to FormData\n * in case a plain object with File/Blob values is used.\n */\nexport function convertToFormDataIfNeeded(body: any): any {\n    if (\n        typeof FormData === \"undefined\" ||\n        typeof body === \"undefined\" ||\n        typeof body !== \"object\" ||\n        body === null ||\n        isFormData(body) ||\n        !hasFileField(body)\n    ) {\n        return body;\n    }\n\n    const form = new FormData();\n\n    for (const key in body) {\n        const val = body[key];\n\n        if (typeof val === \"object\" && !hasFileField({ data: val })) {\n            // send json-like values as jsonPayload to avoid the implicit string value normalization\n            let payload: { [key: string]: any } = {};\n            payload[key] = val;\n            form.append(\"@jsonPayload\", JSON.stringify(payload));\n        } else {\n            // in case of mixed string and file/blob\n            const normalizedVal = Array.isArray(val) ? val : [val];\n            for (let v of normalizedVal) {\n                form.append(key, v);\n            }\n        }\n    }\n\n    return form;\n}\n\n/**\n * Converts the provided FormData instance into a plain object.\n *\n * For consistency with the server multipart/form-data inferring,\n * the following normalization rules are applied for plain multipart string values:\n *   - \"true\" is converted to the json \"true\"\n *   - \"false\" is converted to the json \"false\"\n *   - numeric strings are converted to json number ONLY if the resulted\n *     minimal number string representation is the same as the provided raw string\n *     (aka. scientific notations, \"Infinity\", \"0.0\", \"0001\", etc. are kept as string)\n *   - any other string (empty string too) is left as it is\n */\nexport function convertFormDataToObject(formData: FormData): { [key: string]: any } {\n    let result: { [key: string]: any } = {};\n\n    formData.forEach((v, k) => {\n        if (k === \"@jsonPayload\" && typeof v == \"string\") {\n            try {\n                let parsed = JSON.parse(v);\n                Object.assign(result, parsed);\n            } catch (err) {\n                console.warn(\"@jsonPayload error:\", err);\n            }\n        } else {\n            if (typeof result[k] !== \"undefined\") {\n                if (!Array.isArray(result[k])) {\n                    result[k] = [result[k]];\n                }\n                result[k].push(inferFormDataValue(v));\n            } else {\n                result[k] = inferFormDataValue(v);\n            }\n        }\n    });\n\n    return result;\n}\n\nconst inferNumberCharsRegex = /^[\\-\\.\\d]+$/;\n\nfunction inferFormDataValue(value: any): any {\n    if (typeof value != \"string\") {\n        return value;\n    }\n\n    if (value == \"true\") {\n        return true;\n    }\n\n    if (value == \"false\") {\n        return false;\n    }\n\n    // note: expects the provided raw string to match exactly with the minimal string representation of the parsed number\n    if (\n        (value[0] === \"-\" || (value[0] >= \"0\" && value[0] <= \"9\")) &&\n        inferNumberCharsRegex.test(value)\n    ) {\n        let num = +value;\n        if (\"\" + num === value) {\n            return num;\n        }\n    }\n\n    return value;\n}\n","import { BaseService } from \"@/services/BaseService\";\nimport { isFile, isFormData, convertFormDataToObject } from \"@/tools/formdata\";\nimport {\n    SendOptions,\n    RecordOptions,\n    normalizeUnknownQueryParams,\n    serializeQueryParams,\n} from \"@/tools/options\";\n\nexport interface BatchRequest {\n    method: string;\n    url: string;\n    json?: { [key: string]: any };\n    files?: { [key: string]: Array<any> };\n    headers?: { [key: string]: string };\n}\n\nexport interface BatchRequestResult {\n    status: number;\n    body: any;\n}\n\nexport class BatchService extends BaseService {\n    private requests: Array<BatchRequest> = [];\n    private subs: { [key: string]: SubBatchService } = {};\n\n    /**\n     * Starts constructing a batch request entry for the specified collection.\n     */\n    collection(collectionIdOrName: string): SubBatchService {\n        if (!this.subs[collectionIdOrName]) {\n            this.subs[collectionIdOrName] = new SubBatchService(\n                this.requests,\n                collectionIdOrName,\n            );\n        }\n\n        return this.subs[collectionIdOrName];\n    }\n\n    /**\n     * Sends the batch requests.\n     *\n     * @throws {ClientResponseError}\n     */\n    async send(options?: SendOptions): Promise<Array<BatchRequestResult>> {\n        const formData = new FormData();\n\n        const jsonData = [];\n\n        for (let i = 0; i < this.requests.length; i++) {\n            const req = this.requests[i];\n\n            jsonData.push({\n                method: req.method,\n                url: req.url,\n                headers: req.headers,\n                body: req.json,\n            });\n\n            if (req.files) {\n                for (let key in req.files) {\n                    const files = req.files[key] || [];\n                    for (let file of files) {\n                        formData.append(\"requests.\" + i + \".\" + key, file);\n                    }\n                }\n            }\n        }\n\n        formData.append(\"@jsonPayload\", JSON.stringify({ requests: jsonData }));\n\n        options = Object.assign(\n            {\n                method: \"POST\",\n                body: formData,\n            },\n            options,\n        );\n\n        return this.client.send(\"/api/batch\", options);\n    }\n}\n\nexport class SubBatchService {\n    private requests: Array<BatchRequest> = [];\n    private readonly collectionIdOrName: string;\n\n    constructor(requests: Array<BatchRequest>, collectionIdOrName: string) {\n        this.requests = requests;\n        this.collectionIdOrName = collectionIdOrName;\n    }\n\n    /**\n     * Registers a record upsert request into the current batch queue.\n     *\n     * The request will be executed as update if `bodyParams` have a valid existing record `id` value, otherwise - create.\n     */\n    upsert(\n        bodyParams?: { [key: string]: any } | FormData,\n        options?: RecordOptions,\n    ): void {\n        options = Object.assign(\n            {\n                body: bodyParams || {},\n            },\n            options,\n        );\n\n        const request: BatchRequest = {\n            method: \"PUT\",\n            url:\n                \"/api/collections/\" +\n                encodeURIComponent(this.collectionIdOrName) +\n                \"/records\",\n        };\n\n        this.prepareRequest(request, options);\n\n        this.requests.push(request);\n    }\n\n    /**\n     * Registers a record create request into the current batch queue.\n     */\n    create(\n        bodyParams?: { [key: string]: any } | FormData,\n        options?: RecordOptions,\n    ): void {\n        options = Object.assign(\n            {\n                body: bodyParams || {},\n            },\n            options,\n        );\n\n        const request: BatchRequest = {\n            method: \"POST\",\n            url:\n                \"/api/collections/\" +\n                encodeURIComponent(this.collectionIdOrName) +\n                \"/records\",\n        };\n\n        this.prepareRequest(request, options);\n\n        this.requests.push(request);\n    }\n\n    /**\n     * Registers a record update request into the current batch queue.\n     */\n    update(\n        id: string,\n        bodyParams?: { [key: string]: any } | FormData,\n        options?: RecordOptions,\n    ): void {\n        options = Object.assign(\n            {\n                body: bodyParams || {},\n            },\n            options,\n        );\n\n        const request: BatchRequest = {\n            method: \"PATCH\",\n            url:\n                \"/api/collections/\" +\n                encodeURIComponent(this.collectionIdOrName) +\n                \"/records/\" +\n                encodeURIComponent(id),\n        };\n\n        this.prepareRequest(request, options);\n\n        this.requests.push(request);\n    }\n\n    /**\n     * Registers a record delete request into the current batch queue.\n     */\n    delete(id: string, options?: SendOptions): void {\n        options = Object.assign({}, options);\n\n        const request: BatchRequest = {\n            method: \"DELETE\",\n            url:\n                \"/api/collections/\" +\n                encodeURIComponent(this.collectionIdOrName) +\n                \"/records/\" +\n                encodeURIComponent(id),\n        };\n\n        this.prepareRequest(request, options);\n\n        this.requests.push(request);\n    }\n\n    private prepareRequest(request: BatchRequest, options: SendOptions) {\n        normalizeUnknownQueryParams(options);\n\n        request.headers = options.headers;\n        request.json = {};\n        request.files = {};\n\n        // serialize query parameters\n        // -----------------------------------------------------------\n        if (typeof options.query !== \"undefined\") {\n            const query = serializeQueryParams(options.query);\n            if (query) {\n                request.url += (request.url.includes(\"?\") ? \"&\" : \"?\") + query;\n            }\n        }\n\n        // extract json and files body data\n        // -----------------------------------------------------------\n        let body = options.body;\n        if (isFormData(body)) {\n            body = convertFormDataToObject(body);\n        }\n\n        for (const key in body) {\n            const val = body[key];\n\n            if (isFile(val)) {\n                request.files[key] = request.files[key] || [];\n                request.files[key].push(val);\n            } else if (Array.isArray(val)) {\n                const foundFiles = [];\n                const foundRegular = [];\n                for (const v of val) {\n                    if (isFile(v)) {\n                        foundFiles.push(v);\n                    } else {\n                        foundRegular.push(v);\n                    }\n                }\n\n                if (foundFiles.length > 0 && foundFiles.length == val.length) {\n                    // only files\n                    // ---\n                    request.files[key] = request.files[key] || [];\n                    for (let file of foundFiles) {\n                        request.files[key].push(file);\n                    }\n                } else {\n                    // empty or mixed array (both regular and File/Blob values)\n                    // ---\n                    request.json[key] = foundRegular;\n\n                    if (foundFiles.length > 0) {\n                        // add \"+\" to append if not already since otherwise\n                        // the existing regular files will be deleted\n                        // (the mixed values order is preserved only within their corresponding groups)\n                        let fileKey = key;\n                        if (!key.startsWith(\"+\") && !key.endsWith(\"+\")) {\n                            fileKey += \"+\";\n                        }\n\n                        request.files[fileKey] = request.files[fileKey] || [];\n                        for (let file of foundFiles) {\n                            request.files[fileKey].push(file);\n                        }\n                    }\n                }\n            } else {\n                request.json[key] = val;\n            }\n        }\n    }\n}\n","import { ClientResponseError } from \"@/ClientResponseError\";\nimport { BaseAuthStore } from \"@/stores/BaseAuthStore\";\nimport { LocalAuthStore } from \"@/stores/LocalAuthStore\";\nimport { SettingsService } from \"@/services/SettingsService\";\nimport { RecordService } from \"@/services/RecordService\";\nimport { CollectionService } from \"@/services/CollectionService\";\nimport { LogService } from \"@/services/LogService\";\nimport { RealtimeService } from \"@/services/RealtimeService\";\nimport { HealthService } from \"@/services/HealthService\";\nimport { FileService } from \"@/services/FileService\";\nimport { BackupService } from \"@/services/BackupService\";\nimport { CronService } from \"@/services/CronService\";\nimport { BatchService } from \"@/services/BatchService\";\nimport { RecordModel } from \"@/tools/dtos\";\nimport {\n    SendOptions,\n    FileOptions,\n    normalizeUnknownQueryParams,\n    serializeQueryParams,\n} from \"@/tools/options\";\nimport { isFormData, convertToFormDataIfNeeded } from \"@/tools/formdata\";\n\nexport interface BeforeSendResult {\n    [key: string]: any; // for backward compatibility\n    url?: string;\n    options?: { [key: string]: any };\n}\n\n/**\n * PocketBase JS Client.\n */\nexport default class Client {\n    /**\n     * The base PocketBase backend url address (eg. 'http://127.0.0.1.8090').\n     */\n    baseURL: string;\n\n    /**\n     * Legacy getter alias for baseURL.\n     * @deprecated Please replace with baseURL.\n     */\n    get baseUrl(): string {\n        return this.baseURL;\n    }\n\n    /**\n     * Legacy setter alias for baseURL.\n     * @deprecated Please replace with baseURL.\n     */\n    set baseUrl(v: string) {\n        this.baseURL = v;\n    }\n\n    /**\n     * Hook that get triggered right before sending the fetch request,\n     * allowing you to inspect and modify the url and request options.\n     *\n     * For list of the possible options check https://developer.mozilla.org/en-US/docs/Web/API/fetch#options\n     *\n     * You can return a non-empty result object `{ url, options }` to replace the url and request options entirely.\n     *\n     * Example:\n     * ```js\n     * client.beforeSend = function (url, options) {\n     *     options.headers = Object.assign({}, options.headers, {\n     *         'X-Custom-Header': 'example',\n     *     });\n     *\n     *     return { url, options }\n     * };\n     * ```\n     */\n    beforeSend?: (\n        url: string,\n        options: SendOptions,\n    ) => BeforeSendResult | Promise<BeforeSendResult>;\n\n    /**\n     * Hook that get triggered after successfully sending the fetch request,\n     * allowing you to inspect/modify the response object and its parsed data.\n     *\n     * Returns the new Promise resolved `data` that will be returned to the client.\n     *\n     * Example:\n     * ```js\n     * client.afterSend = function (response, data, options) {\n     *     if (response.status != 200) {\n     *         throw new ClientResponseError({\n     *             url:      response.url,\n     *             status:   response.status,\n     *             response: { ... },\n     *         });\n     *     }\n     *\n     *     return data;\n     * };\n     * ```\n     */\n    afterSend?: ((response: Response, data: any) => any) &\n        ((response: Response, data: any, options: SendOptions) => any);\n\n    /**\n     * Optional language code (default to `en-US`) that will be sent\n     * with the requests to the server as `Accept-Language` header.\n     */\n    lang: string;\n\n    /**\n     * A replaceable instance of the local auth store service.\n     */\n    authStore: BaseAuthStore;\n\n    /**\n     * An instance of the service that handles the **Settings APIs**.\n     */\n    readonly settings: SettingsService;\n\n    /**\n     * An instance of the service that handles the **Collection APIs**.\n     */\n    readonly collections: CollectionService;\n\n    /**\n     * An instance of the service that handles the **File APIs**.\n     */\n    readonly files: FileService;\n\n    /**\n     * An instance of the service that handles the **Log APIs**.\n     */\n    readonly logs: LogService;\n\n    /**\n     * An instance of the service that handles the **Realtime APIs**.\n     */\n    readonly realtime: RealtimeService;\n\n    /**\n     * An instance of the service that handles the **Health APIs**.\n     */\n    readonly health: HealthService;\n\n    /**\n     * An instance of the service that handles the **Backup APIs**.\n     */\n    readonly backups: BackupService;\n\n    /**\n     * An instance of the service that handles the **Cron APIs**.\n     */\n    readonly crons: CronService;\n\n    private cancelControllers: { [key: string]: AbortController } = {};\n    private recordServices: { [key: string]: RecordService } = {};\n    private enableAutoCancellation: boolean = true;\n\n    constructor(baseURL = \"/\", authStore?: BaseAuthStore | null, lang = \"en-US\") {\n        this.baseURL = baseURL;\n        this.lang = lang;\n\n        if (authStore) {\n            this.authStore = authStore;\n        } else if (typeof window != \"undefined\" && !!(window as any).Deno) {\n            // note: to avoid common security issues we fallback to runtime/memory store in case the code is running in Deno env\n            this.authStore = new BaseAuthStore();\n        } else {\n            this.authStore = new LocalAuthStore();\n        }\n\n        // common services\n        this.collections = new CollectionService(this);\n        this.files = new FileService(this);\n        this.logs = new LogService(this);\n        this.settings = new SettingsService(this);\n        this.realtime = new RealtimeService(this);\n        this.health = new HealthService(this);\n        this.backups = new BackupService(this);\n        this.crons = new CronService(this);\n    }\n\n    /**\n     * @deprecated\n     * With PocketBase v0.23.0 admins are converted to a regular auth\n     * collection named \"_superusers\", aka. you can use directly collection(\"_superusers\").\n     */\n    get admins(): RecordService {\n        return this.collection(\"_superusers\");\n    }\n\n    /**\n     * Creates a new batch handler for sending multiple transactional\n     * create/update/upsert/delete collection requests in one network call.\n     *\n     * Example:\n     * ```js\n     * const batch = pb.createBatch();\n     *\n     * batch.collection(\"example1\").create({ ... })\n     * batch.collection(\"example2\").update(\"RECORD_ID\", { ... })\n     * batch.collection(\"example3\").delete(\"RECORD_ID\")\n     * batch.collection(\"example4\").upsert({ ... })\n     *\n     * await batch.send()\n     * ```\n     */\n    createBatch(): BatchService {\n        return new BatchService(this);\n    }\n\n    /**\n     * Returns the RecordService associated to the specified collection.\n     */\n    collection<M = RecordModel>(idOrName: string): RecordService<M> {\n        if (!this.recordServices[idOrName]) {\n            this.recordServices[idOrName] = new RecordService(this, idOrName);\n        }\n\n        return this.recordServices[idOrName];\n    }\n\n    /**\n     * Globally enable or disable auto cancellation for pending duplicated requests.\n     */\n    autoCancellation(enable: boolean): Client {\n        this.enableAutoCancellation = !!enable;\n\n        return this;\n    }\n\n    /**\n     * Cancels single request by its cancellation key.\n     */\n    cancelRequest(requestKey: string): Client {\n        if (this.cancelControllers[requestKey]) {\n            this.cancelControllers[requestKey].abort();\n            delete this.cancelControllers[requestKey];\n        }\n\n        return this;\n    }\n\n    /**\n     * Cancels all pending requests.\n     */\n    cancelAllRequests(): Client {\n        for (let k in this.cancelControllers) {\n            this.cancelControllers[k].abort();\n        }\n\n        this.cancelControllers = {};\n\n        return this;\n    }\n\n    /**\n     * Constructs a filter expression with placeholders populated from a parameters object.\n     *\n     * Placeholder parameters are defined with the `{:paramName}` notation.\n     *\n     * The following parameter values are supported:\n     *\n     * - `string` (_single quotes are autoescaped_)\n     * - `number`\n     * - `boolean`\n     * - `Date` object (_stringified into the PocketBase datetime format_)\n     * - `null`\n     * - everything else is converted to a string using `JSON.stringify()`\n     *\n     * Example:\n     *\n     * ```js\n     * pb.collection(\"example\").getFirstListItem(pb.filter(\n     *    'title ~ {:title} && created >= {:created}',\n     *    { title: \"example\", created: new Date()}\n     * ))\n     * ```\n     */\n    filter(raw: string, params?: { [key: string]: any }): string {\n        if (!params) {\n            return raw;\n        }\n\n        for (let key in params) {\n            let val = params[key];\n            switch (typeof val) {\n                case \"boolean\":\n                case \"number\":\n                    val = \"\" + val;\n                    break;\n                case \"string\":\n                    val = \"'\" + val.replace(/'/g, \"\\\\'\") + \"'\";\n                    break;\n                default:\n                    if (val === null) {\n                        val = \"null\";\n                    } else if (val instanceof Date) {\n                        val = \"'\" + val.toISOString().replace(\"T\", \" \") + \"'\";\n                    } else {\n                        val = \"'\" + JSON.stringify(val).replace(/'/g, \"\\\\'\") + \"'\";\n                    }\n            }\n            raw = raw.replaceAll(\"{:\" + key + \"}\", val);\n        }\n\n        return raw;\n    }\n\n    /**\n     * @deprecated Please use `pb.files.getURL()`.\n     */\n    getFileUrl(\n        record: { [key: string]: any },\n        filename: string,\n        queryParams: FileOptions = {},\n    ): string {\n        console.warn(\"Please replace pb.getFileUrl() with pb.files.getURL()\");\n        return this.files.getURL(record, filename, queryParams);\n    }\n\n    /**\n     * @deprecated Please use `pb.buildURL()`.\n     */\n    buildUrl(path: string): string {\n        console.warn(\"Please replace pb.buildUrl() with pb.buildURL()\");\n        return this.buildURL(path);\n    }\n\n    /**\n     * Builds a full client url by safely concatenating the provided path.\n     */\n    buildURL(path: string): string {\n        let url = this.baseURL;\n\n        // construct an absolute base url if in a browser environment\n        if (\n            typeof window !== \"undefined\" &&\n            !!window.location &&\n            !url.startsWith(\"https://\") &&\n            !url.startsWith(\"http://\")\n        ) {\n            url = window.location.origin?.endsWith(\"/\")\n                ? window.location.origin.substring(0, window.location.origin.length - 1)\n                : window.location.origin || \"\";\n\n            if (!this.baseURL.startsWith(\"/\")) {\n                url += window.location.pathname || \"/\";\n                url += url.endsWith(\"/\") ? \"\" : \"/\";\n            }\n\n            url += this.baseURL;\n        }\n\n        // concatenate the path\n        if (path) {\n            url += url.endsWith(\"/\") ? \"\" : \"/\"; // append trailing slash if missing\n            url += path.startsWith(\"/\") ? path.substring(1) : path;\n        }\n\n        return url;\n    }\n\n    /**\n     * Sends an api http request.\n     *\n     * @throws {ClientResponseError}\n     */\n    async send<T = any>(path: string, options: SendOptions): Promise<T> {\n        options = this.initSendOptions(path, options);\n\n        // build url + path\n        let url = this.buildURL(path);\n\n        if (this.beforeSend) {\n            const result = Object.assign({}, await this.beforeSend(url, options));\n            if (\n                typeof result.url !== \"undefined\" ||\n                typeof result.options !== \"undefined\"\n            ) {\n                url = result.url || url;\n                options = result.options || options;\n            } else if (Object.keys(result).length) {\n                // legacy behavior\n                options = result as SendOptions;\n                console?.warn &&\n                    console.warn(\n                        \"Deprecated format of beforeSend return: please use `return { url, options }`, instead of `return options`.\",\n                    );\n            }\n        }\n\n        // serialize the query parameters\n        if (typeof options.query !== \"undefined\") {\n            const query = serializeQueryParams(options.query);\n            if (query) {\n                url += (url.includes(\"?\") ? \"&\" : \"?\") + query;\n            }\n            delete options.query;\n        }\n\n        // ensures that the json body is serialized\n        if (\n            this.getHeader(options.headers, \"Content-Type\") == \"application/json\" &&\n            options.body &&\n            typeof options.body !== \"string\"\n        ) {\n            options.body = JSON.stringify(options.body);\n        }\n\n        const fetchFunc = options.fetch || fetch;\n\n        // send the request\n        return fetchFunc(url, options)\n            .then(async (response) => {\n                let data: any = {};\n\n                try {\n                    data = await response.json();\n                } catch (_) {\n                    // all api responses are expected to return json\n                    // with the exception of the realtime event and 204\n                }\n\n                if (this.afterSend) {\n                    data = await this.afterSend(response, data, options);\n                }\n\n                if (response.status >= 400) {\n                    throw new ClientResponseError({\n                        url: response.url,\n                        status: response.status,\n                        data: data,\n                    });\n                }\n\n                return data as T;\n            })\n            .catch((err) => {\n                // wrap to normalize all errors\n                throw new ClientResponseError(err);\n            });\n    }\n\n    /**\n     * Shallow copy the provided object and takes care to initialize\n     * any options required to preserve the backward compatability.\n     *\n     * @param  {SendOptions} options\n     * @return {SendOptions}\n     */\n    private initSendOptions(path: string, options: SendOptions): SendOptions {\n        options = Object.assign({ method: \"GET\" } as SendOptions, options);\n\n        // auto convert the body to FormData, if needed\n        options.body = convertToFormDataIfNeeded(options.body);\n\n        // move unknown send options as query parameters\n        normalizeUnknownQueryParams(options);\n\n        // requestKey normalizations for backward-compatibility\n        // ---\n        options.query = Object.assign({}, options.params, options.query);\n        if (typeof options.requestKey === \"undefined\") {\n            if (options.$autoCancel === false || options.query.$autoCancel === false) {\n                options.requestKey = null;\n            } else if (options.$cancelKey || options.query.$cancelKey) {\n                options.requestKey = options.$cancelKey || options.query.$cancelKey;\n            }\n        }\n        // remove the deprecated special cancellation params from the other query params\n        delete options.$autoCancel;\n        delete options.query.$autoCancel;\n        delete options.$cancelKey;\n        delete options.query.$cancelKey;\n        // ---\n\n        // add the json header, if not explicitly set\n        // (for FormData body the Content-Type header should be skipped since the boundary is autogenerated)\n        if (\n            this.getHeader(options.headers, \"Content-Type\") === null &&\n            !isFormData(options.body)\n        ) {\n            options.headers = Object.assign({}, options.headers, {\n                \"Content-Type\": \"application/json\",\n            });\n        }\n\n        // add Accept-Language header, if not explicitly set\n        if (this.getHeader(options.headers, \"Accept-Language\") === null) {\n            options.headers = Object.assign({}, options.headers, {\n                \"Accept-Language\": this.lang,\n            });\n        }\n\n        // check if Authorization header can be added\n        if (\n            // has valid token\n            this.authStore.token &&\n            // auth header is not explicitly set\n            this.getHeader(options.headers, \"Authorization\") === null\n        ) {\n            options.headers = Object.assign({}, options.headers, {\n                Authorization: this.authStore.token,\n            });\n        }\n\n        // handle auto cancelation for duplicated pending request\n        if (this.enableAutoCancellation && options.requestKey !== null) {\n            const requestKey = options.requestKey || (options.method || \"GET\") + path;\n\n            delete options.requestKey;\n\n            // cancel previous pending requests\n            this.cancelRequest(requestKey);\n\n            const controller = new AbortController();\n            this.cancelControllers[requestKey] = controller;\n            options.signal = controller.signal;\n        }\n\n        return options;\n    }\n\n    /**\n     * Extracts the header with the provided name in case-insensitive manner.\n     * Returns `null` if no header matching the name is found.\n     */\n    private getHeader(\n        headers: { [key: string]: string } | undefined,\n        name: string,\n    ): string | null {\n        headers = headers || {};\n        name = name.toLowerCase();\n\n        for (let key in headers) {\n            if (key.toLowerCase() == name) {\n                return headers[key];\n            }\n        }\n\n        return null;\n    }\n}\n","import { BaseAuthStore, AuthRecord } from \"@/stores/BaseAuthStore\";\n\nexport type AsyncSaveFunc = (serializedPayload: string) => Promise<void>;\n\nexport type AsyncClearFunc = () => Promise<void>;\n\ntype queueFunc = () => Promise<void>;\n\n/**\n * AsyncAuthStore is a helper auth store implementation\n * that could be used with any external async persistent layer\n * (key-value db, local file, etc.).\n *\n * Here is an example with the React Native AsyncStorage package:\n *\n * ```\n * import AsyncStorage from \"@react-native-async-storage/async-storage\";\n * import PocketBase, { AsyncAuthStore } from \"pocketbase\";\n *\n * const store = new AsyncAuthStore({\n *     save:    async (serialized) => AsyncStorage.setItem(\"pb_auth\", serialized),\n *     initial: AsyncStorage.getItem(\"pb_auth\"),\n * });\n *\n * const pb = new PocketBase(\"https://example.com\", store)\n * ```\n */\nexport class AsyncAuthStore extends BaseAuthStore {\n    private saveFunc: AsyncSaveFunc;\n    private clearFunc?: AsyncClearFunc;\n    private queue: Array<queueFunc> = [];\n\n    constructor(config: {\n        // The async function that is called every time\n        // when the auth store state needs to be persisted.\n        save: AsyncSaveFunc;\n\n        /// An *optional* async function that is called every time\n        /// when the auth store needs to be cleared.\n        ///\n        /// If not explicitly set, `saveFunc` with empty data will be used.\n        clear?: AsyncClearFunc;\n\n        // An *optional* initial data to load into the store.\n        initial?: string | Promise<any>;\n    }) {\n        super();\n\n        this.saveFunc = config.save;\n        this.clearFunc = config.clear;\n\n        this._enqueue(() => this._loadInitial(config.initial));\n    }\n\n    /**\n     * @inheritdoc\n     */\n    save(token: string, record?: AuthRecord): void {\n        super.save(token, record);\n\n        let value = \"\";\n        try {\n            value = JSON.stringify({ token, record });\n        } catch (err) {\n            console.warn(\"AsyncAuthStore: failed to stringify the new state\");\n        }\n\n        this._enqueue(() => this.saveFunc(value));\n    }\n\n    /**\n     * @inheritdoc\n     */\n    clear(): void {\n        super.clear();\n\n        if (this.clearFunc) {\n            this._enqueue(() => this.clearFunc!());\n        } else {\n            this._enqueue(() => this.saveFunc(\"\"));\n        }\n    }\n\n    /**\n     * Initializes the auth store state.\n     */\n    private async _loadInitial(payload?: string | Promise<any>) {\n        try {\n            payload = await payload;\n\n            if (payload) {\n                let parsed;\n                if (typeof payload === \"string\") {\n                    parsed = JSON.parse(payload) || {};\n                } else if (typeof payload === \"object\") {\n                    parsed = payload;\n                }\n\n                this.save(parsed.token || \"\", parsed.record || parsed.model || null);\n            }\n        } catch (_) {}\n    }\n\n    /**\n     * Appends an async function to the queue.\n     */\n    private _enqueue(asyncCallback: () => Promise<void>) {\n        this.queue.push(asyncCallback);\n\n        if (this.queue.length == 1) {\n            this._dequeue();\n        }\n    }\n\n    /**\n     * Starts the queue processing.\n     */\n    private _dequeue() {\n        if (!this.queue.length) {\n            return;\n        }\n\n        this.queue[0]().finally(() => {\n            this.queue.shift();\n\n            if (!this.queue.length) {\n                return;\n            }\n\n            this._dequeue();\n        });\n    }\n}\n"],"names":["ClientResponseError","Error","constructor","errData","super","this","url","status","response","isAbort","originalError","Object","setPrototypeOf","prototype","data","DOMException","name","message","cause","includes","toJSON","fieldContentRegExp","cookieParse","str","options","result","decode","assign","defaultDecode","index","length","eqIdx","indexOf","endIdx","lastIndexOf","key","slice","trim","undefined","val","charCodeAt","_","cookieSerialize","opt","encode","defaultEncode","test","TypeError","value","maxAge","isNaN","isFinite","Math","floor","domain","path","expires","isDate","toString","call","Date","valueOf","toUTCString","httpOnly","secure","priority","toLowerCase","sameSite","decodeURIComponent","encodeURIComponent","isReactNative","navigator","product","global","HermesInternal","atobPolyfill","getTokenPayload","token","encodedPayload","split","map","c","join","JSON","parse","e","isTokenExpired","expirationThreshold","payload","keys","exp","now","atob","input","String","replace","bs","buffer","bc","idx","output","charAt","fromCharCode","defaultCookieKey","BaseAuthStore","baseToken","baseModel","_onChangeCallbacks","record","model","isValid","isSuperuser","type","collectionName","collectionId","isAdmin","console","warn","isAuthRecord","save","triggerChange","clear","loadFromCookie","cookie","rawData","Array","isArray","exportToCookie","defaultOptions","stringify","resultLength","Blob","size","id","email","extraProps","prop","onChange","callback","fireImmediately","push","i","splice","LocalAuthStore","storageKey","storageFallback","_bindStorageEvent","_storageGet","_storageSet","_storageRemove","window","localStorage","rawValue","getItem","normalizedVal","setItem","removeItem","addEventListener","BaseService","client","SettingsService","getAll","method","send","update","bodyParams","body","testS3","filesystem","then","testEmail","collectionIdOrName","toEmail","emailTemplate","template","collection","generateAppleClientSecret","clientId","teamId","keyId","privateKey","duration","knownSendOptionsKeys","normalizeUnknownQueryParams","query","serializeQueryParams","params","encodedKey","v","toISOString","RealtimeService","eventSource","subscriptions","lastSentSubscriptions","maxConnectTimeout","reconnectAttempts","maxReconnectAttempts","Infinity","predefinedReconnectIntervals","pendingConnects","isConnected","subscribe","topic","serialized","headers","listener","msgEvent","submitSubscriptions","connect","async","unsubscribeByTopicAndListener","unsubscribe","needToSubmit","subs","getSubscriptionsByTopic","hasSubscriptionListeners","removeEventListener","disconnect","unsubscribeByPrefix","keyPrefix","hasAtleastOneTopic","startsWith","exist","keyToCheck","addAllSubscriptionListeners","getNonEmptySubscriptionKeys","requestKey","getSubscriptionsCancelKey","catch","err","removeAllSubscriptionListeners","Promise","resolve","reject","initConnect","clearTimeout","connectTimeoutId","setTimeout","connectErrorHandler","EventSource","buildURL","onerror","lastEventId","retries","hasUnsentSubscriptions","p","reconnectTimeoutId","connectSubs","latestTopics","t","timeout","fromReconnect","onDisconnect","cancelRequest","close","CrudService","getFullList","batchOrqueryParams","_getFullList","batch","getList","page","perPage","baseCrudPath","responseData","items","item","getFirstListItem","filter","skipTotal","code","getOne","create","batchSize","request","list","concat","normalizeLegacyOptionsArgs","legacyWarn","baseOptions","bodyOrOptions","hasQuery","resetAutoRefresh","_resetAutoRefresh","RecordService","baseCollectionPath","isSuperusers","realtime","batchOrOptions","authStore","authExpand","expand","authRecord","delete","success","authResponse","listAuthMethods","fields","authWithPassword","usernameOrEmail","password","autoRefreshThreshold","identity","autoRefresh","authData","registerAutoRefresh","threshold","refreshFunc","reauthenticateFunc","oldBeforeSend","beforeSend","oldModel","unsubStoreChange","newToken","sendOptions","oldToken","authRefresh","authWithOAuth2Code","provider","codeVerifier","redirectURL","createData","authWithOAuth2","args","config","eagerDefaultPopup","urlCallback","openBrowserPopup","cleanup","requestKeyOptions","authMethods","oauth2","providers","find","cancelController","signal","onabort","oldState","state","error","scopes","replacements","_replaceQueryParams","authURL","location","href","requestPasswordReset","confirmPasswordReset","passwordResetToken","passwordConfirm","requestVerification","confirmVerification","verificationToken","verified","requestEmailChange","newEmail","confirmEmailChange","emailChangeToken","listExternalAuths","recordId","unlinkExternalAuth","ea","requestOTP","authWithOTP","otpId","impersonate","Authorization","Client","baseURL","lang","urlPath","substring","parsedParams","rawParams","param","pair","hasOwnProperty","open","width","height","windowWidth","innerWidth","windowHeight","innerHeight","left","top","CollectionService","import","collections","deleteMissing","getScaffolds","truncate","LogService","getStats","HealthService","check","FileService","getUrl","filename","queryParams","getURL","parts","download","URLSearchParams","getToken","BackupService","basename","upload","restore","getDownloadUrl","getDownloadURL","CronService","run","jobId","isFile","File","uri","isFormData","FormData","hasFileField","values","inferNumberCharsRegex","inferFormDataValue","num","BatchService","requests","SubBatchService","formData","jsonData","req","json","files","file","append","upsert","prepareRequest","convertFormDataToObject","forEach","k","parsed","foundFiles","foundRegular","fileKey","endsWith","baseUrl","cancelControllers","recordServices","enableAutoCancellation","Deno","logs","settings","health","backups","crons","admins","createBatch","idOrName","autoCancellation","enable","abort","cancelAllRequests","raw","replaceAll","getFileUrl","buildUrl","origin","pathname","initSendOptions","getHeader","fetch","afterSend","convertToFormDataIfNeeded","form","$autoCancel","$cancelKey","controller","AbortController","AsyncAuthStore","queue","saveFunc","clearFunc","_enqueue","_loadInitial","initial","asyncCallback","_dequeue","finally","shift"],"mappings":"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","ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]}},
    {"offset": {"line": 3584, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}